
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000760  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000760  000007f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000007f4  2**0
                  ALLOC
  3 .noinit       00000000  00800062  00800062  000007f4  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000007f4  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000000e7  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000032b  00000000  00000000  00000cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000155  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000490  00000000  00000000  0000115f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000112  00000000  00000000  000015ef  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 5a 02 	jmp	0x4b4 <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__heap_end>

0000008e <fastpwm_mode>:

#define P1 PINA
#define P2 PORTC
void fastpwm_mode(unsigned int duty_fpwm)
{
  8e:	9c 01       	movw	r18, r24
TCCR2|=((1<<COM21)|(1<<WGM21)|(1<<WGM20)|(1<<CS21));	//  WGM mode : Fastpwm, 
  90:	85 b5       	in	r24, 0x25	; 37
  92:	8a 66       	ori	r24, 0x6A	; 106
  94:	85 bd       	out	0x25, r24	; 37
					//O/P compare mode: Non inverting(clear OC2 on compare match,set OC2 on bottom), clk/8
OCR2=duty_fpwm;	
  96:	23 bd       	out	0x23, r18	; 35
  98:	08 95       	ret

0000009a <delay>:

		//setting PD7 (OC2)as o/p pin
}
int s;
void delay(int b,int a)
		{
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	6c 01       	movw	r12, r24
  ac:	eb 01       	movw	r28, r22
	         for(;a>0;a--)
  ae:	16 16       	cp	r1, r22
  b0:	17 06       	cpc	r1, r23
  b2:	cc f5       	brge	.+114    	; 0x126 <delay+0x8c>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
  b4:	c6 01       	movw	r24, r12
  b6:	aa 27       	eor	r26, r26
  b8:	97 fd       	sbrc	r25, 7
  ba:	a0 95       	com	r26
  bc:	ba 2f       	mov	r27, r26
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	0e 94 ed 02 	call	0x5da <__floatsisf>
  c6:	dc 01       	movw	r26, r24
  c8:	cb 01       	movw	r24, r22
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	4a e7       	ldi	r20, 0x7A	; 122
  d0:	55 e4       	ldi	r21, 0x45	; 69
  d2:	bc 01       	movw	r22, r24
  d4:	cd 01       	movw	r24, r26
  d6:	0e 94 64 03 	call	0x6c8 <__mulsf3>
  da:	7b 01       	movw	r14, r22
  dc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	40 e8       	ldi	r20, 0x80	; 128
  e4:	5f e3       	ldi	r21, 0x3F	; 63
  e6:	0e 94 f7 02 	call	0x5ee <__eqsf2>
  ea:	88 23       	and	r24, r24
  ec:	1c f4       	brge	.+6      	; 0xf4 <delay+0x5a>
		__ticks = 1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	13 c0       	rjmp	.+38     	; 0x11a <delay+0x80>
	else if (__tmp > 65535)
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	3f ef       	ldi	r19, 0xFF	; 255
  f8:	4f e7       	ldi	r20, 0x7F	; 127
  fa:	57 e4       	ldi	r21, 0x47	; 71
  fc:	c8 01       	movw	r24, r16
  fe:	b7 01       	movw	r22, r14
 100:	0e 94 fa 02 	call	0x5f4 <__gesf2>
 104:	18 16       	cp	r1, r24
 106:	1c f4       	brge	.+6      	; 0x10e <delay+0x74>
		__ticks = 0;	/* i.e. 65536 */
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	06 c0       	rjmp	.+12     	; 0x11a <delay+0x80>
	else
		__ticks = (uint16_t)__tmp;
 10e:	c8 01       	movw	r24, r16
 110:	b7 01       	movw	r22, r14
 112:	0e 94 d0 02 	call	0x5a0 <__fixsfsi>
 116:	dc 01       	movw	r26, r24
 118:	cb 01       	movw	r24, r22
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <delay+0x80>
 11e:	21 97       	sbiw	r28, 0x01	; 1
 120:	1c 16       	cp	r1, r28
 122:	1d 06       	cpc	r1, r29
 124:	3c f2       	brlt	.-114    	; 0xb4 <delay+0x1a>
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	df 90       	pop	r13
 134:	cf 90       	pop	r12
 136:	08 95       	ret

00000138 <port1>:
		    _delay_ms(b);
		}
void port1()
{
DDRA=0x00;PORTA=0xFF;
 138:	1a ba       	out	0x1a, r1	; 26
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	8b bb       	out	0x1b, r24	; 27
DDRC=0xFF;DDRD|=0b10100000;
 13e:	84 bb       	out	0x14, r24	; 20
 140:	81 b3       	in	r24, 0x11	; 17
 142:	80 6a       	ori	r24, 0xA0	; 160
 144:	81 bb       	out	0x11, r24	; 17
DDRD&=0b10111111;
 146:	8e 98       	cbi	0x11, 6	; 17
 148:	08 95       	ret

0000014a <right>:
}

void right()
{
fastpwm_mode(100);
 14a:	84 e6       	ldi	r24, 0x64	; 100
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 47 00 	call	0x8e <fastpwm_mode>
P2=0b11111101;
 152:	8d ef       	ldi	r24, 0xFD	; 253
 154:	85 bb       	out	0x15, r24	; 21
fastpwm_mode(255);
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 47 00 	call	0x8e <fastpwm_mode>
 15e:	08 95       	ret

00000160 <right2>:
}
void right2() 
{
P2=0b11111001;
 160:	89 ef       	ldi	r24, 0xF9	; 249
 162:	85 bb       	out	0x15, r24	; 21
 164:	08 95       	ret

00000166 <left>:
}
void left()
{fastpwm_mode(100);
 166:	84 e6       	ldi	r24, 0x64	; 100
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 47 00 	call	0x8e <fastpwm_mode>
P2=0b11110111;
 16e:	87 ef       	ldi	r24, 0xF7	; 247
 170:	85 bb       	out	0x15, r24	; 21
fastpwm_mode(255);
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 47 00 	call	0x8e <fastpwm_mode>
 17a:	08 95       	ret

0000017c <left2>:
}
void left2()
{
P2=0b11110110;
 17c:	86 ef       	ldi	r24, 0xF6	; 246
 17e:	85 bb       	out	0x15, r24	; 21
 180:	08 95       	ret

00000182 <str>:
}
void str()
{
P2=0b11110101;
 182:	85 ef       	ldi	r24, 0xF5	; 245
 184:	85 bb       	out	0x15, r24	; 21
 186:	08 95       	ret

00000188 <stop>:

}
stop()
{
P2=0xFF;
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	85 bb       	out	0x15, r24	; 21
 18c:	08 95       	ret

0000018e <back>:
}


void back()
{
P2=0b11111010;
 18e:	8a ef       	ldi	r24, 0xFA	; 250
 190:	85 bb       	out	0x15, r24	; 21
 192:	08 95       	ret

00000194 <turnleft>:

}



void turnleft()
{str();
 194:	0e 94 c1 00 	call	0x182 <str>
delay(1,130);
 198:	62 e8       	ldi	r22, 0x82	; 130
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 4d 00 	call	0x9a <delay>
left2();
 1a4:	0e 94 be 00 	call	0x17c <left2>
delay(1,300);
 1a8:	6c e2       	ldi	r22, 0x2C	; 44
 1aa:	71 e0       	ldi	r23, 0x01	; 1
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 4d 00 	call	0x9a <delay>
 1b4:	08 95       	ret

000001b6 <turnright>:


}

void turnright()
{
str();
 1b6:	0e 94 c1 00 	call	0x182 <str>
delay(1,130);
 1ba:	62 e8       	ldi	r22, 0x82	; 130
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 4d 00 	call	0x9a <delay>
right2();
 1c6:	0e 94 b0 00 	call	0x160 <right2>
delay(1,300);
 1ca:	6c e2       	ldi	r22, 0x2C	; 44
 1cc:	71 e0       	ldi	r23, 0x01	; 1
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 4d 00 	call	0x9a <delay>
 1d6:	08 95       	ret

000001d8 <turnback>:


}

void turnback()
{
while(1)
{

left2();
 1d8:	0e 94 be 00 	call	0x17c <left2>
 if(PINA&0b00000010)
 1dc:	c9 9b       	sbis	0x19, 1	; 25
 1de:	fc cf       	rjmp	.-8      	; 0x1d8 <turnback>
 break;
 }
stop();
 1e0:	0e 94 c4 00 	call	0x188 <stop>
 1e4:	08 95       	ret

000001e6 <white_move>:


}


white_move()
{

while(1)
{
if(PINA==0b11111111)
 1e6:	89 b3       	in	r24, 0x19	; 25
 1e8:	8f 3f       	cpi	r24, 0xFF	; 255
 1ea:	19 f4       	brne	.+6      	; 0x1f2 <white_move+0xc>
str();
 1ec:	0e 94 c1 00 	call	0x182 <str>
 1f0:	fa cf       	rjmp	.-12     	; 0x1e6 <white_move>
else break;

}
stop();
 1f2:	0e 94 c4 00 	call	0x188 <stop>
 1f6:	08 95       	ret

000001f8 <follow>:

//str();	delay(1,300);


}

int follow()
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
int a=0;
while(1)
{
if((PINA & 0b00011111)==0b00011111)
 1fc:	89 b3       	in	r24, 0x19	; 25
 1fe:	99 27       	eor	r25, r25
 200:	8f 71       	andi	r24, 0x1F	; 31
 202:	90 70       	andi	r25, 0x00	; 0
 204:	4f 97       	sbiw	r24, 0x1f	; 31
 206:	89 f4       	brne	.+34     	; 0x22a <follow+0x32>
{



back();
 208:	0e 94 c7 00 	call	0x18e <back>
delay(1,30);
 20c:	6e e1       	ldi	r22, 0x1E	; 30
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 4d 00 	call	0x9a <delay>
stop();
 218:	0e 94 c4 00 	call	0x188 <stop>
s=1;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 61 00 	sts	0x0061, r25
 224:	80 93 60 00 	sts	0x0060, r24
break;
 228:	58 c0       	rjmp	.+176    	; 0x2da <follow+0xe2>

}


else if((PINA & 0b00011111)==0b00000111)
 22a:	89 b3       	in	r24, 0x19	; 25
 22c:	99 27       	eor	r25, r25
 22e:	8f 71       	andi	r24, 0x1F	; 31
 230:	90 70       	andi	r25, 0x00	; 0
 232:	07 97       	sbiw	r24, 0x07	; 7
 234:	49 f4       	brne	.+18     	; 0x248 <follow+0x50>
{



str();
 236:	0e 94 c1 00 	call	0x182 <str>
s=1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 61 00 	sts	0x0061, r25
 242:	80 93 60 00 	sts	0x0060, r24
 246:	da cf       	rjmp	.-76     	; 0x1fc <follow+0x4>



}
else if((PINA & 0b00011111)==0b00000000)
 248:	89 b3       	in	r24, 0x19	; 25
 24a:	c8 2f       	mov	r28, r24
 24c:	dd 27       	eor	r29, r29
 24e:	cf 71       	andi	r28, 0x1F	; 31
 250:	d0 70       	andi	r29, 0x00	; 0
 252:	20 97       	sbiw	r28, 0x00	; 0
 254:	79 f4       	brne	.+30     	; 0x274 <follow+0x7c>
{



back();
 256:	0e 94 c7 00 	call	0x18e <back>
delay(1,30);
 25a:	6e e1       	ldi	r22, 0x1E	; 30
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 4d 00 	call	0x9a <delay>
stop();
 266:	0e 94 c4 00 	call	0x188 <stop>
s=0;
 26a:	d0 93 61 00 	sts	0x0061, r29
 26e:	c0 93 60 00 	sts	0x0060, r28
break;
 272:	33 c0       	rjmp	.+102    	; 0x2da <follow+0xe2>
}

else if((PINA & 0b00011111)==0b00000100)
 274:	89 b3       	in	r24, 0x19	; 25
 276:	99 27       	eor	r25, r25
 278:	8f 71       	andi	r24, 0x1F	; 31
 27a:	90 70       	andi	r25, 0x00	; 0
 27c:	04 97       	sbiw	r24, 0x04	; 4
 27e:	51 f1       	breq	.+84     	; 0x2d4 <follow+0xdc>
str();

else if((PINA & 0b00011111)==0b00000010)
 280:	89 b3       	in	r24, 0x19	; 25
 282:	99 27       	eor	r25, r25
 284:	8f 71       	andi	r24, 0x1F	; 31
 286:	90 70       	andi	r25, 0x00	; 0
 288:	02 97       	sbiw	r24, 0x02	; 2
 28a:	09 f1       	breq	.+66     	; 0x2ce <follow+0xd6>
left();

else if((PINA & 0b00011111)==0b00001000)
 28c:	89 b3       	in	r24, 0x19	; 25
 28e:	99 27       	eor	r25, r25
 290:	8f 71       	andi	r24, 0x1F	; 31
 292:	90 70       	andi	r25, 0x00	; 0
 294:	08 97       	sbiw	r24, 0x08	; 8
 296:	61 f0       	breq	.+24     	; 0x2b0 <follow+0xb8>
right();
   else if((PINA & 0b00011111)==0b00011000)
 298:	89 b3       	in	r24, 0x19	; 25
 29a:	99 27       	eor	r25, r25
 29c:	8f 71       	andi	r24, 0x1F	; 31
 29e:	90 70       	andi	r25, 0x00	; 0
 2a0:	48 97       	sbiw	r24, 0x18	; 24
 2a2:	31 f0       	breq	.+12     	; 0x2b0 <follow+0xb8>
right();

else if((PINA & 0b00011111)==0b00001100)
 2a4:	89 b3       	in	r24, 0x19	; 25
 2a6:	99 27       	eor	r25, r25
 2a8:	8f 71       	andi	r24, 0x1F	; 31
 2aa:	90 70       	andi	r25, 0x00	; 0
 2ac:	0c 97       	sbiw	r24, 0x0c	; 12
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <follow+0xbe>
right();
 2b0:	0e 94 a5 00 	call	0x14a <right>
 2b4:	a3 cf       	rjmp	.-186    	; 0x1fc <follow+0x4>
else if((PINA & 0b00011111)==0b00000011)
 2b6:	89 b3       	in	r24, 0x19	; 25
 2b8:	99 27       	eor	r25, r25
 2ba:	8f 71       	andi	r24, 0x1F	; 31
 2bc:	90 70       	andi	r25, 0x00	; 0
 2be:	03 97       	sbiw	r24, 0x03	; 3
 2c0:	31 f0       	breq	.+12     	; 0x2ce <follow+0xd6>
left();

else if((PINA & 0b00011111)==0b00000110)
 2c2:	89 b3       	in	r24, 0x19	; 25
 2c4:	99 27       	eor	r25, r25
 2c6:	8f 71       	andi	r24, 0x1F	; 31
 2c8:	90 70       	andi	r25, 0x00	; 0
 2ca:	06 97       	sbiw	r24, 0x06	; 6
 2cc:	19 f4       	brne	.+6      	; 0x2d4 <follow+0xdc>
left();
 2ce:	0e 94 b3 00 	call	0x166 <left>
 2d2:	94 cf       	rjmp	.-216    	; 0x1fc <follow+0x4>
else str();
 2d4:	0e 94 c1 00 	call	0x182 <str>
 2d8:	91 cf       	rjmp	.-222    	; 0x1fc <follow+0x4>

}
return a;

}
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <stop_left>:


void stop_left()
{
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29

while(1)
{
if((PINA & 0b00011111)==0b00011111)
 2e8:	89 b3       	in	r24, 0x19	; 25
 2ea:	99 27       	eor	r25, r25
 2ec:	8f 71       	andi	r24, 0x1F	; 31
 2ee:	90 70       	andi	r25, 0x00	; 0
 2f0:	4f 97       	sbiw	r24, 0x1f	; 31
 2f2:	89 f4       	brne	.+34     	; 0x316 <stop_left+0x32>
{



back();
 2f4:	0e 94 c7 00 	call	0x18e <back>
delay(1,30);
 2f8:	6e e1       	ldi	r22, 0x1E	; 30
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 4d 00 	call	0x9a <delay>
stop();
 304:	0e 94 c4 00 	call	0x188 <stop>
s=1;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	90 93 61 00 	sts	0x0061, r25
 310:	80 93 60 00 	sts	0x0060, r24
break;
 314:	58 c0       	rjmp	.+176    	; 0x3c6 <stop_left+0xe2>

}
else if((PINA & 0b00011111)==0b00000000)
 316:	89 b3       	in	r24, 0x19	; 25
 318:	c8 2f       	mov	r28, r24
 31a:	dd 27       	eor	r29, r29
 31c:	cf 71       	andi	r28, 0x1F	; 31
 31e:	d0 70       	andi	r29, 0x00	; 0
 320:	20 97       	sbiw	r28, 0x00	; 0
 322:	79 f4       	brne	.+30     	; 0x342 <stop_left+0x5e>
{



back();
 324:	0e 94 c7 00 	call	0x18e <back>
delay(1,30);
 328:	6e e1       	ldi	r22, 0x1E	; 30
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 4d 00 	call	0x9a <delay>
stop();
 334:	0e 94 c4 00 	call	0x188 <stop>
s=0;
 338:	d0 93 61 00 	sts	0x0061, r29
 33c:	c0 93 60 00 	sts	0x0060, r28
break;
 340:	42 c0       	rjmp	.+132    	; 0x3c6 <stop_left+0xe2>
}
else if((PINA & 0b00011111)==0b00000111)
 342:	89 b3       	in	r24, 0x19	; 25
 344:	99 27       	eor	r25, r25
 346:	8f 71       	andi	r24, 0x1F	; 31
 348:	90 70       	andi	r25, 0x00	; 0
 34a:	07 97       	sbiw	r24, 0x07	; 7
 34c:	31 f0       	breq	.+12     	; 0x35a <stop_left+0x76>
{stop();break;
}

else if((PINA & 0b00011111)==0b00001111)
 34e:	89 b3       	in	r24, 0x19	; 25
 350:	99 27       	eor	r25, r25
 352:	8f 71       	andi	r24, 0x1F	; 31
 354:	90 70       	andi	r25, 0x00	; 0
 356:	0f 97       	sbiw	r24, 0x0f	; 15
 358:	19 f4       	brne	.+6      	; 0x360 <stop_left+0x7c>
{stop();break;
 35a:	0e 94 c4 00 	call	0x188 <stop>
 35e:	33 c0       	rjmp	.+102    	; 0x3c6 <stop_left+0xe2>
}

else if((PINA & 0b00011111)==0b00000100)
 360:	89 b3       	in	r24, 0x19	; 25
 362:	99 27       	eor	r25, r25
 364:	8f 71       	andi	r24, 0x1F	; 31
 366:	90 70       	andi	r25, 0x00	; 0
 368:	04 97       	sbiw	r24, 0x04	; 4
 36a:	51 f1       	breq	.+84     	; 0x3c0 <stop_left+0xdc>
str();

else if((PINA & 0b00011111)==0b00000010)
 36c:	89 b3       	in	r24, 0x19	; 25
 36e:	99 27       	eor	r25, r25
 370:	8f 71       	andi	r24, 0x1F	; 31
 372:	90 70       	andi	r25, 0x00	; 0
 374:	02 97       	sbiw	r24, 0x02	; 2
 376:	09 f1       	breq	.+66     	; 0x3ba <stop_left+0xd6>
left();

else if((PINA & 0b00011111)==0b00001000)
 378:	89 b3       	in	r24, 0x19	; 25
 37a:	99 27       	eor	r25, r25
 37c:	8f 71       	andi	r24, 0x1F	; 31
 37e:	90 70       	andi	r25, 0x00	; 0
 380:	08 97       	sbiw	r24, 0x08	; 8
 382:	61 f0       	breq	.+24     	; 0x39c <stop_left+0xb8>
right();
   else if((PINA & 0b00011111)==0b00011000)
 384:	89 b3       	in	r24, 0x19	; 25
 386:	99 27       	eor	r25, r25
 388:	8f 71       	andi	r24, 0x1F	; 31
 38a:	90 70       	andi	r25, 0x00	; 0
 38c:	48 97       	sbiw	r24, 0x18	; 24
 38e:	31 f0       	breq	.+12     	; 0x39c <stop_left+0xb8>
right();

else if((PINA & 0b00011111)==0b00001100)
 390:	89 b3       	in	r24, 0x19	; 25
 392:	99 27       	eor	r25, r25
 394:	8f 71       	andi	r24, 0x1F	; 31
 396:	90 70       	andi	r25, 0x00	; 0
 398:	0c 97       	sbiw	r24, 0x0c	; 12
 39a:	19 f4       	brne	.+6      	; 0x3a2 <stop_left+0xbe>
right();
 39c:	0e 94 a5 00 	call	0x14a <right>
 3a0:	a3 cf       	rjmp	.-186    	; 0x2e8 <stop_left+0x4>
else if((PINA & 0b00011111)==0b00000011)
 3a2:	89 b3       	in	r24, 0x19	; 25
 3a4:	99 27       	eor	r25, r25
 3a6:	8f 71       	andi	r24, 0x1F	; 31
 3a8:	90 70       	andi	r25, 0x00	; 0
 3aa:	03 97       	sbiw	r24, 0x03	; 3
 3ac:	31 f0       	breq	.+12     	; 0x3ba <stop_left+0xd6>
left();

else if((PINA & 0b00011111)==0b00000110)
 3ae:	89 b3       	in	r24, 0x19	; 25
 3b0:	99 27       	eor	r25, r25
 3b2:	8f 71       	andi	r24, 0x1F	; 31
 3b4:	90 70       	andi	r25, 0x00	; 0
 3b6:	06 97       	sbiw	r24, 0x06	; 6
 3b8:	19 f4       	brne	.+6      	; 0x3c0 <stop_left+0xdc>
left();
 3ba:	0e 94 b3 00 	call	0x166 <left>
 3be:	94 cf       	rjmp	.-216    	; 0x2e8 <stop_left+0x4>
else str();
 3c0:	0e 94 c1 00 	call	0x182 <str>
 3c4:	91 cf       	rjmp	.-222    	; 0x2e8 <stop_left+0x4>
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <stop_right>:

}

}



void stop_right()
{
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29

while(1)
{
if((PINA & 0b00011111)==0b00011111)
 3d0:	89 b3       	in	r24, 0x19	; 25
 3d2:	99 27       	eor	r25, r25
 3d4:	8f 71       	andi	r24, 0x1F	; 31
 3d6:	90 70       	andi	r25, 0x00	; 0
 3d8:	4f 97       	sbiw	r24, 0x1f	; 31
 3da:	89 f4       	brne	.+34     	; 0x3fe <stop_right+0x32>
{



back();
 3dc:	0e 94 c7 00 	call	0x18e <back>
delay(1,30);
 3e0:	6e e1       	ldi	r22, 0x1E	; 30
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 4d 00 	call	0x9a <delay>
stop();
 3ec:	0e 94 c4 00 	call	0x188 <stop>
s=1;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	90 93 61 00 	sts	0x0061, r25
 3f8:	80 93 60 00 	sts	0x0060, r24
break;
 3fc:	58 c0       	rjmp	.+176    	; 0x4ae <stop_right+0xe2>

}
else if((PINA & 0b00011111)==0b00000000)
 3fe:	89 b3       	in	r24, 0x19	; 25
 400:	c8 2f       	mov	r28, r24
 402:	dd 27       	eor	r29, r29
 404:	cf 71       	andi	r28, 0x1F	; 31
 406:	d0 70       	andi	r29, 0x00	; 0
 408:	20 97       	sbiw	r28, 0x00	; 0
 40a:	79 f4       	brne	.+30     	; 0x42a <stop_right+0x5e>
{



back();
 40c:	0e 94 c7 00 	call	0x18e <back>
delay(1,30);
 410:	6e e1       	ldi	r22, 0x1E	; 30
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 4d 00 	call	0x9a <delay>
stop();
 41c:	0e 94 c4 00 	call	0x188 <stop>
s=0;
 420:	d0 93 61 00 	sts	0x0061, r29
 424:	c0 93 60 00 	sts	0x0060, r28
break;
 428:	42 c0       	rjmp	.+132    	; 0x4ae <stop_right+0xe2>
}
else if((PINA & 0b00011111)==0b00011100)
 42a:	89 b3       	in	r24, 0x19	; 25
 42c:	99 27       	eor	r25, r25
 42e:	8f 71       	andi	r24, 0x1F	; 31
 430:	90 70       	andi	r25, 0x00	; 0
 432:	4c 97       	sbiw	r24, 0x1c	; 28
 434:	31 f0       	breq	.+12     	; 0x442 <stop_right+0x76>
{stop();break;
}

else if((PINA & 0b00011111)==0b00011110)
 436:	89 b3       	in	r24, 0x19	; 25
 438:	99 27       	eor	r25, r25
 43a:	8f 71       	andi	r24, 0x1F	; 31
 43c:	90 70       	andi	r25, 0x00	; 0
 43e:	4e 97       	sbiw	r24, 0x1e	; 30
 440:	19 f4       	brne	.+6      	; 0x448 <stop_right+0x7c>
{stop();break;
 442:	0e 94 c4 00 	call	0x188 <stop>
 446:	33 c0       	rjmp	.+102    	; 0x4ae <stop_right+0xe2>
}

else if((PINA & 0b00011111)==0b00000100)
 448:	89 b3       	in	r24, 0x19	; 25
 44a:	99 27       	eor	r25, r25
 44c:	8f 71       	andi	r24, 0x1F	; 31
 44e:	90 70       	andi	r25, 0x00	; 0
 450:	04 97       	sbiw	r24, 0x04	; 4
 452:	51 f1       	breq	.+84     	; 0x4a8 <stop_right+0xdc>
str();

else if((PINA & 0b00011111)==0b00000010)
 454:	89 b3       	in	r24, 0x19	; 25
 456:	99 27       	eor	r25, r25
 458:	8f 71       	andi	r24, 0x1F	; 31
 45a:	90 70       	andi	r25, 0x00	; 0
 45c:	02 97       	sbiw	r24, 0x02	; 2
 45e:	09 f1       	breq	.+66     	; 0x4a2 <stop_right+0xd6>
left();

else if((PINA & 0b00011111)==0b00001000)
 460:	89 b3       	in	r24, 0x19	; 25
 462:	99 27       	eor	r25, r25
 464:	8f 71       	andi	r24, 0x1F	; 31
 466:	90 70       	andi	r25, 0x00	; 0
 468:	08 97       	sbiw	r24, 0x08	; 8
 46a:	61 f0       	breq	.+24     	; 0x484 <stop_right+0xb8>
right();
   else if((PINA & 0b00011111)==0b00011000)
 46c:	89 b3       	in	r24, 0x19	; 25
 46e:	99 27       	eor	r25, r25
 470:	8f 71       	andi	r24, 0x1F	; 31
 472:	90 70       	andi	r25, 0x00	; 0
 474:	48 97       	sbiw	r24, 0x18	; 24
 476:	31 f0       	breq	.+12     	; 0x484 <stop_right+0xb8>
right();

else if((PINA & 0b00011111)==0b00001100)
 478:	89 b3       	in	r24, 0x19	; 25
 47a:	99 27       	eor	r25, r25
 47c:	8f 71       	andi	r24, 0x1F	; 31
 47e:	90 70       	andi	r25, 0x00	; 0
 480:	0c 97       	sbiw	r24, 0x0c	; 12
 482:	19 f4       	brne	.+6      	; 0x48a <stop_right+0xbe>
right();
 484:	0e 94 a5 00 	call	0x14a <right>
 488:	a3 cf       	rjmp	.-186    	; 0x3d0 <stop_right+0x4>
else if((PINA & 0b00011111)==0b00000011)
 48a:	89 b3       	in	r24, 0x19	; 25
 48c:	99 27       	eor	r25, r25
 48e:	8f 71       	andi	r24, 0x1F	; 31
 490:	90 70       	andi	r25, 0x00	; 0
 492:	03 97       	sbiw	r24, 0x03	; 3
 494:	31 f0       	breq	.+12     	; 0x4a2 <stop_right+0xd6>
left();

else if((PINA & 0b00011111)==0b00000110)
 496:	89 b3       	in	r24, 0x19	; 25
 498:	99 27       	eor	r25, r25
 49a:	8f 71       	andi	r24, 0x1F	; 31
 49c:	90 70       	andi	r25, 0x00	; 0
 49e:	06 97       	sbiw	r24, 0x06	; 6
 4a0:	19 f4       	brne	.+6      	; 0x4a8 <stop_right+0xdc>
left();
 4a2:	0e 94 b3 00 	call	0x166 <left>
 4a6:	94 cf       	rjmp	.-216    	; 0x3d0 <stop_right+0x4>
else str();
 4a8:	0e 94 c1 00 	call	0x182 <str>
 4ac:	91 cf       	rjmp	.-222    	; 0x3d0 <stop_right+0x4>
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <main>:
#include<util/delay.h>
#include<line.c>

main()
{fastpwm_mode(255);
 4b4:	c1 e4       	ldi	r28, 0x41	; 65
 4b6:	d8 e0       	ldi	r29, 0x08	; 8
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	cd bf       	out	0x3d, r28	; 61
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 47 00 	call	0x8e <fastpwm_mode>
port1();
 4c4:	0e 94 9c 00 	call	0x138 <port1>

char turn[30];

int r,count=-1;
 4c8:	0f ef       	ldi	r16, 0xFF	; 255
 4ca:	1f ef       	ldi	r17, 0xFF	; 255
while(1)
{
follow();
 4cc:	0e 94 fc 00 	call	0x1f8 <follow>
if((PIND & 0b01000000))
 4d0:	86 99       	sbic	0x10, 6	; 16
 4d2:	30 c0       	rjmp	.+96     	; 0x534 <main+0x80>
   {break;
   }
turnright();
 4d4:	0e 94 db 00 	call	0x1b6 <turnright>
r=follow();
 4d8:	0e 94 fc 00 	call	0x1f8 <follow>
 4dc:	98 01       	movw	r18, r16
 4de:	2f 5f       	subi	r18, 0xFF	; 255
 4e0:	3f 4f       	sbci	r19, 0xFF	; 255
 4e2:	fe 01       	movw	r30, r28
 4e4:	31 96       	adiw	r30, 0x01	; 1
if(r==1)
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	29 f4       	brne	.+10     	; 0x4f4 <main+0x40>
turn[++count]='r';
 4ea:	89 01       	movw	r16, r18
 4ec:	e2 0f       	add	r30, r18
 4ee:	f3 1f       	adc	r31, r19
 4f0:	82 e7       	ldi	r24, 0x72	; 114
 4f2:	04 c0       	rjmp	.+8      	; 0x4fc <main+0x48>
else turn[++count]='l';
 4f4:	89 01       	movw	r16, r18
 4f6:	e2 0f       	add	r30, r18
 4f8:	f3 1f       	adc	r31, r19
 4fa:	8c e6       	ldi	r24, 0x6C	; 108
 4fc:	80 83       	st	Z, r24
str();
 4fe:	0e 94 c1 00 	call	0x182 <str>
delay(1,100);
 502:	64 e6       	ldi	r22, 0x64	; 100
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 4d 00 	call	0x9a <delay>

turnback();
 50e:	0e 94 ec 00 	call	0x1d8 <turnback>
follow();
 512:	0e 94 fc 00 	call	0x1f8 <follow>
str();
 516:	0e 94 c1 00 	call	0x182 <str>
delay(1,100);
 51a:	64 e6       	ldi	r22, 0x64	; 100
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 4d 00 	call	0x9a <delay>

turnback();
 526:	0e 94 ec 00 	call	0x1d8 <turnback>
stop_left();
 52a:	0e 94 72 01 	call	0x2e4 <stop_left>
turnleft();
 52e:	0e 94 ca 00 	call	0x194 <turnleft>
 532:	cc cf       	rjmp	.-104    	; 0x4cc <main+0x18>


}

white_move();
 534:	0e 94 f3 00 	call	0x1e6 <white_move>
follow();
 538:	0e 94 fc 00 	call	0x1f8 <follow>
stop();
 53c:	0e 94 c4 00 	call	0x188 <stop>
PORTD|=0b00100000;
 540:	95 9a       	sbi	0x12, 5	; 18
delay(1,3000);
 542:	68 eb       	ldi	r22, 0xB8	; 184
 544:	7b e0       	ldi	r23, 0x0B	; 11
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 4d 00 	call	0x9a <delay>
PORTD&=0b11011111;
 54e:	95 98       	cbi	0x12, 5	; 18
white_move();
 550:	0e 94 f3 00 	call	0x1e6 <white_move>
follow();
 554:	0e 94 fc 00 	call	0x1f8 <follow>
white_move();
 558:	0e 94 f3 00 	call	0x1e6 <white_move>
follow();
 55c:	0e 94 fc 00 	call	0x1f8 <follow>
while(count!=-1)
{
if(turn[count]=='l')
  {
  turnright();stop_left();
  turnleft();follow();
  }
  else {
  turnleft();stop_right();
  turnright();follow();
  }
  count--;
 560:	8f ef       	ldi	r24, 0xFF	; 255
 562:	0f 3f       	cpi	r16, 0xFF	; 255
 564:	18 07       	cpc	r17, r24
 566:	c1 f0       	breq	.+48     	; 0x598 <main+0xe4>
 568:	fe 01       	movw	r30, r28
 56a:	e0 0f       	add	r30, r16
 56c:	f1 1f       	adc	r31, r17
 56e:	81 81       	ldd	r24, Z+1	; 0x01
 570:	8c 36       	cpi	r24, 0x6C	; 108
 572:	39 f4       	brne	.+14     	; 0x582 <main+0xce>
 574:	0e 94 db 00 	call	0x1b6 <turnright>
 578:	0e 94 72 01 	call	0x2e4 <stop_left>
 57c:	0e 94 ca 00 	call	0x194 <turnleft>
 580:	06 c0       	rjmp	.+12     	; 0x58e <main+0xda>
 582:	0e 94 ca 00 	call	0x194 <turnleft>
 586:	0e 94 e6 01 	call	0x3cc <stop_right>
 58a:	0e 94 db 00 	call	0x1b6 <turnright>
 58e:	0e 94 fc 00 	call	0x1f8 <follow>
 592:	01 50       	subi	r16, 0x01	; 1
 594:	10 40       	sbci	r17, 0x00	; 0
 596:	e4 cf       	rjmp	.-56     	; 0x560 <main+0xac>
  
  


}


} 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0c 94 af 03 	jmp	0x75e <_exit>

000005a0 <__fixsfsi>:
 5a0:	97 fb       	bst	r25, 7
 5a2:	70 d0       	rcall	.+224    	; 0x684 <__fp_split1>
 5a4:	9f 37       	cpi	r25, 0x7F	; 127
 5a6:	38 f0       	brcs	.+14     	; 0x5b6 <__fixsfsi+0x16>
 5a8:	fe e9       	ldi	r31, 0x9E	; 158
 5aa:	f9 1b       	sub	r31, r25
 5ac:	98 2f       	mov	r25, r24
 5ae:	87 2f       	mov	r24, r23
 5b0:	76 2f       	mov	r23, r22
 5b2:	6b 2f       	mov	r22, r27
 5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <__fixsfsi+0x20>
 5b6:	83 c0       	rjmp	.+262    	; 0x6be <__fp_zero>
 5b8:	96 95       	lsr	r25
 5ba:	87 95       	ror	r24
 5bc:	77 95       	ror	r23
 5be:	67 95       	ror	r22
 5c0:	f1 50       	subi	r31, 0x01	; 1
 5c2:	d0 f7       	brcc	.-12     	; 0x5b8 <__fixsfsi+0x18>
 5c4:	3e f4       	brtc	.+14     	; 0x5d4 <__fp_lneg+0xe>

000005c6 <__fp_lneg>:
 5c6:	90 95       	com	r25
 5c8:	80 95       	com	r24
 5ca:	70 95       	com	r23
 5cc:	61 95       	neg	r22
 5ce:	7f 4f       	sbci	r23, 0xFF	; 255
 5d0:	8f 4f       	sbci	r24, 0xFF	; 255
 5d2:	9f 4f       	sbci	r25, 0xFF	; 255
 5d4:	08 95       	ret

000005d6 <__floatunssisf>:
 5d6:	e8 94       	clt
 5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <__floatsisf+0x6>

000005da <__floatsisf>:
 5da:	97 fb       	bst	r25, 7
 5dc:	0e f4       	brtc	.+2      	; 0x5e0 <__floatsisf+0x6>
 5de:	f3 df       	rcall	.-26     	; 0x5c6 <__fp_lneg>
 5e0:	b6 2f       	mov	r27, r22
 5e2:	67 2f       	mov	r22, r23
 5e4:	78 2f       	mov	r23, r24
 5e6:	89 2f       	mov	r24, r25
 5e8:	9e e9       	ldi	r25, 0x9E	; 158
 5ea:	00 24       	eor	r0, r0
 5ec:	27 c0       	rjmp	.+78     	; 0x63c <__fp_merge>

000005ee <__eqsf2>:
 5ee:	0e d0       	rcall	.+28     	; 0x60c <.fp_cmp>
 5f0:	5e f0       	brts	.+22     	; 0x608 <__cmpsf2+0xe>
 5f2:	04 c0       	rjmp	.+8      	; 0x5fc <__cmpsf2+0x2>

000005f4 <__gesf2>:
 5f4:	0b d0       	rcall	.+22     	; 0x60c <.fp_cmp>
 5f6:	26 f0       	brts	.+8      	; 0x600 <__cmpsf2+0x6>
 5f8:	01 c0       	rjmp	.+2      	; 0x5fc <__cmpsf2+0x2>

000005fa <__cmpsf2>:
 5fa:	08 d0       	rcall	.+16     	; 0x60c <.fp_cmp>
 5fc:	19 f0       	breq	.+6      	; 0x604 <__cmpsf2+0xa>
 5fe:	20 f4       	brcc	.+8      	; 0x608 <__cmpsf2+0xe>
 600:	8f ef       	ldi	r24, 0xFF	; 255
 602:	08 95       	ret
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	08 95       	ret
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	08 95       	ret

0000060c <.fp_cmp>:
 60c:	97 fb       	bst	r25, 7
 60e:	09 2e       	mov	r0, r25
 610:	05 26       	eor	r0, r21
 612:	00 f8       	bld	r0, 0
 614:	68 94       	set
 616:	2d d0       	rcall	.+90     	; 0x672 <__fp_split2>
 618:	e8 94       	clt
 61a:	07 fc       	sbrc	r0, 7
 61c:	07 c0       	rjmp	.+14     	; 0x62c <.fp_cmp+0x20>
 61e:	62 17       	cp	r22, r18
 620:	73 07       	cpc	r23, r19
 622:	84 07       	cpc	r24, r20
 624:	95 07       	cpc	r25, r21
 626:	21 f0       	breq	.+8      	; 0x630 <.fp_cmp+0x24>
 628:	08 f4       	brcc	.+2      	; 0x62c <.fp_cmp+0x20>
 62a:	00 94       	com	r0
 62c:	07 94       	ror	r0
 62e:	98 94       	clz
 630:	08 95       	ret
 632:	9a 95       	dec	r25
 634:	bb 0f       	add	r27, r27
 636:	66 1f       	adc	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24

0000063c <__fp_merge>:
 63c:	11 24       	eor	r1, r1
 63e:	99 23       	and	r25, r25
 640:	a1 f0       	breq	.+40     	; 0x66a <__fp_merge+0x2e>
 642:	88 23       	and	r24, r24
 644:	b2 f7       	brpl	.-20     	; 0x632 <.fp_cmp+0x26>
 646:	9f 3f       	cpi	r25, 0xFF	; 255
 648:	59 f0       	breq	.+22     	; 0x660 <__fp_merge+0x24>
 64a:	bb 0f       	add	r27, r27
 64c:	48 f4       	brcc	.+18     	; 0x660 <__fp_merge+0x24>
 64e:	21 f4       	brne	.+8      	; 0x658 <__fp_merge+0x1c>
 650:	00 20       	and	r0, r0
 652:	11 f4       	brne	.+4      	; 0x658 <__fp_merge+0x1c>
 654:	60 ff       	sbrs	r22, 0
 656:	04 c0       	rjmp	.+8      	; 0x660 <__fp_merge+0x24>
 658:	6f 5f       	subi	r22, 0xFF	; 255
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	8f 4f       	sbci	r24, 0xFF	; 255
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	88 1f       	adc	r24, r24
 662:	97 95       	ror	r25
 664:	87 95       	ror	r24
 666:	97 f9       	bld	r25, 7
 668:	08 95       	ret
 66a:	29 c0       	rjmp	.+82     	; 0x6be <__fp_zero>

0000066c <__fp_split3>:
 66c:	05 2e       	mov	r0, r21
 66e:	09 26       	eor	r0, r25
 670:	07 fa       	bst	r0, 7

00000672 <__fp_split2>:
 672:	44 0f       	add	r20, r20
 674:	55 1f       	adc	r21, r21
 676:	5f 3f       	cpi	r21, 0xFF	; 255
 678:	79 f0       	breq	.+30     	; 0x698 <__fp_split1+0x14>
 67a:	aa 27       	eor	r26, r26
 67c:	a5 17       	cp	r26, r21
 67e:	08 f0       	brcs	.+2      	; 0x682 <__fp_split2+0x10>
 680:	51 e0       	ldi	r21, 0x01	; 1
 682:	47 95       	ror	r20

00000684 <__fp_split1>:
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	9f 3f       	cpi	r25, 0xFF	; 255
 68a:	31 f0       	breq	.+12     	; 0x698 <__fp_split1+0x14>
 68c:	bb 27       	eor	r27, r27
 68e:	b9 17       	cp	r27, r25
 690:	08 f0       	brcs	.+2      	; 0x694 <__fp_split1+0x10>
 692:	91 e0       	ldi	r25, 0x01	; 1
 694:	87 95       	ror	r24
 696:	08 95       	ret
 698:	9f 91       	pop	r25
 69a:	9f 91       	pop	r25
 69c:	11 24       	eor	r1, r1
 69e:	5c c0       	rjmp	.+184    	; 0x758 <__fp_nan>

000006a0 <__fp_split_a>:
 6a0:	97 fb       	bst	r25, 7
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	9f 3f       	cpi	r25, 0xFF	; 255
 6a8:	31 f0       	breq	.+12     	; 0x6b6 <__fp_split_a+0x16>
 6aa:	bb 27       	eor	r27, r27
 6ac:	b9 17       	cp	r27, r25
 6ae:	08 f0       	brcs	.+2      	; 0x6b2 <__fp_split_a+0x12>
 6b0:	91 e0       	ldi	r25, 0x01	; 1
 6b2:	87 95       	ror	r24
 6b4:	08 95       	ret
 6b6:	9f 91       	pop	r25
 6b8:	9f 91       	pop	r25
 6ba:	11 24       	eor	r1, r1
 6bc:	4d c0       	rjmp	.+154    	; 0x758 <__fp_nan>

000006be <__fp_zero>:
 6be:	66 27       	eor	r22, r22
 6c0:	77 27       	eor	r23, r23
 6c2:	88 27       	eor	r24, r24

000006c4 <__fp_zerox>:
 6c4:	99 27       	eor	r25, r25
 6c6:	08 95       	ret

000006c8 <__mulsf3>:
 6c8:	d1 df       	rcall	.-94     	; 0x66c <__fp_split3>
 6ca:	01 d0       	rcall	.+2      	; 0x6ce <__mulsf3x>
 6cc:	b7 cf       	rjmp	.-146    	; 0x63c <__fp_merge>

000006ce <__mulsf3x>:
 6ce:	99 23       	and	r25, r25
 6d0:	39 f0       	breq	.+14     	; 0x6e0 <__mulsf3x+0x12>
 6d2:	55 23       	and	r21, r21
 6d4:	29 f0       	breq	.+10     	; 0x6e0 <__mulsf3x+0x12>
 6d6:	9f 57       	subi	r25, 0x7F	; 127
 6d8:	5f 57       	subi	r21, 0x7F	; 127
 6da:	95 0f       	add	r25, r21
 6dc:	13 f4       	brvc	.+4      	; 0x6e2 <__mulsf3x+0x14>
 6de:	9a f1       	brmi	.+102    	; 0x746 <__mulsf3x+0x78>
 6e0:	f1 cf       	rjmp	.-30     	; 0x6c4 <__fp_zerox>
 6e2:	91 58       	subi	r25, 0x81	; 129
 6e4:	9f 3f       	cpi	r25, 0xFF	; 255
 6e6:	e1 f3       	breq	.-8      	; 0x6e0 <__mulsf3x+0x12>
 6e8:	62 9f       	mul	r22, r18
 6ea:	a1 2d       	mov	r26, r1
 6ec:	0f 92       	push	r0
 6ee:	bb 27       	eor	r27, r27
 6f0:	63 9f       	mul	r22, r19
 6f2:	a0 0d       	add	r26, r0
 6f4:	b1 1d       	adc	r27, r1
 6f6:	ee 27       	eor	r30, r30
 6f8:	72 9f       	mul	r23, r18
 6fa:	a0 0d       	add	r26, r0
 6fc:	b1 1d       	adc	r27, r1
 6fe:	ee 1f       	adc	r30, r30
 700:	af 93       	push	r26
 702:	aa 27       	eor	r26, r26
 704:	64 9f       	mul	r22, r20
 706:	b0 0d       	add	r27, r0
 708:	e1 1d       	adc	r30, r1
 70a:	73 9f       	mul	r23, r19
 70c:	b0 0d       	add	r27, r0
 70e:	e1 1d       	adc	r30, r1
 710:	aa 1f       	adc	r26, r26
 712:	66 27       	eor	r22, r22
 714:	82 9f       	mul	r24, r18
 716:	b0 0d       	add	r27, r0
 718:	e1 1d       	adc	r30, r1
 71a:	a6 1f       	adc	r26, r22
 71c:	55 27       	eor	r21, r21
 71e:	74 9f       	mul	r23, r20
 720:	e0 0d       	add	r30, r0
 722:	a1 1d       	adc	r26, r1
 724:	55 1f       	adc	r21, r21
 726:	83 9f       	mul	r24, r19
 728:	e0 0d       	add	r30, r0
 72a:	a1 1d       	adc	r26, r1
 72c:	56 1f       	adc	r21, r22
 72e:	84 9f       	mul	r24, r20
 730:	a0 0d       	add	r26, r0
 732:	51 1d       	adc	r21, r1
 734:	85 2f       	mov	r24, r21
 736:	7a 2f       	mov	r23, r26
 738:	6e 2f       	mov	r22, r30
 73a:	1f 90       	pop	r1
 73c:	0f 90       	pop	r0
 73e:	88 23       	and	r24, r24
 740:	1a f4       	brpl	.+6      	; 0x748 <__mulsf3x+0x7a>
 742:	93 95       	inc	r25
 744:	39 f4       	brne	.+14     	; 0x754 <__mulsf3x+0x86>
 746:	08 c0       	rjmp	.+16     	; 0x758 <__fp_nan>
 748:	00 0c       	add	r0, r0
 74a:	11 1c       	adc	r1, r1
 74c:	bb 1f       	adc	r27, r27
 74e:	66 1f       	adc	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	01 28       	or	r0, r1
 756:	08 95       	ret

00000758 <__fp_nan>:
 758:	9f ef       	ldi	r25, 0xFF	; 255
 75a:	80 ec       	ldi	r24, 0xC0	; 192
 75c:	08 95       	ret

0000075e <_exit>:
 75e:	ff cf       	rjmp	.-2      	; 0x75e <_exit>
