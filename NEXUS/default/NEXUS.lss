
NEXUS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000104  00800200  00007d92  00007e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007d92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bad  00800304  00800304  00007f2a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00007f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000072b  00000000  00000000  00007f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001731  00000000  00000000  00008675  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ac  00000000  00000000  00009da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003487  00000000  00000000  0000a052  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004e0  00000000  00000000  0000d4dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000620  00000000  00000000  0000d9bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__vector_2>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__vector_17>
      48:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <__vector_18>
      4c:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__vector_19>
      50:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__vector_20>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	13 e0       	ldi	r17, 0x03	; 3
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	e2 e9       	ldi	r30, 0x92	; 146
      f8:	fd e7       	ldi	r31, 0x7D	; 125
      fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
     100:	a4 30       	cpi	r26, 0x04	; 4
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
     106:	1e e0       	ldi	r17, 0x0E	; 14
     108:	a4 e0       	ldi	r26, 0x04	; 4
     10a:	b3 e0       	ldi	r27, 0x03	; 3
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a1 3b       	cpi	r26, 0xB1	; 177
     112:	b1 07       	cpc	r27, r17
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <main>
     11a:	0c 94 c7 3e 	jmp	0x7d8e	; 0x7d8e <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <prepare4new>:

int rel[36][36],worked[36],proc[36],status[36][2],elem[10],top,workingnode;
int i,j;

void prepare4new()
{
     122:	df 93       	push	r29
     124:	cf 93       	push	r28
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62

for(i=0;i<N*N;i++)
     12a:	10 92 b2 0d 	sts	0x0DB2, r1
     12e:	10 92 b1 0d 	sts	0x0DB1, r1
     132:	3b c0       	rjmp	.+118    	; 0x1aa <prepare4new+0x88>
 { status[i][0]=100;
     134:	80 91 b1 0d 	lds	r24, 0x0DB1
     138:	90 91 b2 0d 	lds	r25, 0x0DB2
     13c:	88 0f       	add	r24, r24
     13e:	99 1f       	adc	r25, r25
     140:	88 0f       	add	r24, r24
     142:	99 1f       	adc	r25, r25
     144:	fc 01       	movw	r30, r24
     146:	ef 5d       	subi	r30, 0xDF	; 223
     148:	f1 4f       	sbci	r31, 0xF1	; 241
     14a:	84 e6       	ldi	r24, 0x64	; 100
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	91 83       	std	Z+1, r25	; 0x01
     150:	80 83       	st	Z, r24
 status[i][1]=0;
     152:	80 91 b1 0d 	lds	r24, 0x0DB1
     156:	90 91 b2 0d 	lds	r25, 0x0DB2
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	88 0f       	add	r24, r24
     160:	99 1f       	adc	r25, r25
     162:	fc 01       	movw	r30, r24
     164:	ed 5d       	subi	r30, 0xDD	; 221
     166:	f1 4f       	sbci	r31, 0xF1	; 241
     168:	11 82       	std	Z+1, r1	; 0x01
     16a:	10 82       	st	Z, r1
   worked[i]=0;
     16c:	80 91 b1 0d 	lds	r24, 0x0DB1
     170:	90 91 b2 0d 	lds	r25, 0x0DB2
     174:	88 0f       	add	r24, r24
     176:	99 1f       	adc	r25, r25
     178:	fc 01       	movw	r30, r24
     17a:	ec 52       	subi	r30, 0x2C	; 44
     17c:	f2 4f       	sbci	r31, 0xF2	; 242
     17e:	11 82       	std	Z+1, r1	; 0x01
     180:	10 82       	st	Z, r1
   proc[i]=0;
     182:	80 91 b1 0d 	lds	r24, 0x0DB1
     186:	90 91 b2 0d 	lds	r25, 0x0DB2
     18a:	88 0f       	add	r24, r24
     18c:	99 1f       	adc	r25, r25
     18e:	fc 01       	movw	r30, r24
     190:	e0 5f       	subi	r30, 0xF0	; 240
     192:	fc 4f       	sbci	r31, 0xFC	; 252
     194:	11 82       	std	Z+1, r1	; 0x01
     196:	10 82       	st	Z, r1
int i,j;

void prepare4new()
{

for(i=0;i<N*N;i++)
     198:	80 91 b1 0d 	lds	r24, 0x0DB1
     19c:	90 91 b2 0d 	lds	r25, 0x0DB2
     1a0:	01 96       	adiw	r24, 0x01	; 1
     1a2:	90 93 b2 0d 	sts	0x0DB2, r25
     1a6:	80 93 b1 0d 	sts	0x0DB1, r24
     1aa:	80 91 b1 0d 	lds	r24, 0x0DB1
     1ae:	90 91 b2 0d 	lds	r25, 0x0DB2
     1b2:	84 32       	cpi	r24, 0x24	; 36
     1b4:	91 05       	cpc	r25, r1
     1b6:	0c f4       	brge	.+2      	; 0x1ba <prepare4new+0x98>
     1b8:	bd cf       	rjmp	.-134    	; 0x134 <prepare4new+0x12>
 { status[i][0]=100;
 status[i][1]=0;
   worked[i]=0;
   proc[i]=0;
 }
}
     1ba:	cf 91       	pop	r28
     1bc:	df 91       	pop	r29
     1be:	08 95       	ret

000001c0 <set_matvalues>:

void set_matvalues()
{
     1c0:	df 93       	push	r29
     1c2:	cf 93       	push	r28
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	28 97       	sbiw	r28, 0x08	; 8
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	cd bf       	out	0x3d, r28	; 61

for(i=0;i<N*N;i++)
     1d4:	10 92 b2 0d 	sts	0x0DB2, r1
     1d8:	10 92 b1 0d 	sts	0x0DB1, r1
     1dc:	69 c0       	rjmp	.+210    	; 0x2b0 <set_matvalues+0xf0>
 for(j=0;j<N*N;j++)
     1de:	10 92 7d 03 	sts	0x037D, r1
     1e2:	10 92 7c 03 	sts	0x037C, r1
     1e6:	53 c0       	rjmp	.+166    	; 0x28e <set_matvalues+0xce>
   if(i==j)
     1e8:	20 91 b1 0d 	lds	r18, 0x0DB1
     1ec:	30 91 b2 0d 	lds	r19, 0x0DB2
     1f0:	80 91 7c 03 	lds	r24, 0x037C
     1f4:	90 91 7d 03 	lds	r25, 0x037D
     1f8:	28 17       	cp	r18, r24
     1fa:	39 07       	cpc	r19, r25
     1fc:	09 f5       	brne	.+66     	; 0x240 <set_matvalues+0x80>
     rel[i][j]=10;
     1fe:	80 91 b1 0d 	lds	r24, 0x0DB1
     202:	90 91 b2 0d 	lds	r25, 0x0DB2
     206:	40 91 7c 03 	lds	r20, 0x037C
     20a:	50 91 7d 03 	lds	r21, 0x037D
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	9c 01       	movw	r18, r24
     218:	22 0f       	add	r18, r18
     21a:	33 1f       	adc	r19, r19
     21c:	22 0f       	add	r18, r18
     21e:	33 1f       	adc	r19, r19
     220:	22 0f       	add	r18, r18
     222:	33 1f       	adc	r19, r19
     224:	82 0f       	add	r24, r18
     226:	93 1f       	adc	r25, r19
     228:	84 0f       	add	r24, r20
     22a:	95 1f       	adc	r25, r21
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	fc 01       	movw	r30, r24
     232:	ef 56       	subi	r30, 0x6F	; 111
     234:	fc 4f       	sbci	r31, 0xFC	; 252
     236:	8a e0       	ldi	r24, 0x0A	; 10
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	91 83       	std	Z+1, r25	; 0x01
     23c:	80 83       	st	Z, r24
     23e:	1e c0       	rjmp	.+60     	; 0x27c <set_matvalues+0xbc>
     else rel[i][j]=0;
     240:	80 91 b1 0d 	lds	r24, 0x0DB1
     244:	90 91 b2 0d 	lds	r25, 0x0DB2
     248:	40 91 7c 03 	lds	r20, 0x037C
     24c:	50 91 7d 03 	lds	r21, 0x037D
     250:	88 0f       	add	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	9c 01       	movw	r18, r24
     25a:	22 0f       	add	r18, r18
     25c:	33 1f       	adc	r19, r19
     25e:	22 0f       	add	r18, r18
     260:	33 1f       	adc	r19, r19
     262:	22 0f       	add	r18, r18
     264:	33 1f       	adc	r19, r19
     266:	82 0f       	add	r24, r18
     268:	93 1f       	adc	r25, r19
     26a:	84 0f       	add	r24, r20
     26c:	95 1f       	adc	r25, r21
     26e:	88 0f       	add	r24, r24
     270:	99 1f       	adc	r25, r25
     272:	fc 01       	movw	r30, r24
     274:	ef 56       	subi	r30, 0x6F	; 111
     276:	fc 4f       	sbci	r31, 0xFC	; 252
     278:	11 82       	std	Z+1, r1	; 0x01
     27a:	10 82       	st	Z, r1

void set_matvalues()
{

for(i=0;i<N*N;i++)
 for(j=0;j<N*N;j++)
     27c:	80 91 7c 03 	lds	r24, 0x037C
     280:	90 91 7d 03 	lds	r25, 0x037D
     284:	01 96       	adiw	r24, 0x01	; 1
     286:	90 93 7d 03 	sts	0x037D, r25
     28a:	80 93 7c 03 	sts	0x037C, r24
     28e:	80 91 7c 03 	lds	r24, 0x037C
     292:	90 91 7d 03 	lds	r25, 0x037D
     296:	84 32       	cpi	r24, 0x24	; 36
     298:	91 05       	cpc	r25, r1
     29a:	0c f4       	brge	.+2      	; 0x29e <set_matvalues+0xde>
     29c:	a5 cf       	rjmp	.-182    	; 0x1e8 <set_matvalues+0x28>
}

void set_matvalues()
{

for(i=0;i<N*N;i++)
     29e:	80 91 b1 0d 	lds	r24, 0x0DB1
     2a2:	90 91 b2 0d 	lds	r25, 0x0DB2
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	90 93 b2 0d 	sts	0x0DB2, r25
     2ac:	80 93 b1 0d 	sts	0x0DB1, r24
     2b0:	80 91 b1 0d 	lds	r24, 0x0DB1
     2b4:	90 91 b2 0d 	lds	r25, 0x0DB2
     2b8:	84 32       	cpi	r24, 0x24	; 36
     2ba:	91 05       	cpc	r25, r1
     2bc:	0c f4       	brge	.+2      	; 0x2c0 <set_matvalues+0x100>
     2be:	8f cf       	rjmp	.-226    	; 0x1de <set_matvalues+0x1e>
 for(j=0;j<N*N;j++)
   if(i==j)
     rel[i][j]=10;
     else rel[i][j]=0;
int a,b,c,d;
     for(i=0;i<N*N;i++)
     2c0:	10 92 b2 0d 	sts	0x0DB2, r1
     2c4:	10 92 b1 0d 	sts	0x0DB1, r1
     2c8:	ee c1       	rjmp	.+988    	; 0x6a6 <set_matvalues+0x4e6>
     {   if(i==0)
     2ca:	80 91 b1 0d 	lds	r24, 0x0DB1
     2ce:	90 91 b2 0d 	lds	r25, 0x0DB2
     2d2:	00 97       	sbiw	r24, 0x00	; 0
     2d4:	79 f4       	brne	.+30     	; 0x2f4 <set_matvalues+0x134>
           {a=1;b=c=0;d=6;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	98 87       	std	Y+8, r25	; 0x08
     2dc:	8f 83       	std	Y+7, r24	; 0x07
     2de:	1c 82       	std	Y+4, r1	; 0x04
     2e0:	1b 82       	std	Y+3, r1	; 0x03
     2e2:	8b 81       	ldd	r24, Y+3	; 0x03
     2e4:	9c 81       	ldd	r25, Y+4	; 0x04
     2e6:	9e 83       	std	Y+6, r25	; 0x06
     2e8:	8d 83       	std	Y+5, r24	; 0x05
     2ea:	86 e0       	ldi	r24, 0x06	; 6
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	9a 83       	std	Y+2, r25	; 0x02
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	a4 c0       	rjmp	.+328    	; 0x43c <set_matvalues+0x27c>
           }
           else if(i==5)
     2f4:	80 91 b1 0d 	lds	r24, 0x0DB1
     2f8:	90 91 b2 0d 	lds	r25, 0x0DB2
     2fc:	85 30       	cpi	r24, 0x05	; 5
     2fe:	91 05       	cpc	r25, r1
     300:	79 f4       	brne	.+30     	; 0x320 <set_matvalues+0x160>
            {a=b=0;d=6;c=1;
     302:	1e 82       	std	Y+6, r1	; 0x06
     304:	1d 82       	std	Y+5, r1	; 0x05
     306:	8d 81       	ldd	r24, Y+5	; 0x05
     308:	9e 81       	ldd	r25, Y+6	; 0x06
     30a:	98 87       	std	Y+8, r25	; 0x08
     30c:	8f 83       	std	Y+7, r24	; 0x07
     30e:	86 e0       	ldi	r24, 0x06	; 6
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	9a 83       	std	Y+2, r25	; 0x02
     314:	89 83       	std	Y+1, r24	; 0x01
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	9c 83       	std	Y+4, r25	; 0x04
     31c:	8b 83       	std	Y+3, r24	; 0x03
     31e:	8e c0       	rjmp	.+284    	; 0x43c <set_matvalues+0x27c>
           }
           else if(i==30)
     320:	80 91 b1 0d 	lds	r24, 0x0DB1
     324:	90 91 b2 0d 	lds	r25, 0x0DB2
     328:	8e 31       	cpi	r24, 0x1E	; 30
     32a:	91 05       	cpc	r25, r1
     32c:	79 f4       	brne	.+30     	; 0x34c <set_matvalues+0x18c>
            {a=1;b=6;c=d=0;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	98 87       	std	Y+8, r25	; 0x08
     334:	8f 83       	std	Y+7, r24	; 0x07
     336:	86 e0       	ldi	r24, 0x06	; 6
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	9e 83       	std	Y+6, r25	; 0x06
     33c:	8d 83       	std	Y+5, r24	; 0x05
     33e:	1a 82       	std	Y+2, r1	; 0x02
     340:	19 82       	std	Y+1, r1	; 0x01
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	9a 81       	ldd	r25, Y+2	; 0x02
     346:	9c 83       	std	Y+4, r25	; 0x04
     348:	8b 83       	std	Y+3, r24	; 0x03
     34a:	78 c0       	rjmp	.+240    	; 0x43c <set_matvalues+0x27c>
           }else if(i==35)
     34c:	80 91 b1 0d 	lds	r24, 0x0DB1
     350:	90 91 b2 0d 	lds	r25, 0x0DB2
     354:	83 32       	cpi	r24, 0x23	; 35
     356:	91 05       	cpc	r25, r1
     358:	79 f4       	brne	.+30     	; 0x378 <set_matvalues+0x1b8>
            {a=d=0;c=1;b=6;
     35a:	1a 82       	std	Y+2, r1	; 0x02
     35c:	19 82       	std	Y+1, r1	; 0x01
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	9a 81       	ldd	r25, Y+2	; 0x02
     362:	98 87       	std	Y+8, r25	; 0x08
     364:	8f 83       	std	Y+7, r24	; 0x07
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	9c 83       	std	Y+4, r25	; 0x04
     36c:	8b 83       	std	Y+3, r24	; 0x03
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	9e 83       	std	Y+6, r25	; 0x06
     374:	8d 83       	std	Y+5, r24	; 0x05
     376:	62 c0       	rjmp	.+196    	; 0x43c <set_matvalues+0x27c>
           }
           else if(i/N==0)
     378:	80 91 b1 0d 	lds	r24, 0x0DB1
     37c:	90 91 b2 0d 	lds	r25, 0x0DB2
     380:	05 96       	adiw	r24, 0x05	; 5
     382:	8b 30       	cpi	r24, 0x0B	; 11
     384:	91 05       	cpc	r25, r1
     386:	78 f4       	brcc	.+30     	; 0x3a6 <set_matvalues+0x1e6>
                   {  a=c=1;d=6;b=0;    }
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	9c 83       	std	Y+4, r25	; 0x04
     38e:	8b 83       	std	Y+3, r24	; 0x03
     390:	8b 81       	ldd	r24, Y+3	; 0x03
     392:	9c 81       	ldd	r25, Y+4	; 0x04
     394:	98 87       	std	Y+8, r25	; 0x08
     396:	8f 83       	std	Y+7, r24	; 0x07
     398:	86 e0       	ldi	r24, 0x06	; 6
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	9a 83       	std	Y+2, r25	; 0x02
     39e:	89 83       	std	Y+1, r24	; 0x01
     3a0:	1e 82       	std	Y+6, r1	; 0x06
     3a2:	1d 82       	std	Y+5, r1	; 0x05
     3a4:	4b c0       	rjmp	.+150    	; 0x43c <set_matvalues+0x27c>
              else if( i%6 == 0)
     3a6:	80 91 b1 0d 	lds	r24, 0x0DB1
     3aa:	90 91 b2 0d 	lds	r25, 0x0DB2
     3ae:	26 e0       	ldi	r18, 0x06	; 6
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	b9 01       	movw	r22, r18
     3b4:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
     3b8:	00 97       	sbiw	r24, 0x00	; 0
     3ba:	79 f4       	brne	.+30     	; 0x3da <set_matvalues+0x21a>
                  {  c=0;a=1;b=d=6;  }
     3bc:	1c 82       	std	Y+4, r1	; 0x04
     3be:	1b 82       	std	Y+3, r1	; 0x03
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	98 87       	std	Y+8, r25	; 0x08
     3c6:	8f 83       	std	Y+7, r24	; 0x07
     3c8:	86 e0       	ldi	r24, 0x06	; 6
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	9a 83       	std	Y+2, r25	; 0x02
     3ce:	89 83       	std	Y+1, r24	; 0x01
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	9a 81       	ldd	r25, Y+2	; 0x02
     3d4:	9e 83       	std	Y+6, r25	; 0x06
     3d6:	8d 83       	std	Y+5, r24	; 0x05
     3d8:	31 c0       	rjmp	.+98     	; 0x43c <set_matvalues+0x27c>
             else if( i%6 == N-1)
     3da:	80 91 b1 0d 	lds	r24, 0x0DB1
     3de:	90 91 b2 0d 	lds	r25, 0x0DB2
     3e2:	26 e0       	ldi	r18, 0x06	; 6
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	b9 01       	movw	r22, r18
     3e8:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
     3ec:	85 30       	cpi	r24, 0x05	; 5
     3ee:	91 05       	cpc	r25, r1
     3f0:	79 f4       	brne	.+30     	; 0x410 <set_matvalues+0x250>
                 {   a=0;b=d=6;c=1;   }
     3f2:	18 86       	std	Y+8, r1	; 0x08
     3f4:	1f 82       	std	Y+7, r1	; 0x07
     3f6:	86 e0       	ldi	r24, 0x06	; 6
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	9a 83       	std	Y+2, r25	; 0x02
     3fc:	89 83       	std	Y+1, r24	; 0x01
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	9e 83       	std	Y+6, r25	; 0x06
     404:	8d 83       	std	Y+5, r24	; 0x05
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	9c 83       	std	Y+4, r25	; 0x04
     40c:	8b 83       	std	Y+3, r24	; 0x03
     40e:	16 c0       	rjmp	.+44     	; 0x43c <set_matvalues+0x27c>
            else if(i/N== N-1)
     410:	80 91 b1 0d 	lds	r24, 0x0DB1
     414:	90 91 b2 0d 	lds	r25, 0x0DB2
     418:	4e 97       	sbiw	r24, 0x1e	; 30
     41a:	86 30       	cpi	r24, 0x06	; 6
     41c:	91 05       	cpc	r25, r1
     41e:	70 f4       	brcc	.+28     	; 0x43c <set_matvalues+0x27c>
                  {      d=0;a=c=1;b=6; }
     420:	1a 82       	std	Y+2, r1	; 0x02
     422:	19 82       	std	Y+1, r1	; 0x01
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	9c 83       	std	Y+4, r25	; 0x04
     42a:	8b 83       	std	Y+3, r24	; 0x03
     42c:	8b 81       	ldd	r24, Y+3	; 0x03
     42e:	9c 81       	ldd	r25, Y+4	; 0x04
     430:	98 87       	std	Y+8, r25	; 0x08
     432:	8f 83       	std	Y+7, r24	; 0x07
     434:	86 e0       	ldi	r24, 0x06	; 6
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	9e 83       	std	Y+6, r25	; 0x06
     43a:	8d 83       	std	Y+5, r24	; 0x05
                 
rel[i][i+a]=1;
     43c:	40 91 b1 0d 	lds	r20, 0x0DB1
     440:	50 91 b2 0d 	lds	r21, 0x0DB2
     444:	20 91 b1 0d 	lds	r18, 0x0DB1
     448:	30 91 b2 0d 	lds	r19, 0x0DB2
     44c:	8f 81       	ldd	r24, Y+7	; 0x07
     44e:	98 85       	ldd	r25, Y+8	; 0x08
     450:	b9 01       	movw	r22, r18
     452:	68 0f       	add	r22, r24
     454:	79 1f       	adc	r23, r25
     456:	ca 01       	movw	r24, r20
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	9c 01       	movw	r18, r24
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	22 0f       	add	r18, r18
     468:	33 1f       	adc	r19, r19
     46a:	22 0f       	add	r18, r18
     46c:	33 1f       	adc	r19, r19
     46e:	82 0f       	add	r24, r18
     470:	93 1f       	adc	r25, r19
     472:	86 0f       	add	r24, r22
     474:	97 1f       	adc	r25, r23
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	fc 01       	movw	r30, r24
     47c:	ef 56       	subi	r30, 0x6F	; 111
     47e:	fc 4f       	sbci	r31, 0xFC	; 252
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	91 83       	std	Z+1, r25	; 0x01
     486:	80 83       	st	Z, r24
rel[i][i-b]=1;
     488:	40 91 b1 0d 	lds	r20, 0x0DB1
     48c:	50 91 b2 0d 	lds	r21, 0x0DB2
     490:	20 91 b1 0d 	lds	r18, 0x0DB1
     494:	30 91 b2 0d 	lds	r19, 0x0DB2
     498:	8d 81       	ldd	r24, Y+5	; 0x05
     49a:	9e 81       	ldd	r25, Y+6	; 0x06
     49c:	b9 01       	movw	r22, r18
     49e:	68 1b       	sub	r22, r24
     4a0:	79 0b       	sbc	r23, r25
     4a2:	ca 01       	movw	r24, r20
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	9c 01       	movw	r18, r24
     4ae:	22 0f       	add	r18, r18
     4b0:	33 1f       	adc	r19, r19
     4b2:	22 0f       	add	r18, r18
     4b4:	33 1f       	adc	r19, r19
     4b6:	22 0f       	add	r18, r18
     4b8:	33 1f       	adc	r19, r19
     4ba:	82 0f       	add	r24, r18
     4bc:	93 1f       	adc	r25, r19
     4be:	86 0f       	add	r24, r22
     4c0:	97 1f       	adc	r25, r23
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	fc 01       	movw	r30, r24
     4c8:	ef 56       	subi	r30, 0x6F	; 111
     4ca:	fc 4f       	sbci	r31, 0xFC	; 252
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	91 83       	std	Z+1, r25	; 0x01
     4d2:	80 83       	st	Z, r24
rel[i][i-c]=1;
     4d4:	40 91 b1 0d 	lds	r20, 0x0DB1
     4d8:	50 91 b2 0d 	lds	r21, 0x0DB2
     4dc:	20 91 b1 0d 	lds	r18, 0x0DB1
     4e0:	30 91 b2 0d 	lds	r19, 0x0DB2
     4e4:	8b 81       	ldd	r24, Y+3	; 0x03
     4e6:	9c 81       	ldd	r25, Y+4	; 0x04
     4e8:	b9 01       	movw	r22, r18
     4ea:	68 1b       	sub	r22, r24
     4ec:	79 0b       	sbc	r23, r25
     4ee:	ca 01       	movw	r24, r20
     4f0:	88 0f       	add	r24, r24
     4f2:	99 1f       	adc	r25, r25
     4f4:	88 0f       	add	r24, r24
     4f6:	99 1f       	adc	r25, r25
     4f8:	9c 01       	movw	r18, r24
     4fa:	22 0f       	add	r18, r18
     4fc:	33 1f       	adc	r19, r19
     4fe:	22 0f       	add	r18, r18
     500:	33 1f       	adc	r19, r19
     502:	22 0f       	add	r18, r18
     504:	33 1f       	adc	r19, r19
     506:	82 0f       	add	r24, r18
     508:	93 1f       	adc	r25, r19
     50a:	86 0f       	add	r24, r22
     50c:	97 1f       	adc	r25, r23
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	fc 01       	movw	r30, r24
     514:	ef 56       	subi	r30, 0x6F	; 111
     516:	fc 4f       	sbci	r31, 0xFC	; 252
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	91 83       	std	Z+1, r25	; 0x01
     51e:	80 83       	st	Z, r24
rel[i][i+d]=1;
     520:	40 91 b1 0d 	lds	r20, 0x0DB1
     524:	50 91 b2 0d 	lds	r21, 0x0DB2
     528:	20 91 b1 0d 	lds	r18, 0x0DB1
     52c:	30 91 b2 0d 	lds	r19, 0x0DB2
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	b9 01       	movw	r22, r18
     536:	68 0f       	add	r22, r24
     538:	79 1f       	adc	r23, r25
     53a:	ca 01       	movw	r24, r20
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	9c 01       	movw	r18, r24
     546:	22 0f       	add	r18, r18
     548:	33 1f       	adc	r19, r19
     54a:	22 0f       	add	r18, r18
     54c:	33 1f       	adc	r19, r19
     54e:	22 0f       	add	r18, r18
     550:	33 1f       	adc	r19, r19
     552:	82 0f       	add	r24, r18
     554:	93 1f       	adc	r25, r19
     556:	86 0f       	add	r24, r22
     558:	97 1f       	adc	r25, r23
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	fc 01       	movw	r30, r24
     560:	ef 56       	subi	r30, 0x6F	; 111
     562:	fc 4f       	sbci	r31, 0xFC	; 252
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	91 83       	std	Z+1, r25	; 0x01
     56a:	80 83       	st	Z, r24

rel[i+a][i]=1;
     56c:	20 91 b1 0d 	lds	r18, 0x0DB1
     570:	30 91 b2 0d 	lds	r19, 0x0DB2
     574:	8f 81       	ldd	r24, Y+7	; 0x07
     576:	98 85       	ldd	r25, Y+8	; 0x08
     578:	82 0f       	add	r24, r18
     57a:	93 1f       	adc	r25, r19
     57c:	40 91 b1 0d 	lds	r20, 0x0DB1
     580:	50 91 b2 0d 	lds	r21, 0x0DB2
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	9c 01       	movw	r18, r24
     58e:	22 0f       	add	r18, r18
     590:	33 1f       	adc	r19, r19
     592:	22 0f       	add	r18, r18
     594:	33 1f       	adc	r19, r19
     596:	22 0f       	add	r18, r18
     598:	33 1f       	adc	r19, r19
     59a:	82 0f       	add	r24, r18
     59c:	93 1f       	adc	r25, r19
     59e:	84 0f       	add	r24, r20
     5a0:	95 1f       	adc	r25, r21
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	fc 01       	movw	r30, r24
     5a8:	ef 56       	subi	r30, 0x6F	; 111
     5aa:	fc 4f       	sbci	r31, 0xFC	; 252
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	80 83       	st	Z, r24
rel[i-b][i]=1;
     5b4:	20 91 b1 0d 	lds	r18, 0x0DB1
     5b8:	30 91 b2 0d 	lds	r19, 0x0DB2
     5bc:	8d 81       	ldd	r24, Y+5	; 0x05
     5be:	9e 81       	ldd	r25, Y+6	; 0x06
     5c0:	a9 01       	movw	r20, r18
     5c2:	48 1b       	sub	r20, r24
     5c4:	59 0b       	sbc	r21, r25
     5c6:	ca 01       	movw	r24, r20
     5c8:	40 91 b1 0d 	lds	r20, 0x0DB1
     5cc:	50 91 b2 0d 	lds	r21, 0x0DB2
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	9c 01       	movw	r18, r24
     5da:	22 0f       	add	r18, r18
     5dc:	33 1f       	adc	r19, r19
     5de:	22 0f       	add	r18, r18
     5e0:	33 1f       	adc	r19, r19
     5e2:	22 0f       	add	r18, r18
     5e4:	33 1f       	adc	r19, r19
     5e6:	82 0f       	add	r24, r18
     5e8:	93 1f       	adc	r25, r19
     5ea:	84 0f       	add	r24, r20
     5ec:	95 1f       	adc	r25, r21
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	fc 01       	movw	r30, r24
     5f4:	ef 56       	subi	r30, 0x6F	; 111
     5f6:	fc 4f       	sbci	r31, 0xFC	; 252
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	91 83       	std	Z+1, r25	; 0x01
     5fe:	80 83       	st	Z, r24
rel[i-c][i]=1;
     600:	20 91 b1 0d 	lds	r18, 0x0DB1
     604:	30 91 b2 0d 	lds	r19, 0x0DB2
     608:	8b 81       	ldd	r24, Y+3	; 0x03
     60a:	9c 81       	ldd	r25, Y+4	; 0x04
     60c:	a9 01       	movw	r20, r18
     60e:	48 1b       	sub	r20, r24
     610:	59 0b       	sbc	r21, r25
     612:	ca 01       	movw	r24, r20
     614:	40 91 b1 0d 	lds	r20, 0x0DB1
     618:	50 91 b2 0d 	lds	r21, 0x0DB2
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	9c 01       	movw	r18, r24
     626:	22 0f       	add	r18, r18
     628:	33 1f       	adc	r19, r19
     62a:	22 0f       	add	r18, r18
     62c:	33 1f       	adc	r19, r19
     62e:	22 0f       	add	r18, r18
     630:	33 1f       	adc	r19, r19
     632:	82 0f       	add	r24, r18
     634:	93 1f       	adc	r25, r19
     636:	84 0f       	add	r24, r20
     638:	95 1f       	adc	r25, r21
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	fc 01       	movw	r30, r24
     640:	ef 56       	subi	r30, 0x6F	; 111
     642:	fc 4f       	sbci	r31, 0xFC	; 252
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	91 83       	std	Z+1, r25	; 0x01
     64a:	80 83       	st	Z, r24
rel[i+d][i]=1;
     64c:	20 91 b1 0d 	lds	r18, 0x0DB1
     650:	30 91 b2 0d 	lds	r19, 0x0DB2
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	9a 81       	ldd	r25, Y+2	; 0x02
     658:	82 0f       	add	r24, r18
     65a:	93 1f       	adc	r25, r19
     65c:	40 91 b1 0d 	lds	r20, 0x0DB1
     660:	50 91 b2 0d 	lds	r21, 0x0DB2
     664:	88 0f       	add	r24, r24
     666:	99 1f       	adc	r25, r25
     668:	88 0f       	add	r24, r24
     66a:	99 1f       	adc	r25, r25
     66c:	9c 01       	movw	r18, r24
     66e:	22 0f       	add	r18, r18
     670:	33 1f       	adc	r19, r19
     672:	22 0f       	add	r18, r18
     674:	33 1f       	adc	r19, r19
     676:	22 0f       	add	r18, r18
     678:	33 1f       	adc	r19, r19
     67a:	82 0f       	add	r24, r18
     67c:	93 1f       	adc	r25, r19
     67e:	84 0f       	add	r24, r20
     680:	95 1f       	adc	r25, r21
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	fc 01       	movw	r30, r24
     688:	ef 56       	subi	r30, 0x6F	; 111
     68a:	fc 4f       	sbci	r31, 0xFC	; 252
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	91 83       	std	Z+1, r25	; 0x01
     692:	80 83       	st	Z, r24
 for(j=0;j<N*N;j++)
   if(i==j)
     rel[i][j]=10;
     else rel[i][j]=0;
int a,b,c,d;
     for(i=0;i<N*N;i++)
     694:	80 91 b1 0d 	lds	r24, 0x0DB1
     698:	90 91 b2 0d 	lds	r25, 0x0DB2
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	90 93 b2 0d 	sts	0x0DB2, r25
     6a2:	80 93 b1 0d 	sts	0x0DB1, r24
     6a6:	80 91 b1 0d 	lds	r24, 0x0DB1
     6aa:	90 91 b2 0d 	lds	r25, 0x0DB2
     6ae:	84 32       	cpi	r24, 0x24	; 36
     6b0:	91 05       	cpc	r25, r1
     6b2:	0c f4       	brge	.+2      	; 0x6b6 <set_matvalues+0x4f6>
     6b4:	0a ce       	rjmp	.-1004   	; 0x2ca <set_matvalues+0x10a>
rel[i-b][i]=1;
rel[i-c][i]=1;
rel[i+d][i]=1;

         }
for(i=0;i<N*N;i++)
     6b6:	10 92 b2 0d 	sts	0x0DB2, r1
     6ba:	10 92 b1 0d 	sts	0x0DB1, r1
     6be:	49 c0       	rjmp	.+146    	; 0x752 <set_matvalues+0x592>
 for(j=0;j<N*N;j++)
     6c0:	10 92 7d 03 	sts	0x037D, r1
     6c4:	10 92 7c 03 	sts	0x037C, r1
     6c8:	34 c0       	rjmp	.+104    	; 0x732 <set_matvalues+0x572>
   if(i==j)
     6ca:	20 91 b1 0d 	lds	r18, 0x0DB1
     6ce:	30 91 b2 0d 	lds	r19, 0x0DB2
     6d2:	80 91 7c 03 	lds	r24, 0x037C
     6d6:	90 91 7d 03 	lds	r25, 0x037D
     6da:	28 17       	cp	r18, r24
     6dc:	39 07       	cpc	r19, r25
     6de:	01 f5       	brne	.+64     	; 0x720 <set_matvalues+0x560>
     rel[i][j]=10;
     6e0:	80 91 b1 0d 	lds	r24, 0x0DB1
     6e4:	90 91 b2 0d 	lds	r25, 0x0DB2
     6e8:	40 91 7c 03 	lds	r20, 0x037C
     6ec:	50 91 7d 03 	lds	r21, 0x037D
     6f0:	88 0f       	add	r24, r24
     6f2:	99 1f       	adc	r25, r25
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	9c 01       	movw	r18, r24
     6fa:	22 0f       	add	r18, r18
     6fc:	33 1f       	adc	r19, r19
     6fe:	22 0f       	add	r18, r18
     700:	33 1f       	adc	r19, r19
     702:	22 0f       	add	r18, r18
     704:	33 1f       	adc	r19, r19
     706:	82 0f       	add	r24, r18
     708:	93 1f       	adc	r25, r19
     70a:	84 0f       	add	r24, r20
     70c:	95 1f       	adc	r25, r21
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	fc 01       	movw	r30, r24
     714:	ef 56       	subi	r30, 0x6F	; 111
     716:	fc 4f       	sbci	r31, 0xFC	; 252
     718:	8a e0       	ldi	r24, 0x0A	; 10
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	91 83       	std	Z+1, r25	; 0x01
     71e:	80 83       	st	Z, r24
rel[i-c][i]=1;
rel[i+d][i]=1;

         }
for(i=0;i<N*N;i++)
 for(j=0;j<N*N;j++)
     720:	80 91 7c 03 	lds	r24, 0x037C
     724:	90 91 7d 03 	lds	r25, 0x037D
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	90 93 7d 03 	sts	0x037D, r25
     72e:	80 93 7c 03 	sts	0x037C, r24
     732:	80 91 7c 03 	lds	r24, 0x037C
     736:	90 91 7d 03 	lds	r25, 0x037D
     73a:	84 32       	cpi	r24, 0x24	; 36
     73c:	91 05       	cpc	r25, r1
     73e:	2c f2       	brlt	.-118    	; 0x6ca <set_matvalues+0x50a>
rel[i-b][i]=1;
rel[i-c][i]=1;
rel[i+d][i]=1;

         }
for(i=0;i<N*N;i++)
     740:	80 91 b1 0d 	lds	r24, 0x0DB1
     744:	90 91 b2 0d 	lds	r25, 0x0DB2
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	90 93 b2 0d 	sts	0x0DB2, r25
     74e:	80 93 b1 0d 	sts	0x0DB1, r24
     752:	80 91 b1 0d 	lds	r24, 0x0DB1
     756:	90 91 b2 0d 	lds	r25, 0x0DB2
     75a:	84 32       	cpi	r24, 0x24	; 36
     75c:	91 05       	cpc	r25, r1
     75e:	0c f4       	brge	.+2      	; 0x762 <set_matvalues+0x5a2>
     760:	af cf       	rjmp	.-162    	; 0x6c0 <set_matvalues+0x500>
 for(j=0;j<N*N;j++)
   if(i==j)
     rel[i][j]=10;

}
     762:	28 96       	adiw	r28, 0x08	; 8
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	cf 91       	pop	r28
     770:	df 91       	pop	r29
     772:	08 95       	ret

00000774 <solve>:


void solve(int initial,int final)
{
     774:	df 93       	push	r29
     776:	cf 93       	push	r28
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	2a 97       	sbiw	r28, 0x0a	; 10
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	98 87       	std	Y+8, r25	; 0x08
     78a:	8f 83       	std	Y+7, r24	; 0x07
     78c:	7a 87       	std	Y+10, r23	; 0x0a
     78e:	69 87       	std	Y+9, r22	; 0x09

status[initial][0]=0;
     790:	8f 81       	ldd	r24, Y+7	; 0x07
     792:	98 85       	ldd	r25, Y+8	; 0x08
     794:	88 0f       	add	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	88 0f       	add	r24, r24
     79a:	99 1f       	adc	r25, r25
     79c:	fc 01       	movw	r30, r24
     79e:	ef 5d       	subi	r30, 0xDF	; 223
     7a0:	f1 4f       	sbci	r31, 0xF1	; 241
     7a2:	11 82       	std	Z+1, r1	; 0x01
     7a4:	10 82       	st	Z, r1
workingnode=initial;
     7a6:	8f 81       	ldd	r24, Y+7	; 0x07
     7a8:	98 85       	ldd	r25, Y+8	; 0x08
     7aa:	90 93 84 03 	sts	0x0384, r25
     7ae:	80 93 83 03 	sts	0x0383, r24
while(1)
{
   

      top=-1;
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	9f ef       	ldi	r25, 0xFF	; 255
     7b6:	90 93 8e 03 	sts	0x038E, r25
     7ba:	80 93 8d 03 	sts	0x038D, r24
for(i=0;i<N*N;i++)
     7be:	10 92 b2 0d 	sts	0x0DB2, r1
     7c2:	10 92 b1 0d 	sts	0x0DB1, r1
     7c6:	4f c0       	rjmp	.+158    	; 0x866 <solve+0xf2>
  if( rel[workingnode][i] == 1 && worked[i] == 0 )
     7c8:	80 91 83 03 	lds	r24, 0x0383
     7cc:	90 91 84 03 	lds	r25, 0x0384
     7d0:	40 91 b1 0d 	lds	r20, 0x0DB1
     7d4:	50 91 b2 0d 	lds	r21, 0x0DB2
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	9c 01       	movw	r18, r24
     7e2:	22 0f       	add	r18, r18
     7e4:	33 1f       	adc	r19, r19
     7e6:	22 0f       	add	r18, r18
     7e8:	33 1f       	adc	r19, r19
     7ea:	22 0f       	add	r18, r18
     7ec:	33 1f       	adc	r19, r19
     7ee:	82 0f       	add	r24, r18
     7f0:	93 1f       	adc	r25, r19
     7f2:	84 0f       	add	r24, r20
     7f4:	95 1f       	adc	r25, r21
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	fc 01       	movw	r30, r24
     7fc:	ef 56       	subi	r30, 0x6F	; 111
     7fe:	fc 4f       	sbci	r31, 0xFC	; 252
     800:	80 81       	ld	r24, Z
     802:	91 81       	ldd	r25, Z+1	; 0x01
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	91 05       	cpc	r25, r1
     808:	29 f5       	brne	.+74     	; 0x854 <solve+0xe0>
     80a:	80 91 b1 0d 	lds	r24, 0x0DB1
     80e:	90 91 b2 0d 	lds	r25, 0x0DB2
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	fc 01       	movw	r30, r24
     818:	ec 52       	subi	r30, 0x2C	; 44
     81a:	f2 4f       	sbci	r31, 0xF2	; 242
     81c:	80 81       	ld	r24, Z
     81e:	91 81       	ldd	r25, Z+1	; 0x01
     820:	00 97       	sbiw	r24, 0x00	; 0
     822:	c1 f4       	brne	.+48     	; 0x854 <solve+0xe0>
      elem[++top]=i;  //storing all the nearby nodes
     824:	80 91 8d 03 	lds	r24, 0x038D
     828:	90 91 8e 03 	lds	r25, 0x038E
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	90 93 8e 03 	sts	0x038E, r25
     832:	80 93 8d 03 	sts	0x038D, r24
     836:	80 91 8d 03 	lds	r24, 0x038D
     83a:	90 91 8e 03 	lds	r25, 0x038E
     83e:	20 91 b1 0d 	lds	r18, 0x0DB1
     842:	30 91 b2 0d 	lds	r19, 0x0DB2
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	fc 01       	movw	r30, r24
     84c:	e6 54       	subi	r30, 0x46	; 70
     84e:	f2 4f       	sbci	r31, 0xF2	; 242
     850:	31 83       	std	Z+1, r19	; 0x01
     852:	20 83       	st	Z, r18
while(1)
{
   

      top=-1;
for(i=0;i<N*N;i++)
     854:	80 91 b1 0d 	lds	r24, 0x0DB1
     858:	90 91 b2 0d 	lds	r25, 0x0DB2
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	90 93 b2 0d 	sts	0x0DB2, r25
     862:	80 93 b1 0d 	sts	0x0DB1, r24
     866:	80 91 b1 0d 	lds	r24, 0x0DB1
     86a:	90 91 b2 0d 	lds	r25, 0x0DB2
     86e:	84 32       	cpi	r24, 0x24	; 36
     870:	91 05       	cpc	r25, r1
     872:	0c f4       	brge	.+2      	; 0x876 <solve+0x102>
     874:	a9 cf       	rjmp	.-174    	; 0x7c8 <solve+0x54>
      elem[++top]=i;  //storing all the nearby nodes




for(i=0;i<=top;i++)
     876:	10 92 b2 0d 	sts	0x0DB2, r1
     87a:	10 92 b1 0d 	sts	0x0DB1, r1
     87e:	7f c0       	rjmp	.+254    	; 0x97e <solve+0x20a>
 { if(status[elem[i]][0] > status[workingnode][0] + 1 )
     880:	80 91 b1 0d 	lds	r24, 0x0DB1
     884:	90 91 b2 0d 	lds	r25, 0x0DB2
     888:	88 0f       	add	r24, r24
     88a:	99 1f       	adc	r25, r25
     88c:	fc 01       	movw	r30, r24
     88e:	e6 54       	subi	r30, 0x46	; 70
     890:	f2 4f       	sbci	r31, 0xF2	; 242
     892:	80 81       	ld	r24, Z
     894:	91 81       	ldd	r25, Z+1	; 0x01
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	fc 01       	movw	r30, r24
     8a0:	ef 5d       	subi	r30, 0xDF	; 223
     8a2:	f1 4f       	sbci	r31, 0xF1	; 241
     8a4:	20 81       	ld	r18, Z
     8a6:	31 81       	ldd	r19, Z+1	; 0x01
     8a8:	80 91 83 03 	lds	r24, 0x0383
     8ac:	90 91 84 03 	lds	r25, 0x0384
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	fc 01       	movw	r30, r24
     8ba:	ef 5d       	subi	r30, 0xDF	; 223
     8bc:	f1 4f       	sbci	r31, 0xF1	; 241
     8be:	80 81       	ld	r24, Z
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	82 17       	cp	r24, r18
     8c6:	93 07       	cpc	r25, r19
     8c8:	ec f5       	brge	.+122    	; 0x944 <solve+0x1d0>
  { 
      status[elem[i]][0]=status[workingnode][0]+1;
     8ca:	80 91 b1 0d 	lds	r24, 0x0DB1
     8ce:	90 91 b2 0d 	lds	r25, 0x0DB2
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	fc 01       	movw	r30, r24
     8d8:	e6 54       	subi	r30, 0x46	; 70
     8da:	f2 4f       	sbci	r31, 0xF2	; 242
     8dc:	40 81       	ld	r20, Z
     8de:	51 81       	ldd	r21, Z+1	; 0x01
     8e0:	80 91 83 03 	lds	r24, 0x0383
     8e4:	90 91 84 03 	lds	r25, 0x0384
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
     8f0:	fc 01       	movw	r30, r24
     8f2:	ef 5d       	subi	r30, 0xDF	; 223
     8f4:	f1 4f       	sbci	r31, 0xF1	; 241
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	9c 01       	movw	r18, r24
     8fc:	2f 5f       	subi	r18, 0xFF	; 255
     8fe:	3f 4f       	sbci	r19, 0xFF	; 255
     900:	ca 01       	movw	r24, r20
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	fc 01       	movw	r30, r24
     90c:	ef 5d       	subi	r30, 0xDF	; 223
     90e:	f1 4f       	sbci	r31, 0xF1	; 241
     910:	31 83       	std	Z+1, r19	; 0x01
     912:	20 83       	st	Z, r18
      status[elem[i]][1]=workingnode;
     914:	80 91 b1 0d 	lds	r24, 0x0DB1
     918:	90 91 b2 0d 	lds	r25, 0x0DB2
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	fc 01       	movw	r30, r24
     922:	e6 54       	subi	r30, 0x46	; 70
     924:	f2 4f       	sbci	r31, 0xF2	; 242
     926:	80 81       	ld	r24, Z
     928:	91 81       	ldd	r25, Z+1	; 0x01
     92a:	20 91 83 03 	lds	r18, 0x0383
     92e:	30 91 84 03 	lds	r19, 0x0384
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	fc 01       	movw	r30, r24
     93c:	ed 5d       	subi	r30, 0xDD	; 221
     93e:	f1 4f       	sbci	r31, 0xF1	; 241
     940:	31 83       	std	Z+1, r19	; 0x01
     942:	20 83       	st	Z, r18
  }

 proc[elem[i]]=1;
     944:	80 91 b1 0d 	lds	r24, 0x0DB1
     948:	90 91 b2 0d 	lds	r25, 0x0DB2
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	fc 01       	movw	r30, r24
     952:	e6 54       	subi	r30, 0x46	; 70
     954:	f2 4f       	sbci	r31, 0xF2	; 242
     956:	80 81       	ld	r24, Z
     958:	91 81       	ldd	r25, Z+1	; 0x01
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	fc 01       	movw	r30, r24
     960:	e0 5f       	subi	r30, 0xF0	; 240
     962:	fc 4f       	sbci	r31, 0xFC	; 252
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	91 83       	std	Z+1, r25	; 0x01
     96a:	80 83       	st	Z, r24
      elem[++top]=i;  //storing all the nearby nodes




for(i=0;i<=top;i++)
     96c:	80 91 b1 0d 	lds	r24, 0x0DB1
     970:	90 91 b2 0d 	lds	r25, 0x0DB2
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	90 93 b2 0d 	sts	0x0DB2, r25
     97a:	80 93 b1 0d 	sts	0x0DB1, r24
     97e:	20 91 b1 0d 	lds	r18, 0x0DB1
     982:	30 91 b2 0d 	lds	r19, 0x0DB2
     986:	80 91 8d 03 	lds	r24, 0x038D
     98a:	90 91 8e 03 	lds	r25, 0x038E
     98e:	82 17       	cp	r24, r18
     990:	93 07       	cpc	r25, r19
     992:	0c f0       	brlt	.+2      	; 0x996 <solve+0x222>
     994:	75 cf       	rjmp	.-278    	; 0x880 <solve+0x10c>

 proc[elem[i]]=1;
 }
 

int min=100,l=-23;
     996:	84 e6       	ldi	r24, 0x64	; 100
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	9c 83       	std	Y+4, r25	; 0x04
     99c:	8b 83       	std	Y+3, r24	; 0x03
     99e:	89 ee       	ldi	r24, 0xE9	; 233
     9a0:	9f ef       	ldi	r25, 0xFF	; 255
     9a2:	9a 83       	std	Y+2, r25	; 0x02
     9a4:	89 83       	std	Y+1, r24	; 0x01





for(i=0;i<N*N;i++)
     9a6:	10 92 b2 0d 	sts	0x0DB2, r1
     9aa:	10 92 b1 0d 	sts	0x0DB1, r1
     9ae:	4b c0       	rjmp	.+150    	; 0xa46 <solve+0x2d2>
 if(  status[i][0] < min && worked[i] == 0 && proc[i]==1 )
     9b0:	80 91 b1 0d 	lds	r24, 0x0DB1
     9b4:	90 91 b2 0d 	lds	r25, 0x0DB2
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	fc 01       	movw	r30, r24
     9c2:	ef 5d       	subi	r30, 0xDF	; 223
     9c4:	f1 4f       	sbci	r31, 0xF1	; 241
     9c6:	20 81       	ld	r18, Z
     9c8:	31 81       	ldd	r19, Z+1	; 0x01
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	9c 81       	ldd	r25, Y+4	; 0x04
     9ce:	28 17       	cp	r18, r24
     9d0:	39 07       	cpc	r19, r25
     9d2:	84 f5       	brge	.+96     	; 0xa34 <solve+0x2c0>
     9d4:	80 91 b1 0d 	lds	r24, 0x0DB1
     9d8:	90 91 b2 0d 	lds	r25, 0x0DB2
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	fc 01       	movw	r30, r24
     9e2:	ec 52       	subi	r30, 0x2C	; 44
     9e4:	f2 4f       	sbci	r31, 0xF2	; 242
     9e6:	80 81       	ld	r24, Z
     9e8:	91 81       	ldd	r25, Z+1	; 0x01
     9ea:	00 97       	sbiw	r24, 0x00	; 0
     9ec:	19 f5       	brne	.+70     	; 0xa34 <solve+0x2c0>
     9ee:	80 91 b1 0d 	lds	r24, 0x0DB1
     9f2:	90 91 b2 0d 	lds	r25, 0x0DB2
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	fc 01       	movw	r30, r24
     9fc:	e0 5f       	subi	r30, 0xF0	; 240
     9fe:	fc 4f       	sbci	r31, 0xFC	; 252
     a00:	80 81       	ld	r24, Z
     a02:	91 81       	ldd	r25, Z+1	; 0x01
     a04:	81 30       	cpi	r24, 0x01	; 1
     a06:	91 05       	cpc	r25, r1
     a08:	a9 f4       	brne	.+42     	; 0xa34 <solve+0x2c0>
     {  min = status[i][0]; l = i;  }
     a0a:	80 91 b1 0d 	lds	r24, 0x0DB1
     a0e:	90 91 b2 0d 	lds	r25, 0x0DB2
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	fc 01       	movw	r30, r24
     a1c:	ef 5d       	subi	r30, 0xDF	; 223
     a1e:	f1 4f       	sbci	r31, 0xF1	; 241
     a20:	80 81       	ld	r24, Z
     a22:	91 81       	ldd	r25, Z+1	; 0x01
     a24:	9c 83       	std	Y+4, r25	; 0x04
     a26:	8b 83       	std	Y+3, r24	; 0x03
     a28:	80 91 b1 0d 	lds	r24, 0x0DB1
     a2c:	90 91 b2 0d 	lds	r25, 0x0DB2
     a30:	9a 83       	std	Y+2, r25	; 0x02
     a32:	89 83       	std	Y+1, r24	; 0x01





for(i=0;i<N*N;i++)
     a34:	80 91 b1 0d 	lds	r24, 0x0DB1
     a38:	90 91 b2 0d 	lds	r25, 0x0DB2
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	90 93 b2 0d 	sts	0x0DB2, r25
     a42:	80 93 b1 0d 	sts	0x0DB1, r24
     a46:	80 91 b1 0d 	lds	r24, 0x0DB1
     a4a:	90 91 b2 0d 	lds	r25, 0x0DB2
     a4e:	84 32       	cpi	r24, 0x24	; 36
     a50:	91 05       	cpc	r25, r1
     a52:	0c f4       	brge	.+2      	; 0xa56 <solve+0x2e2>
     a54:	ad cf       	rjmp	.-166    	; 0x9b0 <solve+0x23c>
 if(  status[i][0] < min && worked[i] == 0 && proc[i]==1 )
     {  min = status[i][0]; l = i;  }
     worked[workingnode]=1;
     a56:	80 91 83 03 	lds	r24, 0x0383
     a5a:	90 91 84 03 	lds	r25, 0x0384
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	fc 01       	movw	r30, r24
     a64:	ec 52       	subi	r30, 0x2C	; 44
     a66:	f2 4f       	sbci	r31, 0xF2	; 242
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	91 83       	std	Z+1, r25	; 0x01
     a6e:	80 83       	st	Z, r24
     workingnode = l;
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	9a 81       	ldd	r25, Y+2	; 0x02
     a74:	90 93 84 03 	sts	0x0384, r25
     a78:	80 93 83 03 	sts	0x0383, r24
l=-23;
     a7c:	89 ee       	ldi	r24, 0xE9	; 233
     a7e:	9f ef       	ldi	r25, 0xFF	; 255
     a80:	9a 83       	std	Y+2, r25	; 0x02
     a82:	89 83       	std	Y+1, r24	; 0x01
for(i=0;i<N*N;i++)
     a84:	10 92 b2 0d 	sts	0x0DB2, r1
     a88:	10 92 b1 0d 	sts	0x0DB1, r1
     a8c:	1a c0       	rjmp	.+52     	; 0xac2 <solve+0x34e>
  if(worked[i]==0)
     a8e:	80 91 b1 0d 	lds	r24, 0x0DB1
     a92:	90 91 b2 0d 	lds	r25, 0x0DB2
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	fc 01       	movw	r30, r24
     a9c:	ec 52       	subi	r30, 0x2C	; 44
     a9e:	f2 4f       	sbci	r31, 0xF2	; 242
     aa0:	80 81       	ld	r24, Z
     aa2:	91 81       	ldd	r25, Z+1	; 0x01
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	21 f4       	brne	.+8      	; 0xab0 <solve+0x33c>
     l=2;
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	9a 83       	std	Y+2, r25	; 0x02
     aae:	89 83       	std	Y+1, r24	; 0x01
 if(  status[i][0] < min && worked[i] == 0 && proc[i]==1 )
     {  min = status[i][0]; l = i;  }
     worked[workingnode]=1;
     workingnode = l;
l=-23;
for(i=0;i<N*N;i++)
     ab0:	80 91 b1 0d 	lds	r24, 0x0DB1
     ab4:	90 91 b2 0d 	lds	r25, 0x0DB2
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	90 93 b2 0d 	sts	0x0DB2, r25
     abe:	80 93 b1 0d 	sts	0x0DB1, r24
     ac2:	80 91 b1 0d 	lds	r24, 0x0DB1
     ac6:	90 91 b2 0d 	lds	r25, 0x0DB2
     aca:	84 32       	cpi	r24, 0x24	; 36
     acc:	91 05       	cpc	r25, r1
     ace:	fc f2       	brlt	.-66     	; 0xa8e <solve+0x31a>
  if(worked[i]==0)
     l=2;
if(l==-23)
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	9a 81       	ldd	r25, Y+2	; 0x02
     ad4:	2f ef       	ldi	r18, 0xFF	; 255
     ad6:	89 3e       	cpi	r24, 0xE9	; 233
     ad8:	92 07       	cpc	r25, r18
     ada:	09 f0       	breq	.+2      	; 0xade <solve+0x36a>
     adc:	6a ce       	rjmp	.-812    	; 0x7b2 <solve+0x3e>
break;
}


 int  l=final;top=-1;
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	9e 83       	std	Y+6, r25	; 0x06
     ae4:	8d 83       	std	Y+5, r24	; 0x05
     ae6:	8f ef       	ldi	r24, 0xFF	; 255
     ae8:	9f ef       	ldi	r25, 0xFF	; 255
     aea:	90 93 8e 03 	sts	0x038E, r25
     aee:	80 93 8d 03 	sts	0x038D, r24
  while(1)
   {
      proc[++top]=l;
     af2:	80 91 8d 03 	lds	r24, 0x038D
     af6:	90 91 8e 03 	lds	r25, 0x038E
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	90 93 8e 03 	sts	0x038E, r25
     b00:	80 93 8d 03 	sts	0x038D, r24
     b04:	80 91 8d 03 	lds	r24, 0x038D
     b08:	90 91 8e 03 	lds	r25, 0x038E
     b0c:	88 0f       	add	r24, r24
     b0e:	99 1f       	adc	r25, r25
     b10:	fc 01       	movw	r30, r24
     b12:	e0 5f       	subi	r30, 0xF0	; 240
     b14:	fc 4f       	sbci	r31, 0xFC	; 252
     b16:	8d 81       	ldd	r24, Y+5	; 0x05
     b18:	9e 81       	ldd	r25, Y+6	; 0x06
     b1a:	91 83       	std	Z+1, r25	; 0x01
     b1c:	80 83       	st	Z, r24
l=status[l][1];
     b1e:	8d 81       	ldd	r24, Y+5	; 0x05
     b20:	9e 81       	ldd	r25, Y+6	; 0x06
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	fc 01       	movw	r30, r24
     b2c:	ed 5d       	subi	r30, 0xDD	; 221
     b2e:	f1 4f       	sbci	r31, 0xF1	; 241
     b30:	80 81       	ld	r24, Z
     b32:	91 81       	ldd	r25, Z+1	; 0x01
     b34:	9e 83       	std	Y+6, r25	; 0x06
     b36:	8d 83       	std	Y+5, r24	; 0x05
if(l==initial )
     b38:	2d 81       	ldd	r18, Y+5	; 0x05
     b3a:	3e 81       	ldd	r19, Y+6	; 0x06
     b3c:	8f 81       	ldd	r24, Y+7	; 0x07
     b3e:	98 85       	ldd	r25, Y+8	; 0x08
     b40:	28 17       	cp	r18, r24
     b42:	39 07       	cpc	r19, r25
     b44:	b1 f6       	brne	.-84     	; 0xaf2 <solve+0x37e>
      { 
    
proc[++top]=l;
     b46:	80 91 8d 03 	lds	r24, 0x038D
     b4a:	90 91 8e 03 	lds	r25, 0x038E
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	90 93 8e 03 	sts	0x038E, r25
     b54:	80 93 8d 03 	sts	0x038D, r24
     b58:	80 91 8d 03 	lds	r24, 0x038D
     b5c:	90 91 8e 03 	lds	r25, 0x038E
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	fc 01       	movw	r30, r24
     b66:	e0 5f       	subi	r30, 0xF0	; 240
     b68:	fc 4f       	sbci	r31, 0xFC	; 252
     b6a:	8d 81       	ldd	r24, Y+5	; 0x05
     b6c:	9e 81       	ldd	r25, Y+6	; 0x06
     b6e:	91 83       	std	Z+1, r25	; 0x01
     b70:	80 83       	st	Z, r24
break;
}

  }
     b72:	2a 96       	adiw	r28, 0x0a	; 10
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <adc_pin_config>:
//Function to configure LCD port


//ADC pin configuration
void adc_pin_config (void)
{
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00;           //set PORTF direction as input
     b8c:	e0 e3       	ldi	r30, 0x30	; 48
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	10 82       	st	Z, r1
 PORTF = 0x00;          //set PORTF pins floating
     b92:	e1 e3       	ldi	r30, 0x31	; 49
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	10 82       	st	Z, r1
}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <adc_init>:
//Function to Initialize PORTS


//Function to Initialize ADC
void adc_init()
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
 ADCSRA = 0x00;
     ba6:	ea e7       	ldi	r30, 0x7A	; 122
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	10 82       	st	Z, r1
 ADCSRB = 0x00;		//MUX5 = 0
     bac:	eb e7       	ldi	r30, 0x7B	; 123
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	10 82       	st	Z, r1
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     bb2:	ec e7       	ldi	r30, 0x7C	; 124
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 e2       	ldi	r24, 0x20	; 32
     bb8:	80 83       	st	Z, r24
 ACSR = 0x80;
     bba:	e0 e5       	ldi	r30, 0x50	; 80
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 e8       	ldi	r24, 0x80	; 128
     bc0:	80 83       	st	Z, r24
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     bc2:	ea e7       	ldi	r30, 0x7A	; 122
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	86 e8       	ldi	r24, 0x86	; 134
     bc8:	80 83       	st	Z, r24
}
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <ADC_Conversion>:


//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <ADC_Conversion+0x6>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char a;

 Ch = Ch & 0x07;  			
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	87 70       	andi	r24, 0x07	; 7
     be0:	8a 83       	std	Y+2, r24	; 0x02
 ADMUX= 0x20| Ch;	   		
     be2:	ec e7       	ldi	r30, 0x7C	; 124
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	80 62       	ori	r24, 0x20	; 32
     bea:	80 83       	st	Z, r24
 ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     bec:	aa e7       	ldi	r26, 0x7A	; 122
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	ea e7       	ldi	r30, 0x7A	; 122
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	80 64       	ori	r24, 0x40	; 64
     bf8:	8c 93       	st	X, r24
 while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
     bfa:	ea e7       	ldi	r30, 0x7A	; 122
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	80 71       	andi	r24, 0x10	; 16
     c06:	90 70       	andi	r25, 0x00	; 0
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	b9 f3       	breq	.-18     	; 0xbfa <ADC_Conversion+0x2a>
 a = ADCH;
     c0c:	e9 e7       	ldi	r30, 0x79	; 121
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	89 83       	std	Y+1, r24	; 0x01
 ADCSRA = ADCSRA|0x10;          //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     c14:	aa e7       	ldi	r26, 0x7A	; 122
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	ea e7       	ldi	r30, 0x7A	; 122
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	80 61       	ori	r24, 0x10	; 16
     c20:	8c 93       	st	X, r24
 ADCSRB = 0x00;
     c22:	eb e7       	ldi	r30, 0x7B	; 123
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	10 82       	st	Z, r1
 return a;
     c28:	89 81       	ldd	r24, Y+1	; 0x01
}
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <print_sensor>:

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
int print_sensor( char channel)
{
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	0f 92       	push	r0
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	89 83       	std	Y+1, r24	; 0x01
 ADC_Value = ADC_Conversion(channel);
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <ADC_Conversion>
     c46:	80 93 8f 03 	sts	0x038F, r24
 return ADC_Value;
     c4a:	80 91 8f 03 	lds	r24, 0x038F
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
}
     c52:	0f 90       	pop	r0
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <init_devicesadc>:

void init_devicesadc (void)
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
     c62:	f8 94       	cli
 adc_pin_config();
     c64:	0e 94 c2 05 	call	0xb84	; 0xb84 <adc_pin_config>
 adc_init();
     c68:	0e 94 cf 05 	call	0xb9e	; 0xb9e <adc_init>
 sei(); //Enables the global interrupts
     c6c:	78 94       	sei
}
     c6e:	cf 91       	pop	r28
     c70:	df 91       	pop	r29
     c72:	08 95       	ret

00000c74 <port_init>:
unsigned int thousand;
unsigned int million;

//Function to configure LCD port
void port_init (void)
{
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     c7c:	a7 e2       	ldi	r26, 0x27	; 39
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e7 e2       	ldi	r30, 0x27	; 39
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	87 6f       	ori	r24, 0xF7	; 247
     c88:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     c8a:	a8 e2       	ldi	r26, 0x28	; 40
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 e2       	ldi	r30, 0x28	; 40
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	80 78       	andi	r24, 0x80	; 128
     c96:	8c 93       	st	X, r24
}
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <lcd_set_4bit>:
//Function to Initialize PORTS


//Function to Reset LCD
void lcd_set_4bit()
{
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	c0 57       	subi	r28, 0x70	; 112
     cac:	d0 40       	sbci	r29, 0x00	; 0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	fe 01       	movw	r30, r28
     cba:	e3 59       	subi	r30, 0x93	; 147
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e8       	ldi	r26, 0x80	; 128
     cc4:	bf e3       	ldi	r27, 0x3F	; 63
     cc6:	80 83       	st	Z, r24
     cc8:	91 83       	std	Z+1, r25	; 0x01
     cca:	a2 83       	std	Z+2, r26	; 0x02
     ccc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	8e 01       	movw	r16, r28
     cd0:	07 59       	subi	r16, 0x97	; 151
     cd2:	1f 4f       	sbci	r17, 0xFF	; 255
     cd4:	fe 01       	movw	r30, r28
     cd6:	e3 59       	subi	r30, 0x93	; 147
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	60 81       	ld	r22, Z
     cdc:	71 81       	ldd	r23, Z+1	; 0x01
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	26 e6       	ldi	r18, 0x66	; 102
     ce4:	36 e6       	ldi	r19, 0x66	; 102
     ce6:	46 e6       	ldi	r20, 0x66	; 102
     ce8:	55 e4       	ldi	r21, 0x45	; 69
     cea:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	f8 01       	movw	r30, r16
     cf4:	80 83       	st	Z, r24
     cf6:	91 83       	std	Z+1, r25	; 0x01
     cf8:	a2 83       	std	Z+2, r26	; 0x02
     cfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cfc:	fe 01       	movw	r30, r28
     cfe:	e7 59       	subi	r30, 0x97	; 151
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	60 81       	ld	r22, Z
     d04:	71 81       	ldd	r23, Z+1	; 0x01
     d06:	82 81       	ldd	r24, Z+2	; 0x02
     d08:	93 81       	ldd	r25, Z+3	; 0x03
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e8       	ldi	r20, 0x80	; 128
     d10:	5f e3       	ldi	r21, 0x3F	; 63
     d12:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
     d16:	88 23       	and	r24, r24
     d18:	44 f4       	brge	.+16     	; 0xd2a <lcd_set_4bit+0x8c>
		__ticks = 1;
     d1a:	fe 01       	movw	r30, r28
     d1c:	e9 59       	subi	r30, 0x99	; 153
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	91 83       	std	Z+1, r25	; 0x01
     d26:	80 83       	st	Z, r24
     d28:	64 c0       	rjmp	.+200    	; 0xdf2 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     d2a:	fe 01       	movw	r30, r28
     d2c:	e7 59       	subi	r30, 0x97	; 151
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	60 81       	ld	r22, Z
     d32:	71 81       	ldd	r23, Z+1	; 0x01
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	93 81       	ldd	r25, Z+3	; 0x03
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	3f ef       	ldi	r19, 0xFF	; 255
     d3c:	4f e7       	ldi	r20, 0x7F	; 127
     d3e:	57 e4       	ldi	r21, 0x47	; 71
     d40:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
     d44:	18 16       	cp	r1, r24
     d46:	0c f0       	brlt	.+2      	; 0xd4a <lcd_set_4bit+0xac>
     d48:	43 c0       	rjmp	.+134    	; 0xdd0 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4a:	fe 01       	movw	r30, r28
     d4c:	e3 59       	subi	r30, 0x93	; 147
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e2       	ldi	r20, 0x20	; 32
     d5e:	51 e4       	ldi	r21, 0x41	; 65
     d60:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	8e 01       	movw	r16, r28
     d6a:	09 59       	subi	r16, 0x99	; 153
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
     d6e:	bc 01       	movw	r22, r24
     d70:	cd 01       	movw	r24, r26
     d72:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	f8 01       	movw	r30, r16
     d7c:	91 83       	std	Z+1, r25	; 0x01
     d7e:	80 83       	st	Z, r24
     d80:	1f c0       	rjmp	.+62     	; 0xdc0 <lcd_set_4bit+0x122>
     d82:	fe 01       	movw	r30, r28
     d84:	eb 59       	subi	r30, 0x9B	; 155
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	80 e7       	ldi	r24, 0x70	; 112
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	91 83       	std	Z+1, r25	; 0x01
     d8e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d90:	fe 01       	movw	r30, r28
     d92:	eb 59       	subi	r30, 0x9B	; 155
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <lcd_set_4bit+0xfc>
     d9e:	fe 01       	movw	r30, r28
     da0:	eb 59       	subi	r30, 0x9B	; 155
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da8:	de 01       	movw	r26, r28
     daa:	a9 59       	subi	r26, 0x99	; 153
     dac:	bf 4f       	sbci	r27, 0xFF	; 255
     dae:	fe 01       	movw	r30, r28
     db0:	e9 59       	subi	r30, 0x99	; 153
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	11 96       	adiw	r26, 0x01	; 1
     dbc:	9c 93       	st	X, r25
     dbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc0:	fe 01       	movw	r30, r28
     dc2:	e9 59       	subi	r30, 0x99	; 153
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	80 81       	ld	r24, Z
     dc8:	91 81       	ldd	r25, Z+1	; 0x01
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	d1 f6       	brne	.-76     	; 0xd82 <lcd_set_4bit+0xe4>
     dce:	27 c0       	rjmp	.+78     	; 0xe1e <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd0:	8e 01       	movw	r16, r28
     dd2:	09 59       	subi	r16, 0x99	; 153
     dd4:	1f 4f       	sbci	r17, 0xFF	; 255
     dd6:	fe 01       	movw	r30, r28
     dd8:	e7 59       	subi	r30, 0x97	; 151
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	60 81       	ld	r22, Z
     dde:	71 81       	ldd	r23, Z+1	; 0x01
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	93 81       	ldd	r25, Z+3	; 0x03
     de4:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	f8 01       	movw	r30, r16
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	80 83       	st	Z, r24
     df2:	de 01       	movw	r26, r28
     df4:	ad 59       	subi	r26, 0x9D	; 157
     df6:	bf 4f       	sbci	r27, 0xFF	; 255
     df8:	fe 01       	movw	r30, r28
     dfa:	e9 59       	subi	r30, 0x99	; 153
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	8d 93       	st	X+, r24
     e04:	9c 93       	st	X, r25
     e06:	fe 01       	movw	r30, r28
     e08:	ed 59       	subi	r30, 0x9D	; 157
     e0a:	ff 4f       	sbci	r31, 0xFF	; 255
     e0c:	80 81       	ld	r24, Z
     e0e:	91 81       	ldd	r25, Z+1	; 0x01
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <lcd_set_4bit+0x172>
     e14:	fe 01       	movw	r30, r28
     e16:	ed 59       	subi	r30, 0x9D	; 157
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	91 83       	std	Z+1, r25	; 0x01
     e1c:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     e1e:	a8 e2       	ldi	r26, 0x28	; 40
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e8 e2       	ldi	r30, 0x28	; 40
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8e 7f       	andi	r24, 0xFE	; 254
     e2a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     e2c:	a8 e2       	ldi	r26, 0x28	; 40
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e8 e2       	ldi	r30, 0x28	; 40
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8d 7f       	andi	r24, 0xFD	; 253
     e38:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     e3a:	e8 e2       	ldi	r30, 0x28	; 40
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 e3       	ldi	r24, 0x30	; 48
     e40:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     e42:	a8 e2       	ldi	r26, 0x28	; 40
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e8 e2       	ldi	r30, 0x28	; 40
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	84 60       	ori	r24, 0x04	; 4
     e4e:	8c 93       	st	X, r24
     e50:	fe 01       	movw	r30, r28
     e52:	e1 5a       	subi	r30, 0xA1	; 161
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	a0 ea       	ldi	r26, 0xA0	; 160
     e5c:	b0 e4       	ldi	r27, 0x40	; 64
     e5e:	80 83       	st	Z, r24
     e60:	91 83       	std	Z+1, r25	; 0x01
     e62:	a2 83       	std	Z+2, r26	; 0x02
     e64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e66:	8e 01       	movw	r16, r28
     e68:	05 5a       	subi	r16, 0xA5	; 165
     e6a:	1f 4f       	sbci	r17, 0xFF	; 255
     e6c:	fe 01       	movw	r30, r28
     e6e:	e1 5a       	subi	r30, 0xA1	; 161
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	60 81       	ld	r22, Z
     e74:	71 81       	ldd	r23, Z+1	; 0x01
     e76:	82 81       	ldd	r24, Z+2	; 0x02
     e78:	93 81       	ldd	r25, Z+3	; 0x03
     e7a:	26 e6       	ldi	r18, 0x66	; 102
     e7c:	36 e6       	ldi	r19, 0x66	; 102
     e7e:	46 e6       	ldi	r20, 0x66	; 102
     e80:	55 e4       	ldi	r21, 0x45	; 69
     e82:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	f8 01       	movw	r30, r16
     e8c:	80 83       	st	Z, r24
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	a2 83       	std	Z+2, r26	; 0x02
     e92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e94:	fe 01       	movw	r30, r28
     e96:	e5 5a       	subi	r30, 0xA5	; 165
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	60 81       	ld	r22, Z
     e9c:	71 81       	ldd	r23, Z+1	; 0x01
     e9e:	82 81       	ldd	r24, Z+2	; 0x02
     ea0:	93 81       	ldd	r25, Z+3	; 0x03
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
     eae:	88 23       	and	r24, r24
     eb0:	44 f4       	brge	.+16     	; 0xec2 <lcd_set_4bit+0x224>
		__ticks = 1;
     eb2:	fe 01       	movw	r30, r28
     eb4:	e7 5a       	subi	r30, 0xA7	; 167
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24
     ec0:	64 c0       	rjmp	.+200    	; 0xf8a <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     ec2:	fe 01       	movw	r30, r28
     ec4:	e5 5a       	subi	r30, 0xA5	; 165
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	60 81       	ld	r22, Z
     eca:	71 81       	ldd	r23, Z+1	; 0x01
     ecc:	82 81       	ldd	r24, Z+2	; 0x02
     ece:	93 81       	ldd	r25, Z+3	; 0x03
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	3f ef       	ldi	r19, 0xFF	; 255
     ed4:	4f e7       	ldi	r20, 0x7F	; 127
     ed6:	57 e4       	ldi	r21, 0x47	; 71
     ed8:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
     edc:	18 16       	cp	r1, r24
     ede:	0c f0       	brlt	.+2      	; 0xee2 <lcd_set_4bit+0x244>
     ee0:	43 c0       	rjmp	.+134    	; 0xf68 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee2:	fe 01       	movw	r30, r28
     ee4:	e1 5a       	subi	r30, 0xA1	; 161
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e2       	ldi	r20, 0x20	; 32
     ef6:	51 e4       	ldi	r21, 0x41	; 65
     ef8:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	8e 01       	movw	r16, r28
     f02:	07 5a       	subi	r16, 0xA7	; 167
     f04:	1f 4f       	sbci	r17, 0xFF	; 255
     f06:	bc 01       	movw	r22, r24
     f08:	cd 01       	movw	r24, r26
     f0a:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	f8 01       	movw	r30, r16
     f14:	91 83       	std	Z+1, r25	; 0x01
     f16:	80 83       	st	Z, r24
     f18:	1f c0       	rjmp	.+62     	; 0xf58 <lcd_set_4bit+0x2ba>
     f1a:	fe 01       	movw	r30, r28
     f1c:	e9 5a       	subi	r30, 0xA9	; 169
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	80 e7       	ldi	r24, 0x70	; 112
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	80 83       	st	Z, r24
     f28:	fe 01       	movw	r30, r28
     f2a:	e9 5a       	subi	r30, 0xA9	; 169
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	80 81       	ld	r24, Z
     f30:	91 81       	ldd	r25, Z+1	; 0x01
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	f1 f7       	brne	.-4      	; 0xf32 <lcd_set_4bit+0x294>
     f36:	fe 01       	movw	r30, r28
     f38:	e9 5a       	subi	r30, 0xA9	; 169
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	91 83       	std	Z+1, r25	; 0x01
     f3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f40:	de 01       	movw	r26, r28
     f42:	a7 5a       	subi	r26, 0xA7	; 167
     f44:	bf 4f       	sbci	r27, 0xFF	; 255
     f46:	fe 01       	movw	r30, r28
     f48:	e7 5a       	subi	r30, 0xA7	; 167
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	80 81       	ld	r24, Z
     f4e:	91 81       	ldd	r25, Z+1	; 0x01
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	11 96       	adiw	r26, 0x01	; 1
     f54:	9c 93       	st	X, r25
     f56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f58:	fe 01       	movw	r30, r28
     f5a:	e7 5a       	subi	r30, 0xA7	; 167
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	80 81       	ld	r24, Z
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	d1 f6       	brne	.-76     	; 0xf1a <lcd_set_4bit+0x27c>
     f66:	27 c0       	rjmp	.+78     	; 0xfb6 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f68:	8e 01       	movw	r16, r28
     f6a:	07 5a       	subi	r16, 0xA7	; 167
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	fe 01       	movw	r30, r28
     f70:	e5 5a       	subi	r30, 0xA5	; 165
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	60 81       	ld	r22, Z
     f76:	71 81       	ldd	r23, Z+1	; 0x01
     f78:	82 81       	ldd	r24, Z+2	; 0x02
     f7a:	93 81       	ldd	r25, Z+3	; 0x03
     f7c:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	f8 01       	movw	r30, r16
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	80 83       	st	Z, r24
     f8a:	de 01       	movw	r26, r28
     f8c:	ab 5a       	subi	r26, 0xAB	; 171
     f8e:	bf 4f       	sbci	r27, 0xFF	; 255
     f90:	fe 01       	movw	r30, r28
     f92:	e7 5a       	subi	r30, 0xA7	; 167
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	8d 93       	st	X+, r24
     f9c:	9c 93       	st	X, r25
     f9e:	fe 01       	movw	r30, r28
     fa0:	eb 5a       	subi	r30, 0xAB	; 171
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <lcd_set_4bit+0x30a>
     fac:	fe 01       	movw	r30, r28
     fae:	eb 5a       	subi	r30, 0xAB	; 171
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	91 83       	std	Z+1, r25	; 0x01
     fb4:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     fb6:	a8 e2       	ldi	r26, 0x28	; 40
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e8 e2       	ldi	r30, 0x28	; 40
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8b 7f       	andi	r24, 0xFB	; 251
     fc2:	8c 93       	st	X, r24
     fc4:	fe 01       	movw	r30, r28
     fc6:	ef 5a       	subi	r30, 0xAF	; 175
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a0 e8       	ldi	r26, 0x80	; 128
     fd0:	bf e3       	ldi	r27, 0x3F	; 63
     fd2:	80 83       	st	Z, r24
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	a2 83       	std	Z+2, r26	; 0x02
     fd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fda:	8e 01       	movw	r16, r28
     fdc:	03 5b       	subi	r16, 0xB3	; 179
     fde:	1f 4f       	sbci	r17, 0xFF	; 255
     fe0:	fe 01       	movw	r30, r28
     fe2:	ef 5a       	subi	r30, 0xAF	; 175
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	60 81       	ld	r22, Z
     fe8:	71 81       	ldd	r23, Z+1	; 0x01
     fea:	82 81       	ldd	r24, Z+2	; 0x02
     fec:	93 81       	ldd	r25, Z+3	; 0x03
     fee:	26 e6       	ldi	r18, 0x66	; 102
     ff0:	36 e6       	ldi	r19, 0x66	; 102
     ff2:	46 e6       	ldi	r20, 0x66	; 102
     ff4:	55 e4       	ldi	r21, 0x45	; 69
     ff6:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	f8 01       	movw	r30, r16
    1000:	80 83       	st	Z, r24
    1002:	91 83       	std	Z+1, r25	; 0x01
    1004:	a2 83       	std	Z+2, r26	; 0x02
    1006:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1008:	fe 01       	movw	r30, r28
    100a:	e3 5b       	subi	r30, 0xB3	; 179
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	60 81       	ld	r22, Z
    1010:	71 81       	ldd	r23, Z+1	; 0x01
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	93 81       	ldd	r25, Z+3	; 0x03
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e8       	ldi	r20, 0x80	; 128
    101c:	5f e3       	ldi	r21, 0x3F	; 63
    101e:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    1022:	88 23       	and	r24, r24
    1024:	44 f4       	brge	.+16     	; 0x1036 <lcd_set_4bit+0x398>
		__ticks = 1;
    1026:	fe 01       	movw	r30, r28
    1028:	e5 5b       	subi	r30, 0xB5	; 181
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	91 83       	std	Z+1, r25	; 0x01
    1032:	80 83       	st	Z, r24
    1034:	64 c0       	rjmp	.+200    	; 0x10fe <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
    1036:	fe 01       	movw	r30, r28
    1038:	e3 5b       	subi	r30, 0xB3	; 179
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	60 81       	ld	r22, Z
    103e:	71 81       	ldd	r23, Z+1	; 0x01
    1040:	82 81       	ldd	r24, Z+2	; 0x02
    1042:	93 81       	ldd	r25, Z+3	; 0x03
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	3f ef       	ldi	r19, 0xFF	; 255
    1048:	4f e7       	ldi	r20, 0x7F	; 127
    104a:	57 e4       	ldi	r21, 0x47	; 71
    104c:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    1050:	18 16       	cp	r1, r24
    1052:	0c f0       	brlt	.+2      	; 0x1056 <lcd_set_4bit+0x3b8>
    1054:	43 c0       	rjmp	.+134    	; 0x10dc <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1056:	fe 01       	movw	r30, r28
    1058:	ef 5a       	subi	r30, 0xAF	; 175
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	60 81       	ld	r22, Z
    105e:	71 81       	ldd	r23, Z+1	; 0x01
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	40 e2       	ldi	r20, 0x20	; 32
    106a:	51 e4       	ldi	r21, 0x41	; 65
    106c:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	8e 01       	movw	r16, r28
    1076:	05 5b       	subi	r16, 0xB5	; 181
    1078:	1f 4f       	sbci	r17, 0xFF	; 255
    107a:	bc 01       	movw	r22, r24
    107c:	cd 01       	movw	r24, r26
    107e:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	f8 01       	movw	r30, r16
    1088:	91 83       	std	Z+1, r25	; 0x01
    108a:	80 83       	st	Z, r24
    108c:	1f c0       	rjmp	.+62     	; 0x10cc <lcd_set_4bit+0x42e>
    108e:	fe 01       	movw	r30, r28
    1090:	e7 5b       	subi	r30, 0xB7	; 183
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	80 e7       	ldi	r24, 0x70	; 112
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	91 83       	std	Z+1, r25	; 0x01
    109a:	80 83       	st	Z, r24
    109c:	fe 01       	movw	r30, r28
    109e:	e7 5b       	subi	r30, 0xB7	; 183
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	80 81       	ld	r24, Z
    10a4:	91 81       	ldd	r25, Z+1	; 0x01
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <lcd_set_4bit+0x408>
    10aa:	fe 01       	movw	r30, r28
    10ac:	e7 5b       	subi	r30, 0xB7	; 183
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	91 83       	std	Z+1, r25	; 0x01
    10b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b4:	de 01       	movw	r26, r28
    10b6:	a5 5b       	subi	r26, 0xB5	; 181
    10b8:	bf 4f       	sbci	r27, 0xFF	; 255
    10ba:	fe 01       	movw	r30, r28
    10bc:	e5 5b       	subi	r30, 0xB5	; 181
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	80 81       	ld	r24, Z
    10c2:	91 81       	ldd	r25, Z+1	; 0x01
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	11 96       	adiw	r26, 0x01	; 1
    10c8:	9c 93       	st	X, r25
    10ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10cc:	fe 01       	movw	r30, r28
    10ce:	e5 5b       	subi	r30, 0xB5	; 181
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	80 81       	ld	r24, Z
    10d4:	91 81       	ldd	r25, Z+1	; 0x01
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	d1 f6       	brne	.-76     	; 0x108e <lcd_set_4bit+0x3f0>
    10da:	27 c0       	rjmp	.+78     	; 0x112a <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10dc:	8e 01       	movw	r16, r28
    10de:	05 5b       	subi	r16, 0xB5	; 181
    10e0:	1f 4f       	sbci	r17, 0xFF	; 255
    10e2:	fe 01       	movw	r30, r28
    10e4:	e3 5b       	subi	r30, 0xB3	; 179
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	60 81       	ld	r22, Z
    10ea:	71 81       	ldd	r23, Z+1	; 0x01
    10ec:	82 81       	ldd	r24, Z+2	; 0x02
    10ee:	93 81       	ldd	r25, Z+3	; 0x03
    10f0:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	f8 01       	movw	r30, r16
    10fa:	91 83       	std	Z+1, r25	; 0x01
    10fc:	80 83       	st	Z, r24
    10fe:	de 01       	movw	r26, r28
    1100:	a9 5b       	subi	r26, 0xB9	; 185
    1102:	bf 4f       	sbci	r27, 0xFF	; 255
    1104:	fe 01       	movw	r30, r28
    1106:	e5 5b       	subi	r30, 0xB5	; 181
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	8d 93       	st	X+, r24
    1110:	9c 93       	st	X, r25
    1112:	fe 01       	movw	r30, r28
    1114:	e9 5b       	subi	r30, 0xB9	; 185
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <lcd_set_4bit+0x47e>
    1120:	fe 01       	movw	r30, r28
    1122:	e9 5b       	subi	r30, 0xB9	; 185
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    112a:	a8 e2       	ldi	r26, 0x28	; 40
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e8 e2       	ldi	r30, 0x28	; 40
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8e 7f       	andi	r24, 0xFE	; 254
    1136:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    1138:	a8 e2       	ldi	r26, 0x28	; 40
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e8 e2       	ldi	r30, 0x28	; 40
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	8d 7f       	andi	r24, 0xFD	; 253
    1144:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    1146:	e8 e2       	ldi	r30, 0x28	; 40
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 e3       	ldi	r24, 0x30	; 48
    114c:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    114e:	a8 e2       	ldi	r26, 0x28	; 40
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e8 e2       	ldi	r30, 0x28	; 40
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	84 60       	ori	r24, 0x04	; 4
    115a:	8c 93       	st	X, r24
    115c:	fe 01       	movw	r30, r28
    115e:	ed 5b       	subi	r30, 0xBD	; 189
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	a0 ea       	ldi	r26, 0xA0	; 160
    1168:	b0 e4       	ldi	r27, 0x40	; 64
    116a:	80 83       	st	Z, r24
    116c:	91 83       	std	Z+1, r25	; 0x01
    116e:	a2 83       	std	Z+2, r26	; 0x02
    1170:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1172:	8e 01       	movw	r16, r28
    1174:	01 5c       	subi	r16, 0xC1	; 193
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	fe 01       	movw	r30, r28
    117a:	ed 5b       	subi	r30, 0xBD	; 189
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	60 81       	ld	r22, Z
    1180:	71 81       	ldd	r23, Z+1	; 0x01
    1182:	82 81       	ldd	r24, Z+2	; 0x02
    1184:	93 81       	ldd	r25, Z+3	; 0x03
    1186:	26 e6       	ldi	r18, 0x66	; 102
    1188:	36 e6       	ldi	r19, 0x66	; 102
    118a:	46 e6       	ldi	r20, 0x66	; 102
    118c:	55 e4       	ldi	r21, 0x45	; 69
    118e:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	f8 01       	movw	r30, r16
    1198:	80 83       	st	Z, r24
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	a2 83       	std	Z+2, r26	; 0x02
    119e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11a0:	fe 01       	movw	r30, r28
    11a2:	ff 96       	adiw	r30, 0x3f	; 63
    11a4:	60 81       	ld	r22, Z
    11a6:	71 81       	ldd	r23, Z+1	; 0x01
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e8       	ldi	r20, 0x80	; 128
    11b2:	5f e3       	ldi	r21, 0x3F	; 63
    11b4:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    11b8:	88 23       	and	r24, r24
    11ba:	2c f4       	brge	.+10     	; 0x11c6 <lcd_set_4bit+0x528>
		__ticks = 1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9e af       	std	Y+62, r25	; 0x3e
    11c2:	8d af       	std	Y+61, r24	; 0x3d
    11c4:	46 c0       	rjmp	.+140    	; 0x1252 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
    11c6:	fe 01       	movw	r30, r28
    11c8:	ff 96       	adiw	r30, 0x3f	; 63
    11ca:	60 81       	ld	r22, Z
    11cc:	71 81       	ldd	r23, Z+1	; 0x01
    11ce:	82 81       	ldd	r24, Z+2	; 0x02
    11d0:	93 81       	ldd	r25, Z+3	; 0x03
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	3f ef       	ldi	r19, 0xFF	; 255
    11d6:	4f e7       	ldi	r20, 0x7F	; 127
    11d8:	57 e4       	ldi	r21, 0x47	; 71
    11da:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    11de:	18 16       	cp	r1, r24
    11e0:	64 f5       	brge	.+88     	; 0x123a <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e2:	fe 01       	movw	r30, r28
    11e4:	ed 5b       	subi	r30, 0xBD	; 189
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e2       	ldi	r20, 0x20	; 32
    11f6:	51 e4       	ldi	r21, 0x41	; 65
    11f8:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9e af       	std	Y+62, r25	; 0x3e
    120e:	8d af       	std	Y+61, r24	; 0x3d
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <lcd_set_4bit+0x592>
    1212:	80 e7       	ldi	r24, 0x70	; 112
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	9c af       	std	Y+60, r25	; 0x3c
    1218:	8b af       	std	Y+59, r24	; 0x3b
    121a:	8b ad       	ldd	r24, Y+59	; 0x3b
    121c:	9c ad       	ldd	r25, Y+60	; 0x3c
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <lcd_set_4bit+0x580>
    1222:	9c af       	std	Y+60, r25	; 0x3c
    1224:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1226:	8d ad       	ldd	r24, Y+61	; 0x3d
    1228:	9e ad       	ldd	r25, Y+62	; 0x3e
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	9e af       	std	Y+62, r25	; 0x3e
    122e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1230:	8d ad       	ldd	r24, Y+61	; 0x3d
    1232:	9e ad       	ldd	r25, Y+62	; 0x3e
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	69 f7       	brne	.-38     	; 0x1212 <lcd_set_4bit+0x574>
    1238:	16 c0       	rjmp	.+44     	; 0x1266 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123a:	fe 01       	movw	r30, r28
    123c:	ff 96       	adiw	r30, 0x3f	; 63
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	9e af       	std	Y+62, r25	; 0x3e
    1250:	8d af       	std	Y+61, r24	; 0x3d
    1252:	8d ad       	ldd	r24, Y+61	; 0x3d
    1254:	9e ad       	ldd	r25, Y+62	; 0x3e
    1256:	9a af       	std	Y+58, r25	; 0x3a
    1258:	89 af       	std	Y+57, r24	; 0x39
    125a:	89 ad       	ldd	r24, Y+57	; 0x39
    125c:	9a ad       	ldd	r25, Y+58	; 0x3a
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <lcd_set_4bit+0x5c0>
    1262:	9a af       	std	Y+58, r25	; 0x3a
    1264:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1266:	a8 e2       	ldi	r26, 0x28	; 40
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e8 e2       	ldi	r30, 0x28	; 40
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	8b 7f       	andi	r24, 0xFB	; 251
    1272:	8c 93       	st	X, r24
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a0 e8       	ldi	r26, 0x80	; 128
    127a:	bf e3       	ldi	r27, 0x3F	; 63
    127c:	8d ab       	std	Y+53, r24	; 0x35
    127e:	9e ab       	std	Y+54, r25	; 0x36
    1280:	af ab       	std	Y+55, r26	; 0x37
    1282:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1284:	6d a9       	ldd	r22, Y+53	; 0x35
    1286:	7e a9       	ldd	r23, Y+54	; 0x36
    1288:	8f a9       	ldd	r24, Y+55	; 0x37
    128a:	98 ad       	ldd	r25, Y+56	; 0x38
    128c:	26 e6       	ldi	r18, 0x66	; 102
    128e:	36 e6       	ldi	r19, 0x66	; 102
    1290:	46 e6       	ldi	r20, 0x66	; 102
    1292:	55 e4       	ldi	r21, 0x45	; 69
    1294:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	89 ab       	std	Y+49, r24	; 0x31
    129e:	9a ab       	std	Y+50, r25	; 0x32
    12a0:	ab ab       	std	Y+51, r26	; 0x33
    12a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12a4:	69 a9       	ldd	r22, Y+49	; 0x31
    12a6:	7a a9       	ldd	r23, Y+50	; 0x32
    12a8:	8b a9       	ldd	r24, Y+51	; 0x33
    12aa:	9c a9       	ldd	r25, Y+52	; 0x34
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e8       	ldi	r20, 0x80	; 128
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    12b8:	88 23       	and	r24, r24
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <lcd_set_4bit+0x628>
		__ticks = 1;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	98 ab       	std	Y+48, r25	; 0x30
    12c2:	8f a7       	std	Y+47, r24	; 0x2f
    12c4:	3f c0       	rjmp	.+126    	; 0x1344 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
    12c6:	69 a9       	ldd	r22, Y+49	; 0x31
    12c8:	7a a9       	ldd	r23, Y+50	; 0x32
    12ca:	8b a9       	ldd	r24, Y+51	; 0x33
    12cc:	9c a9       	ldd	r25, Y+52	; 0x34
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	3f ef       	ldi	r19, 0xFF	; 255
    12d2:	4f e7       	ldi	r20, 0x7F	; 127
    12d4:	57 e4       	ldi	r21, 0x47	; 71
    12d6:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    12da:	18 16       	cp	r1, r24
    12dc:	4c f5       	brge	.+82     	; 0x1330 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12de:	6d a9       	ldd	r22, Y+53	; 0x35
    12e0:	7e a9       	ldd	r23, Y+54	; 0x36
    12e2:	8f a9       	ldd	r24, Y+55	; 0x37
    12e4:	98 ad       	ldd	r25, Y+56	; 0x38
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e2       	ldi	r20, 0x20	; 32
    12ec:	51 e4       	ldi	r21, 0x41	; 65
    12ee:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	98 ab       	std	Y+48, r25	; 0x30
    1304:	8f a7       	std	Y+47, r24	; 0x2f
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <lcd_set_4bit+0x688>
    1308:	80 e7       	ldi	r24, 0x70	; 112
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	9e a7       	std	Y+46, r25	; 0x2e
    130e:	8d a7       	std	Y+45, r24	; 0x2d
    1310:	8d a5       	ldd	r24, Y+45	; 0x2d
    1312:	9e a5       	ldd	r25, Y+46	; 0x2e
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <lcd_set_4bit+0x676>
    1318:	9e a7       	std	Y+46, r25	; 0x2e
    131a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131c:	8f a5       	ldd	r24, Y+47	; 0x2f
    131e:	98 a9       	ldd	r25, Y+48	; 0x30
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	98 ab       	std	Y+48, r25	; 0x30
    1324:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1326:	8f a5       	ldd	r24, Y+47	; 0x2f
    1328:	98 a9       	ldd	r25, Y+48	; 0x30
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	69 f7       	brne	.-38     	; 0x1308 <lcd_set_4bit+0x66a>
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1330:	69 a9       	ldd	r22, Y+49	; 0x31
    1332:	7a a9       	ldd	r23, Y+50	; 0x32
    1334:	8b a9       	ldd	r24, Y+51	; 0x33
    1336:	9c a9       	ldd	r25, Y+52	; 0x34
    1338:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	98 ab       	std	Y+48, r25	; 0x30
    1342:	8f a7       	std	Y+47, r24	; 0x2f
    1344:	8f a5       	ldd	r24, Y+47	; 0x2f
    1346:	98 a9       	ldd	r25, Y+48	; 0x30
    1348:	9c a7       	std	Y+44, r25	; 0x2c
    134a:	8b a7       	std	Y+43, r24	; 0x2b
    134c:	8b a5       	ldd	r24, Y+43	; 0x2b
    134e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <lcd_set_4bit+0x6b2>
    1354:	9c a7       	std	Y+44, r25	; 0x2c
    1356:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1358:	a8 e2       	ldi	r26, 0x28	; 40
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e8 e2       	ldi	r30, 0x28	; 40
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8e 7f       	andi	r24, 0xFE	; 254
    1364:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    1366:	a8 e2       	ldi	r26, 0x28	; 40
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e8 e2       	ldi	r30, 0x28	; 40
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8d 7f       	andi	r24, 0xFD	; 253
    1372:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    1374:	e8 e2       	ldi	r30, 0x28	; 40
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 e3       	ldi	r24, 0x30	; 48
    137a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    137c:	a8 e2       	ldi	r26, 0x28	; 40
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e8 e2       	ldi	r30, 0x28	; 40
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	84 60       	ori	r24, 0x04	; 4
    1388:	8c 93       	st	X, r24
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a0 ea       	ldi	r26, 0xA0	; 160
    1390:	b0 e4       	ldi	r27, 0x40	; 64
    1392:	8f a3       	std	Y+39, r24	; 0x27
    1394:	98 a7       	std	Y+40, r25	; 0x28
    1396:	a9 a7       	std	Y+41, r26	; 0x29
    1398:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139a:	6f a1       	ldd	r22, Y+39	; 0x27
    139c:	78 a5       	ldd	r23, Y+40	; 0x28
    139e:	89 a5       	ldd	r24, Y+41	; 0x29
    13a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    13a2:	26 e6       	ldi	r18, 0x66	; 102
    13a4:	36 e6       	ldi	r19, 0x66	; 102
    13a6:	46 e6       	ldi	r20, 0x66	; 102
    13a8:	55 e4       	ldi	r21, 0x45	; 69
    13aa:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	8b a3       	std	Y+35, r24	; 0x23
    13b4:	9c a3       	std	Y+36, r25	; 0x24
    13b6:	ad a3       	std	Y+37, r26	; 0x25
    13b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13ba:	6b a1       	ldd	r22, Y+35	; 0x23
    13bc:	7c a1       	ldd	r23, Y+36	; 0x24
    13be:	8d a1       	ldd	r24, Y+37	; 0x25
    13c0:	9e a1       	ldd	r25, Y+38	; 0x26
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e8       	ldi	r20, 0x80	; 128
    13c8:	5f e3       	ldi	r21, 0x3F	; 63
    13ca:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    13ce:	88 23       	and	r24, r24
    13d0:	2c f4       	brge	.+10     	; 0x13dc <lcd_set_4bit+0x73e>
		__ticks = 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9a a3       	std	Y+34, r25	; 0x22
    13d8:	89 a3       	std	Y+33, r24	; 0x21
    13da:	3f c0       	rjmp	.+126    	; 0x145a <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
    13dc:	6b a1       	ldd	r22, Y+35	; 0x23
    13de:	7c a1       	ldd	r23, Y+36	; 0x24
    13e0:	8d a1       	ldd	r24, Y+37	; 0x25
    13e2:	9e a1       	ldd	r25, Y+38	; 0x26
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	3f ef       	ldi	r19, 0xFF	; 255
    13e8:	4f e7       	ldi	r20, 0x7F	; 127
    13ea:	57 e4       	ldi	r21, 0x47	; 71
    13ec:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	4c f5       	brge	.+82     	; 0x1446 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f4:	6f a1       	ldd	r22, Y+39	; 0x27
    13f6:	78 a5       	ldd	r23, Y+40	; 0x28
    13f8:	89 a5       	ldd	r24, Y+41	; 0x29
    13fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e2       	ldi	r20, 0x20	; 32
    1402:	51 e4       	ldi	r21, 0x41	; 65
    1404:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9a a3       	std	Y+34, r25	; 0x22
    141a:	89 a3       	std	Y+33, r24	; 0x21
    141c:	0f c0       	rjmp	.+30     	; 0x143c <lcd_set_4bit+0x79e>
    141e:	80 e7       	ldi	r24, 0x70	; 112
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	98 a3       	std	Y+32, r25	; 0x20
    1424:	8f 8f       	std	Y+31, r24	; 0x1f
    1426:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1428:	98 a1       	ldd	r25, Y+32	; 0x20
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <lcd_set_4bit+0x78c>
    142e:	98 a3       	std	Y+32, r25	; 0x20
    1430:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1432:	89 a1       	ldd	r24, Y+33	; 0x21
    1434:	9a a1       	ldd	r25, Y+34	; 0x22
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	9a a3       	std	Y+34, r25	; 0x22
    143a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143c:	89 a1       	ldd	r24, Y+33	; 0x21
    143e:	9a a1       	ldd	r25, Y+34	; 0x22
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	69 f7       	brne	.-38     	; 0x141e <lcd_set_4bit+0x780>
    1444:	14 c0       	rjmp	.+40     	; 0x146e <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1446:	6b a1       	ldd	r22, Y+35	; 0x23
    1448:	7c a1       	ldd	r23, Y+36	; 0x24
    144a:	8d a1       	ldd	r24, Y+37	; 0x25
    144c:	9e a1       	ldd	r25, Y+38	; 0x26
    144e:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9a a3       	std	Y+34, r25	; 0x22
    1458:	89 a3       	std	Y+33, r24	; 0x21
    145a:	89 a1       	ldd	r24, Y+33	; 0x21
    145c:	9a a1       	ldd	r25, Y+34	; 0x22
    145e:	9e 8f       	std	Y+30, r25	; 0x1e
    1460:	8d 8f       	std	Y+29, r24	; 0x1d
    1462:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1464:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <lcd_set_4bit+0x7c8>
    146a:	9e 8f       	std	Y+30, r25	; 0x1e
    146c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    146e:	a8 e2       	ldi	r26, 0x28	; 40
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e8 e2       	ldi	r30, 0x28	; 40
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	8b 7f       	andi	r24, 0xFB	; 251
    147a:	8c 93       	st	X, r24
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a0 e8       	ldi	r26, 0x80	; 128
    1482:	bf e3       	ldi	r27, 0x3F	; 63
    1484:	89 8f       	std	Y+25, r24	; 0x19
    1486:	9a 8f       	std	Y+26, r25	; 0x1a
    1488:	ab 8f       	std	Y+27, r26	; 0x1b
    148a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148c:	69 8d       	ldd	r22, Y+25	; 0x19
    148e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1494:	26 e6       	ldi	r18, 0x66	; 102
    1496:	36 e6       	ldi	r19, 0x66	; 102
    1498:	46 e6       	ldi	r20, 0x66	; 102
    149a:	55 e4       	ldi	r21, 0x45	; 69
    149c:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8d 8b       	std	Y+21, r24	; 0x15
    14a6:	9e 8b       	std	Y+22, r25	; 0x16
    14a8:	af 8b       	std	Y+23, r26	; 0x17
    14aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14ac:	6d 89       	ldd	r22, Y+21	; 0x15
    14ae:	7e 89       	ldd	r23, Y+22	; 0x16
    14b0:	8f 89       	ldd	r24, Y+23	; 0x17
    14b2:	98 8d       	ldd	r25, Y+24	; 0x18
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	2c f4       	brge	.+10     	; 0x14ce <lcd_set_4bit+0x830>
		__ticks = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9c 8b       	std	Y+20, r25	; 0x14
    14ca:	8b 8b       	std	Y+19, r24	; 0x13
    14cc:	3f c0       	rjmp	.+126    	; 0x154c <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
    14ce:	6d 89       	ldd	r22, Y+21	; 0x15
    14d0:	7e 89       	ldd	r23, Y+22	; 0x16
    14d2:	8f 89       	ldd	r24, Y+23	; 0x17
    14d4:	98 8d       	ldd	r25, Y+24	; 0x18
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	57 e4       	ldi	r21, 0x47	; 71
    14de:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	4c f5       	brge	.+82     	; 0x1538 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e6:	69 8d       	ldd	r22, Y+25	; 0x19
    14e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e2       	ldi	r20, 0x20	; 32
    14f4:	51 e4       	ldi	r21, 0x41	; 65
    14f6:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	9c 8b       	std	Y+20, r25	; 0x14
    150c:	8b 8b       	std	Y+19, r24	; 0x13
    150e:	0f c0       	rjmp	.+30     	; 0x152e <lcd_set_4bit+0x890>
    1510:	80 e7       	ldi	r24, 0x70	; 112
    1512:	91 e0       	ldi	r25, 0x01	; 1
    1514:	9a 8b       	std	Y+18, r25	; 0x12
    1516:	89 8b       	std	Y+17, r24	; 0x11
    1518:	89 89       	ldd	r24, Y+17	; 0x11
    151a:	9a 89       	ldd	r25, Y+18	; 0x12
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <lcd_set_4bit+0x87e>
    1520:	9a 8b       	std	Y+18, r25	; 0x12
    1522:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1524:	8b 89       	ldd	r24, Y+19	; 0x13
    1526:	9c 89       	ldd	r25, Y+20	; 0x14
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	9c 8b       	std	Y+20, r25	; 0x14
    152c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	8b 89       	ldd	r24, Y+19	; 0x13
    1530:	9c 89       	ldd	r25, Y+20	; 0x14
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	69 f7       	brne	.-38     	; 0x1510 <lcd_set_4bit+0x872>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1538:	6d 89       	ldd	r22, Y+21	; 0x15
    153a:	7e 89       	ldd	r23, Y+22	; 0x16
    153c:	8f 89       	ldd	r24, Y+23	; 0x17
    153e:	98 8d       	ldd	r25, Y+24	; 0x18
    1540:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9c 8b       	std	Y+20, r25	; 0x14
    154a:	8b 8b       	std	Y+19, r24	; 0x13
    154c:	8b 89       	ldd	r24, Y+19	; 0x13
    154e:	9c 89       	ldd	r25, Y+20	; 0x14
    1550:	98 8b       	std	Y+16, r25	; 0x10
    1552:	8f 87       	std	Y+15, r24	; 0x0f
    1554:	8f 85       	ldd	r24, Y+15	; 0x0f
    1556:	98 89       	ldd	r25, Y+16	; 0x10
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <lcd_set_4bit+0x8ba>
    155c:	98 8b       	std	Y+16, r25	; 0x10
    155e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1560:	a8 e2       	ldi	r26, 0x28	; 40
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e8 e2       	ldi	r30, 0x28	; 40
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8e 7f       	andi	r24, 0xFE	; 254
    156c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    156e:	a8 e2       	ldi	r26, 0x28	; 40
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e8 e2       	ldi	r30, 0x28	; 40
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	8d 7f       	andi	r24, 0xFD	; 253
    157a:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
    157c:	e8 e2       	ldi	r30, 0x28	; 40
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 e2       	ldi	r24, 0x20	; 32
    1582:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    1584:	a8 e2       	ldi	r26, 0x28	; 40
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 e2       	ldi	r30, 0x28	; 40
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	84 60       	ori	r24, 0x04	; 4
    1590:	8c 93       	st	X, r24
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a0 ea       	ldi	r26, 0xA0	; 160
    1598:	b0 e4       	ldi	r27, 0x40	; 64
    159a:	8b 87       	std	Y+11, r24	; 0x0b
    159c:	9c 87       	std	Y+12, r25	; 0x0c
    159e:	ad 87       	std	Y+13, r26	; 0x0d
    15a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15aa:	26 e6       	ldi	r18, 0x66	; 102
    15ac:	36 e6       	ldi	r19, 0x66	; 102
    15ae:	46 e6       	ldi	r20, 0x66	; 102
    15b0:	55 e4       	ldi	r21, 0x45	; 69
    15b2:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	8f 83       	std	Y+7, r24	; 0x07
    15bc:	98 87       	std	Y+8, r25	; 0x08
    15be:	a9 87       	std	Y+9, r26	; 0x09
    15c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15c2:	6f 81       	ldd	r22, Y+7	; 0x07
    15c4:	78 85       	ldd	r23, Y+8	; 0x08
    15c6:	89 85       	ldd	r24, Y+9	; 0x09
    15c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    15d6:	88 23       	and	r24, r24
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <lcd_set_4bit+0x946>
		__ticks = 1;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	9e 83       	std	Y+6, r25	; 0x06
    15e0:	8d 83       	std	Y+5, r24	; 0x05
    15e2:	3f c0       	rjmp	.+126    	; 0x1662 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
    15e4:	6f 81       	ldd	r22, Y+7	; 0x07
    15e6:	78 85       	ldd	r23, Y+8	; 0x08
    15e8:	89 85       	ldd	r24, Y+9	; 0x09
    15ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	3f ef       	ldi	r19, 0xFF	; 255
    15f0:	4f e7       	ldi	r20, 0x7F	; 127
    15f2:	57 e4       	ldi	r21, 0x47	; 71
    15f4:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    15f8:	18 16       	cp	r1, r24
    15fa:	4c f5       	brge	.+82     	; 0x164e <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1600:	8d 85       	ldd	r24, Y+13	; 0x0d
    1602:	9e 85       	ldd	r25, Y+14	; 0x0e
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e2       	ldi	r20, 0x20	; 32
    160a:	51 e4       	ldi	r21, 0x41	; 65
    160c:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9e 83       	std	Y+6, r25	; 0x06
    1622:	8d 83       	std	Y+5, r24	; 0x05
    1624:	0f c0       	rjmp	.+30     	; 0x1644 <lcd_set_4bit+0x9a6>
    1626:	80 e7       	ldi	r24, 0x70	; 112
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	9c 83       	std	Y+4, r25	; 0x04
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <lcd_set_4bit+0x994>
    1636:	9c 83       	std	Y+4, r25	; 0x04
    1638:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	69 f7       	brne	.-38     	; 0x1626 <lcd_set_4bit+0x988>
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164e:	6f 81       	ldd	r22, Y+7	; 0x07
    1650:	78 85       	ldd	r23, Y+8	; 0x08
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	9a 83       	std	Y+2, r25	; 0x02
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	9a 81       	ldd	r25, Y+2	; 0x02
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <lcd_set_4bit+0x9d0>
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1676:	a8 e2       	ldi	r26, 0x28	; 40
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e8 e2       	ldi	r30, 0x28	; 40
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	8b 7f       	andi	r24, 0xFB	; 251
    1682:	8c 93       	st	X, r24

	
}
    1684:	c0 59       	subi	r28, 0x90	; 144
    1686:	df 4f       	sbci	r29, 0xFF	; 255
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	08 95       	ret

0000169c <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	2e 97       	sbiw	r28, 0x0e	; 14
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a0 e8       	ldi	r26, 0x80	; 128
    16b6:	bf e3       	ldi	r27, 0x3F	; 63
    16b8:	8b 87       	std	Y+11, r24	; 0x0b
    16ba:	9c 87       	std	Y+12, r25	; 0x0c
    16bc:	ad 87       	std	Y+13, r26	; 0x0d
    16be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c8:	26 e6       	ldi	r18, 0x66	; 102
    16ca:	36 e6       	ldi	r19, 0x66	; 102
    16cc:	46 e6       	ldi	r20, 0x66	; 102
    16ce:	55 e4       	ldi	r21, 0x45	; 69
    16d0:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	8f 83       	std	Y+7, r24	; 0x07
    16da:	98 87       	std	Y+8, r25	; 0x08
    16dc:	a9 87       	std	Y+9, r26	; 0x09
    16de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e8       	ldi	r20, 0x80	; 128
    16ee:	5f e3       	ldi	r21, 0x3F	; 63
    16f0:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    16f4:	88 23       	and	r24, r24
    16f6:	2c f4       	brge	.+10     	; 0x1702 <lcd_init+0x66>
		__ticks = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	3f c0       	rjmp	.+126    	; 0x1780 <lcd_init+0xe4>
	else if (__tmp > 65535)
    1702:	6f 81       	ldd	r22, Y+7	; 0x07
    1704:	78 85       	ldd	r23, Y+8	; 0x08
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	57 e4       	ldi	r21, 0x47	; 71
    1712:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	4c f5       	brge	.+82     	; 0x176c <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171a:	6b 85       	ldd	r22, Y+11	; 0x0b
    171c:	7c 85       	ldd	r23, Y+12	; 0x0c
    171e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1720:	9e 85       	ldd	r25, Y+14	; 0x0e
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e2       	ldi	r20, 0x20	; 32
    1728:	51 e4       	ldi	r21, 0x41	; 65
    172a:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <lcd_init+0xc6>
    1744:	80 e7       	ldi	r24, 0x70	; 112
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	9c 83       	std	Y+4, r25	; 0x04
    174a:	8b 83       	std	Y+3, r24	; 0x03
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <lcd_init+0xb4>
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	69 f7       	brne	.-38     	; 0x1744 <lcd_init+0xa8>
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176c:	6f 81       	ldd	r22, Y+7	; 0x07
    176e:	78 85       	ldd	r23, Y+8	; 0x08
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9e 83       	std	Y+6, r25	; 0x06
    177e:	8d 83       	std	Y+5, r24	; 0x05
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <lcd_init+0xf0>
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    1794:	88 e2       	ldi	r24, 0x28	; 40
    1796:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <lcd_wr_command>
	lcd_wr_command(0x01);
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <lcd_wr_command>
	lcd_wr_command(0x06); // increment sghift off
    17a0:	86 e0       	ldi	r24, 0x06	; 6
    17a2:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <lcd_wr_command>
      //  lcd_wr_command(0x07); // increment sghift on
	lcd_wr_command(0x0E);
    17a6:	8e e0       	ldi	r24, 0x0E	; 14
    17a8:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <lcd_wr_command>
	lcd_wr_command(0x80);
    17ac:	80 e8       	ldi	r24, 0x80	; 128
    17ae:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <lcd_wr_command>
		
}
    17b2:	2e 96       	adiw	r28, 0x0e	; 14
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	6e 97       	sbiw	r28, 0x1e	; 30
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    17da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17dc:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    17de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17e0:	80 7f       	andi	r24, 0xF0	; 240
    17e2:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    17e4:	a8 e2       	ldi	r26, 0x28	; 40
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e8 e2       	ldi	r30, 0x28	; 40
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	8f 70       	andi	r24, 0x0F	; 15
    17f0:	8c 93       	st	X, r24
	lcd_port |= temp;
    17f2:	a8 e2       	ldi	r26, 0x28	; 40
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e8 e2       	ldi	r30, 0x28	; 40
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	90 81       	ld	r25, Z
    17fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17fe:	89 2b       	or	r24, r25
    1800:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1802:	a8 e2       	ldi	r26, 0x28	; 40
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e8 e2       	ldi	r30, 0x28	; 40
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	8e 7f       	andi	r24, 0xFE	; 254
    180e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1810:	a8 e2       	ldi	r26, 0x28	; 40
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e8 e2       	ldi	r30, 0x28	; 40
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	8d 7f       	andi	r24, 0xFD	; 253
    181c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    181e:	a8 e2       	ldi	r26, 0x28	; 40
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e8 e2       	ldi	r30, 0x28	; 40
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	84 60       	ori	r24, 0x04	; 4
    182a:	8c 93       	st	X, r24
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a0 ea       	ldi	r26, 0xA0	; 160
    1832:	b0 e4       	ldi	r27, 0x40	; 64
    1834:	89 8f       	std	Y+25, r24	; 0x19
    1836:	9a 8f       	std	Y+26, r25	; 0x1a
    1838:	ab 8f       	std	Y+27, r26	; 0x1b
    183a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183c:	69 8d       	ldd	r22, Y+25	; 0x19
    183e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1840:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1842:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1844:	26 e6       	ldi	r18, 0x66	; 102
    1846:	36 e6       	ldi	r19, 0x66	; 102
    1848:	46 e6       	ldi	r20, 0x66	; 102
    184a:	55 e4       	ldi	r21, 0x45	; 69
    184c:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	8d 8b       	std	Y+21, r24	; 0x15
    1856:	9e 8b       	std	Y+22, r25	; 0x16
    1858:	af 8b       	std	Y+23, r26	; 0x17
    185a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    185c:	6d 89       	ldd	r22, Y+21	; 0x15
    185e:	7e 89       	ldd	r23, Y+22	; 0x16
    1860:	8f 89       	ldd	r24, Y+23	; 0x17
    1862:	98 8d       	ldd	r25, Y+24	; 0x18
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e8       	ldi	r20, 0x80	; 128
    186a:	5f e3       	ldi	r21, 0x3F	; 63
    186c:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    1870:	88 23       	and	r24, r24
    1872:	2c f4       	brge	.+10     	; 0x187e <lcd_wr_command+0xba>
		__ticks = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9c 8b       	std	Y+20, r25	; 0x14
    187a:	8b 8b       	std	Y+19, r24	; 0x13
    187c:	3f c0       	rjmp	.+126    	; 0x18fc <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    187e:	6d 89       	ldd	r22, Y+21	; 0x15
    1880:	7e 89       	ldd	r23, Y+22	; 0x16
    1882:	8f 89       	ldd	r24, Y+23	; 0x17
    1884:	98 8d       	ldd	r25, Y+24	; 0x18
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	3f ef       	ldi	r19, 0xFF	; 255
    188a:	4f e7       	ldi	r20, 0x7F	; 127
    188c:	57 e4       	ldi	r21, 0x47	; 71
    188e:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    1892:	18 16       	cp	r1, r24
    1894:	4c f5       	brge	.+82     	; 0x18e8 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1896:	69 8d       	ldd	r22, Y+25	; 0x19
    1898:	7a 8d       	ldd	r23, Y+26	; 0x1a
    189a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    189c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e2       	ldi	r20, 0x20	; 32
    18a4:	51 e4       	ldi	r21, 0x41	; 65
    18a6:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9c 8b       	std	Y+20, r25	; 0x14
    18bc:	8b 8b       	std	Y+19, r24	; 0x13
    18be:	0f c0       	rjmp	.+30     	; 0x18de <lcd_wr_command+0x11a>
    18c0:	80 e7       	ldi	r24, 0x70	; 112
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	9a 8b       	std	Y+18, r25	; 0x12
    18c6:	89 8b       	std	Y+17, r24	; 0x11
    18c8:	89 89       	ldd	r24, Y+17	; 0x11
    18ca:	9a 89       	ldd	r25, Y+18	; 0x12
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <lcd_wr_command+0x108>
    18d0:	9a 8b       	std	Y+18, r25	; 0x12
    18d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d4:	8b 89       	ldd	r24, Y+19	; 0x13
    18d6:	9c 89       	ldd	r25, Y+20	; 0x14
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	9c 8b       	std	Y+20, r25	; 0x14
    18dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18de:	8b 89       	ldd	r24, Y+19	; 0x13
    18e0:	9c 89       	ldd	r25, Y+20	; 0x14
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	69 f7       	brne	.-38     	; 0x18c0 <lcd_wr_command+0xfc>
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ea:	7e 89       	ldd	r23, Y+22	; 0x16
    18ec:	8f 89       	ldd	r24, Y+23	; 0x17
    18ee:	98 8d       	ldd	r25, Y+24	; 0x18
    18f0:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	9c 8b       	std	Y+20, r25	; 0x14
    18fa:	8b 8b       	std	Y+19, r24	; 0x13
    18fc:	8b 89       	ldd	r24, Y+19	; 0x13
    18fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1900:	98 8b       	std	Y+16, r25	; 0x10
    1902:	8f 87       	std	Y+15, r24	; 0x0f
    1904:	8f 85       	ldd	r24, Y+15	; 0x0f
    1906:	98 89       	ldd	r25, Y+16	; 0x10
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <lcd_wr_command+0x144>
    190c:	98 8b       	std	Y+16, r25	; 0x10
    190e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1910:	a8 e2       	ldi	r26, 0x28	; 40
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e8 e2       	ldi	r30, 0x28	; 40
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	8b 7f       	andi	r24, 0xFB	; 251
    191c:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
    191e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1920:	8f 70       	andi	r24, 0x0F	; 15
    1922:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    1924:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1926:	82 95       	swap	r24
    1928:	80 7f       	andi	r24, 0xF0	; 240
    192a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    192c:	a8 e2       	ldi	r26, 0x28	; 40
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e8 e2       	ldi	r30, 0x28	; 40
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	8f 70       	andi	r24, 0x0F	; 15
    1938:	8c 93       	st	X, r24
	lcd_port |= cmd;
    193a:	a8 e2       	ldi	r26, 0x28	; 40
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e8 e2       	ldi	r30, 0x28	; 40
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	90 81       	ld	r25, Z
    1944:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1946:	89 2b       	or	r24, r25
    1948:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    194a:	a8 e2       	ldi	r26, 0x28	; 40
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e8 e2       	ldi	r30, 0x28	; 40
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	8e 7f       	andi	r24, 0xFE	; 254
    1956:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1958:	a8 e2       	ldi	r26, 0x28	; 40
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e8 e2       	ldi	r30, 0x28	; 40
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	8d 7f       	andi	r24, 0xFD	; 253
    1964:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1966:	a8 e2       	ldi	r26, 0x28	; 40
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e8 e2       	ldi	r30, 0x28	; 40
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	84 60       	ori	r24, 0x04	; 4
    1972:	8c 93       	st	X, r24
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	a0 ea       	ldi	r26, 0xA0	; 160
    197a:	b0 e4       	ldi	r27, 0x40	; 64
    197c:	8b 87       	std	Y+11, r24	; 0x0b
    197e:	9c 87       	std	Y+12, r25	; 0x0c
    1980:	ad 87       	std	Y+13, r26	; 0x0d
    1982:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1984:	6b 85       	ldd	r22, Y+11	; 0x0b
    1986:	7c 85       	ldd	r23, Y+12	; 0x0c
    1988:	8d 85       	ldd	r24, Y+13	; 0x0d
    198a:	9e 85       	ldd	r25, Y+14	; 0x0e
    198c:	26 e6       	ldi	r18, 0x66	; 102
    198e:	36 e6       	ldi	r19, 0x66	; 102
    1990:	46 e6       	ldi	r20, 0x66	; 102
    1992:	55 e4       	ldi	r21, 0x45	; 69
    1994:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8f 83       	std	Y+7, r24	; 0x07
    199e:	98 87       	std	Y+8, r25	; 0x08
    19a0:	a9 87       	std	Y+9, r26	; 0x09
    19a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a4:	6f 81       	ldd	r22, Y+7	; 0x07
    19a6:	78 85       	ldd	r23, Y+8	; 0x08
    19a8:	89 85       	ldd	r24, Y+9	; 0x09
    19aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	5f e3       	ldi	r21, 0x3F	; 63
    19b4:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    19b8:	88 23       	and	r24, r24
    19ba:	2c f4       	brge	.+10     	; 0x19c6 <lcd_wr_command+0x202>
		__ticks = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
    19c4:	3f c0       	rjmp	.+126    	; 0x1a44 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    19c6:	6f 81       	ldd	r22, Y+7	; 0x07
    19c8:	78 85       	ldd	r23, Y+8	; 0x08
    19ca:	89 85       	ldd	r24, Y+9	; 0x09
    19cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	4f e7       	ldi	r20, 0x7F	; 127
    19d4:	57 e4       	ldi	r21, 0x47	; 71
    19d6:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    19da:	18 16       	cp	r1, r24
    19dc:	4c f5       	brge	.+82     	; 0x1a30 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19de:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e2       	ldi	r20, 0x20	; 32
    19ec:	51 e4       	ldi	r21, 0x41	; 65
    19ee:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9e 83       	std	Y+6, r25	; 0x06
    1a04:	8d 83       	std	Y+5, r24	; 0x05
    1a06:	0f c0       	rjmp	.+30     	; 0x1a26 <lcd_wr_command+0x262>
    1a08:	80 e7       	ldi	r24, 0x70	; 112
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	9c 83       	std	Y+4, r25	; 0x04
    1a0e:	8b 83       	std	Y+3, r24	; 0x03
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <lcd_wr_command+0x250>
    1a18:	9c 83       	std	Y+4, r25	; 0x04
    1a1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	9e 83       	std	Y+6, r25	; 0x06
    1a24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	69 f7       	brne	.-38     	; 0x1a08 <lcd_wr_command+0x244>
    1a2e:	14 c0       	rjmp	.+40     	; 0x1a58 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a30:	6f 81       	ldd	r22, Y+7	; 0x07
    1a32:	78 85       	ldd	r23, Y+8	; 0x08
    1a34:	89 85       	ldd	r24, Y+9	; 0x09
    1a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a38:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9e 83       	std	Y+6, r25	; 0x06
    1a42:	8d 83       	std	Y+5, r24	; 0x05
    1a44:	8d 81       	ldd	r24, Y+5	; 0x05
    1a46:	9e 81       	ldd	r25, Y+6	; 0x06
    1a48:	9a 83       	std	Y+2, r25	; 0x02
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <lcd_wr_command+0x28c>
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1a58:	a8 e2       	ldi	r26, 0x28	; 40
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e8 e2       	ldi	r30, 0x28	; 40
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8b 7f       	andi	r24, 0xFB	; 251
    1a64:	8c 93       	st	X, r24
}
    1a66:	6e 96       	adiw	r28, 0x1e	; 30
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	6e 97       	sbiw	r28, 0x1e	; 30
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    1a8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a90:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    1a92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a94:	80 7f       	andi	r24, 0xF0	; 240
    1a96:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1a98:	a8 e2       	ldi	r26, 0x28	; 40
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e8 e2       	ldi	r30, 0x28	; 40
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8f 70       	andi	r24, 0x0F	; 15
    1aa4:	8c 93       	st	X, r24
	lcd_port |= temp;
    1aa6:	a8 e2       	ldi	r26, 0x28	; 40
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e8 e2       	ldi	r30, 0x28	; 40
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	90 81       	ld	r25, Z
    1ab0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ab2:	89 2b       	or	r24, r25
    1ab4:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1ab6:	a8 e2       	ldi	r26, 0x28	; 40
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e8 e2       	ldi	r30, 0x28	; 40
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	81 60       	ori	r24, 0x01	; 1
    1ac2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1ac4:	a8 e2       	ldi	r26, 0x28	; 40
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e8 e2       	ldi	r30, 0x28	; 40
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	8d 7f       	andi	r24, 0xFD	; 253
    1ad0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1ad2:	a8 e2       	ldi	r26, 0x28	; 40
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e8 e2       	ldi	r30, 0x28	; 40
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	84 60       	ori	r24, 0x04	; 4
    1ade:	8c 93       	st	X, r24
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a0 ea       	ldi	r26, 0xA0	; 160
    1ae6:	b0 e4       	ldi	r27, 0x40	; 64
    1ae8:	89 8f       	std	Y+25, r24	; 0x19
    1aea:	9a 8f       	std	Y+26, r25	; 0x1a
    1aec:	ab 8f       	std	Y+27, r26	; 0x1b
    1aee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af0:	69 8d       	ldd	r22, Y+25	; 0x19
    1af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af8:	26 e6       	ldi	r18, 0x66	; 102
    1afa:	36 e6       	ldi	r19, 0x66	; 102
    1afc:	46 e6       	ldi	r20, 0x66	; 102
    1afe:	55 e4       	ldi	r21, 0x45	; 69
    1b00:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	8d 8b       	std	Y+21, r24	; 0x15
    1b0a:	9e 8b       	std	Y+22, r25	; 0x16
    1b0c:	af 8b       	std	Y+23, r26	; 0x17
    1b0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b10:	6d 89       	ldd	r22, Y+21	; 0x15
    1b12:	7e 89       	ldd	r23, Y+22	; 0x16
    1b14:	8f 89       	ldd	r24, Y+23	; 0x17
    1b16:	98 8d       	ldd	r25, Y+24	; 0x18
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    1b24:	88 23       	and	r24, r24
    1b26:	2c f4       	brge	.+10     	; 0x1b32 <lcd_wr_char+0xba>
		__ticks = 1;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9c 8b       	std	Y+20, r25	; 0x14
    1b2e:	8b 8b       	std	Y+19, r24	; 0x13
    1b30:	3f c0       	rjmp	.+126    	; 0x1bb0 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    1b32:	6d 89       	ldd	r22, Y+21	; 0x15
    1b34:	7e 89       	ldd	r23, Y+22	; 0x16
    1b36:	8f 89       	ldd	r24, Y+23	; 0x17
    1b38:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	3f ef       	ldi	r19, 0xFF	; 255
    1b3e:	4f e7       	ldi	r20, 0x7F	; 127
    1b40:	57 e4       	ldi	r21, 0x47	; 71
    1b42:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    1b46:	18 16       	cp	r1, r24
    1b48:	4c f5       	brge	.+82     	; 0x1b9c <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e2       	ldi	r20, 0x20	; 32
    1b58:	51 e4       	ldi	r21, 0x41	; 65
    1b5a:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9c 8b       	std	Y+20, r25	; 0x14
    1b70:	8b 8b       	std	Y+19, r24	; 0x13
    1b72:	0f c0       	rjmp	.+30     	; 0x1b92 <lcd_wr_char+0x11a>
    1b74:	80 e7       	ldi	r24, 0x70	; 112
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	9a 8b       	std	Y+18, r25	; 0x12
    1b7a:	89 8b       	std	Y+17, r24	; 0x11
    1b7c:	89 89       	ldd	r24, Y+17	; 0x11
    1b7e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <lcd_wr_char+0x108>
    1b84:	9a 8b       	std	Y+18, r25	; 0x12
    1b86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b88:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	9c 8b       	std	Y+20, r25	; 0x14
    1b90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b92:	8b 89       	ldd	r24, Y+19	; 0x13
    1b94:	9c 89       	ldd	r25, Y+20	; 0x14
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	69 f7       	brne	.-38     	; 0x1b74 <lcd_wr_char+0xfc>
    1b9a:	14 c0       	rjmp	.+40     	; 0x1bc4 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba4:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	9c 8b       	std	Y+20, r25	; 0x14
    1bae:	8b 8b       	std	Y+19, r24	; 0x13
    1bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb4:	98 8b       	std	Y+16, r25	; 0x10
    1bb6:	8f 87       	std	Y+15, r24	; 0x0f
    1bb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bba:	98 89       	ldd	r25, Y+16	; 0x10
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <lcd_wr_char+0x144>
    1bc0:	98 8b       	std	Y+16, r25	; 0x10
    1bc2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1bc4:	a8 e2       	ldi	r26, 0x28	; 40
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e8 e2       	ldi	r30, 0x28	; 40
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	8b 7f       	andi	r24, 0xFB	; 251
    1bd0:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    1bd2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bd4:	8f 70       	andi	r24, 0x0F	; 15
    1bd6:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1bd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bda:	82 95       	swap	r24
    1bdc:	80 7f       	andi	r24, 0xF0	; 240
    1bde:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1be0:	a8 e2       	ldi	r26, 0x28	; 40
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e8 e2       	ldi	r30, 0x28	; 40
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	8f 70       	andi	r24, 0x0F	; 15
    1bec:	8c 93       	st	X, r24
	lcd_port |= letter;
    1bee:	a8 e2       	ldi	r26, 0x28	; 40
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e8 e2       	ldi	r30, 0x28	; 40
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	90 81       	ld	r25, Z
    1bf8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bfa:	89 2b       	or	r24, r25
    1bfc:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1bfe:	a8 e2       	ldi	r26, 0x28	; 40
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e8 e2       	ldi	r30, 0x28	; 40
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	81 60       	ori	r24, 0x01	; 1
    1c0a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1c0c:	a8 e2       	ldi	r26, 0x28	; 40
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e8 e2       	ldi	r30, 0x28	; 40
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	8d 7f       	andi	r24, 0xFD	; 253
    1c18:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1c1a:	a8 e2       	ldi	r26, 0x28	; 40
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e8 e2       	ldi	r30, 0x28	; 40
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	84 60       	ori	r24, 0x04	; 4
    1c26:	8c 93       	st	X, r24
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 ea       	ldi	r26, 0xA0	; 160
    1c2e:	b0 e4       	ldi	r27, 0x40	; 64
    1c30:	8b 87       	std	Y+11, r24	; 0x0b
    1c32:	9c 87       	std	Y+12, r25	; 0x0c
    1c34:	ad 87       	std	Y+13, r26	; 0x0d
    1c36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c40:	26 e6       	ldi	r18, 0x66	; 102
    1c42:	36 e6       	ldi	r19, 0x66	; 102
    1c44:	46 e6       	ldi	r20, 0x66	; 102
    1c46:	55 e4       	ldi	r21, 0x45	; 69
    1c48:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	8f 83       	std	Y+7, r24	; 0x07
    1c52:	98 87       	std	Y+8, r25	; 0x08
    1c54:	a9 87       	std	Y+9, r26	; 0x09
    1c56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c58:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5a:	78 85       	ldd	r23, Y+8	; 0x08
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <lcd_wr_char+0x202>
		__ticks = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	3f c0       	rjmp	.+126    	; 0x1cf8 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7c:	78 85       	ldd	r23, Y+8	; 0x08
    1c7e:	89 85       	ldd	r24, Y+9	; 0x09
    1c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	3f ef       	ldi	r19, 0xFF	; 255
    1c86:	4f e7       	ldi	r20, 0x7F	; 127
    1c88:	57 e4       	ldi	r21, 0x47	; 71
    1c8a:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    1c8e:	18 16       	cp	r1, r24
    1c90:	4c f5       	brge	.+82     	; 0x1ce4 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
    1ca0:	51 e4       	ldi	r21, 0x41	; 65
    1ca2:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <lcd_wr_char+0x262>
    1cbc:	80 e7       	ldi	r24, 0x70	; 112
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	9c 83       	std	Y+4, r25	; 0x04
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <lcd_wr_char+0x250>
    1ccc:	9c 83       	std	Y+4, r25	; 0x04
    1cce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	9e 83       	std	Y+6, r25	; 0x06
    1cd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	69 f7       	brne	.-38     	; 0x1cbc <lcd_wr_char+0x244>
    1ce2:	14 c0       	rjmp	.+40     	; 0x1d0c <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9e 83       	std	Y+6, r25	; 0x06
    1cf6:	8d 83       	std	Y+5, r24	; 0x05
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <lcd_wr_char+0x28c>
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1d0c:	a8 e2       	ldi	r26, 0x28	; 40
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e8 e2       	ldi	r30, 0x28	; 40
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	8b 7f       	andi	r24, 0xFB	; 251
    1d18:	8c 93       	st	X, r24
}
    1d1a:	6e 96       	adiw	r28, 0x1e	; 30
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1d34:	80 e8       	ldi	r24, 0x80	; 128
    1d36:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <lcd_wr_command>
}
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <lcd_string+0x6>
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	0a c0       	rjmp	.+20     	; 0x1d64 <lcd_string+0x24>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1d50:	e9 81       	ldd	r30, Y+1	; 0x01
    1d52:	fa 81       	ldd	r31, Y+2	; 0x02
    1d54:	80 81       	ld	r24, Z
    1d56:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_wr_char>
		str++;
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	01 96       	adiw	r24, 0x01	; 1
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1d64:	e9 81       	ldd	r30, Y+1	; 0x01
    1d66:	fa 81       	ldd	r31, Y+2	; 0x02
    1d68:	80 81       	ld	r24, Z
    1d6a:	88 23       	and	r24, r24
    1d6c:	89 f7       	brne	.-30     	; 0x1d50 <lcd_string+0x10>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <lcd_cursor+0x6>
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <lcd_cursor+0x8>
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	89 83       	std	Y+1, r24	; 0x01
    1d86:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	3c 83       	std	Y+4, r19	; 0x04
    1d90:	2b 83       	std	Y+3, r18	; 0x03
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	9c 81       	ldd	r25, Y+4	; 0x04
    1d96:	82 30       	cpi	r24, 0x02	; 2
    1d98:	91 05       	cpc	r25, r1
    1d9a:	d9 f0       	breq	.+54     	; 0x1dd2 <lcd_cursor+0x5a>
    1d9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1da0:	23 30       	cpi	r18, 0x03	; 3
    1da2:	31 05       	cpc	r19, r1
    1da4:	34 f4       	brge	.+12     	; 0x1db2 <lcd_cursor+0x3a>
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	9c 81       	ldd	r25, Y+4	; 0x04
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	91 05       	cpc	r25, r1
    1dae:	61 f0       	breq	.+24     	; 0x1dc8 <lcd_cursor+0x50>
    1db0:	1e c0       	rjmp	.+60     	; 0x1dee <lcd_cursor+0x76>
    1db2:	2b 81       	ldd	r18, Y+3	; 0x03
    1db4:	3c 81       	ldd	r19, Y+4	; 0x04
    1db6:	23 30       	cpi	r18, 0x03	; 3
    1db8:	31 05       	cpc	r19, r1
    1dba:	81 f0       	breq	.+32     	; 0x1ddc <lcd_cursor+0x64>
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	84 30       	cpi	r24, 0x04	; 4
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	81 f0       	breq	.+32     	; 0x1de6 <lcd_cursor+0x6e>
    1dc6:	13 c0       	rjmp	.+38     	; 0x1dee <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	81 58       	subi	r24, 0x81	; 129
    1dcc:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <lcd_wr_command>
    1dd0:	0e c0       	rjmp	.+28     	; 0x1dee <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	81 54       	subi	r24, 0x41	; 65
    1dd6:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <lcd_wr_command>
    1dda:	09 c0       	rjmp	.+18     	; 0x1dee <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	8d 56       	subi	r24, 0x6D	; 109
    1de0:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <lcd_wr_command>
    1de4:	04 c0       	rjmp	.+8      	; 0x1dee <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	8d 52       	subi	r24, 0x2D	; 45
    1dea:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <lcd_wr_command>
		default: break;
	}
}
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <lcd_number>:
void lcd_number (char row, char coloumn, unsigned int value, int digits)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	27 97       	sbiw	r28, 0x07	; 7
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	8a 83       	std	Y+2, r24	; 0x02
    1e12:	6b 83       	std	Y+3, r22	; 0x03
    1e14:	5d 83       	std	Y+5, r21	; 0x05
    1e16:	4c 83       	std	Y+4, r20	; 0x04
    1e18:	3f 83       	std	Y+7, r19	; 0x07
    1e1a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1e1c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	88 23       	and	r24, r24
    1e22:	19 f0       	breq	.+6      	; 0x1e2a <lcd_number+0x2e>
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	88 23       	and	r24, r24
    1e28:	19 f4       	brne	.+6      	; 0x1e30 <lcd_number+0x34>
	{
		lcd_home();
    1e2a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <lcd_home>
    1e2e:	04 c0       	rjmp	.+8      	; 0x1e38 <lcd_number+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	6b 81       	ldd	r22, Y+3	; 0x03
    1e34:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1e38:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e3c:	85 30       	cpi	r24, 0x05	; 5
    1e3e:	91 05       	cpc	r25, r1
    1e40:	19 f0       	breq	.+6      	; 0x1e48 <lcd_number+0x4c>
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	a9 f4       	brne	.+42     	; 0x1e72 <lcd_number+0x76>
	{
		million=value/10000+48;
    1e48:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4c:	20 e1       	ldi	r18, 0x10	; 16
    1e4e:	37 e2       	ldi	r19, 0x27	; 39
    1e50:	b9 01       	movw	r22, r18
    1e52:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <__udivmodhi4>
    1e56:	cb 01       	movw	r24, r22
    1e58:	c0 96       	adiw	r24, 0x30	; 48
    1e5a:	90 93 80 03 	sts	0x0380, r25
    1e5e:	80 93 7f 03 	sts	0x037F, r24
		lcd_wr_char(million);
    1e62:	80 91 7f 03 	lds	r24, 0x037F
    1e66:	90 91 80 03 	lds	r25, 0x0380
    1e6a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_wr_char>
		flag=1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1e72:	8e 81       	ldd	r24, Y+6	; 0x06
    1e74:	9f 81       	ldd	r25, Y+7	; 0x07
    1e76:	84 30       	cpi	r24, 0x04	; 4
    1e78:	91 05       	cpc	r25, r1
    1e7a:	19 f0       	breq	.+6      	; 0x1e82 <lcd_number+0x86>
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	11 f5       	brne	.+68     	; 0x1ec6 <lcd_number+0xca>
	{
		temp = value/1000;
    1e82:	8c 81       	ldd	r24, Y+4	; 0x04
    1e84:	9d 81       	ldd	r25, Y+5	; 0x05
    1e86:	28 ee       	ldi	r18, 0xE8	; 232
    1e88:	33 e0       	ldi	r19, 0x03	; 3
    1e8a:	b9 01       	movw	r22, r18
    1e8c:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <__udivmodhi4>
    1e90:	cb 01       	movw	r24, r22
    1e92:	90 93 86 03 	sts	0x0386, r25
    1e96:	80 93 85 03 	sts	0x0385, r24
		thousand = temp%10 + 48;
    1e9a:	80 91 85 03 	lds	r24, 0x0385
    1e9e:	90 91 86 03 	lds	r25, 0x0386
    1ea2:	2a e0       	ldi	r18, 0x0A	; 10
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	b9 01       	movw	r22, r18
    1ea8:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <__udivmodhi4>
    1eac:	c0 96       	adiw	r24, 0x30	; 48
    1eae:	90 93 20 0e 	sts	0x0E20, r25
    1eb2:	80 93 1f 0e 	sts	0x0E1F, r24
		lcd_wr_char(thousand);
    1eb6:	80 91 1f 0e 	lds	r24, 0x0E1F
    1eba:	90 91 20 0e 	lds	r25, 0x0E20
    1ebe:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_wr_char>
		flag=1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eca:	83 30       	cpi	r24, 0x03	; 3
    1ecc:	91 05       	cpc	r25, r1
    1ece:	19 f0       	breq	.+6      	; 0x1ed6 <lcd_number+0xda>
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	81 30       	cpi	r24, 0x01	; 1
    1ed4:	11 f5       	brne	.+68     	; 0x1f1a <lcd_number+0x11e>
	{
		temp = value/100;
    1ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eda:	24 e6       	ldi	r18, 0x64	; 100
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	b9 01       	movw	r22, r18
    1ee0:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <__udivmodhi4>
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	90 93 86 03 	sts	0x0386, r25
    1eea:	80 93 85 03 	sts	0x0385, r24
		hundred = temp%10 + 48;
    1eee:	80 91 85 03 	lds	r24, 0x0385
    1ef2:	90 91 86 03 	lds	r25, 0x0386
    1ef6:	2a e0       	ldi	r18, 0x0A	; 10
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	b9 01       	movw	r22, r18
    1efc:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <__udivmodhi4>
    1f00:	c0 96       	adiw	r24, 0x30	; 48
    1f02:	90 93 d1 0d 	sts	0x0DD1, r25
    1f06:	80 93 d0 0d 	sts	0x0DD0, r24
		lcd_wr_char(hundred);
    1f0a:	80 91 d0 0d 	lds	r24, 0x0DD0
    1f0e:	90 91 d1 0d 	lds	r25, 0x0DD1
    1f12:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_wr_char>
		flag=1;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    1f1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1e:	82 30       	cpi	r24, 0x02	; 2
    1f20:	91 05       	cpc	r25, r1
    1f22:	19 f0       	breq	.+6      	; 0x1f2a <lcd_number+0x12e>
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	81 30       	cpi	r24, 0x01	; 1
    1f28:	11 f5       	brne	.+68     	; 0x1f6e <lcd_number+0x172>
	{
		temp = value/10;
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2e:	2a e0       	ldi	r18, 0x0A	; 10
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	b9 01       	movw	r22, r18
    1f34:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <__udivmodhi4>
    1f38:	cb 01       	movw	r24, r22
    1f3a:	90 93 86 03 	sts	0x0386, r25
    1f3e:	80 93 85 03 	sts	0x0385, r24
		tens = temp%10 + 48;
    1f42:	80 91 85 03 	lds	r24, 0x0385
    1f46:	90 91 86 03 	lds	r25, 0x0386
    1f4a:	2a e0       	ldi	r18, 0x0A	; 10
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	b9 01       	movw	r22, r18
    1f50:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <__udivmodhi4>
    1f54:	c0 96       	adiw	r24, 0x30	; 48
    1f56:	90 93 b7 0d 	sts	0x0DB7, r25
    1f5a:	80 93 b6 0d 	sts	0x0DB6, r24
		lcd_wr_char(tens);
    1f5e:	80 91 b6 0d 	lds	r24, 0x0DB6
    1f62:	90 91 b7 0d 	lds	r25, 0x0DB7
    1f66:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_wr_char>
		flag=1;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f70:	9f 81       	ldd	r25, Y+7	; 0x07
    1f72:	81 30       	cpi	r24, 0x01	; 1
    1f74:	91 05       	cpc	r25, r1
    1f76:	19 f0       	breq	.+6      	; 0x1f7e <lcd_number+0x182>
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	81 30       	cpi	r24, 0x01	; 1
    1f7c:	91 f4       	brne	.+36     	; 0x1fa2 <lcd_number+0x1a6>
	{
		unit = value%10 + 48;
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	9d 81       	ldd	r25, Y+5	; 0x05
    1f82:	2a e0       	ldi	r18, 0x0A	; 10
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	b9 01       	movw	r22, r18
    1f88:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <__udivmodhi4>
    1f8c:	c0 96       	adiw	r24, 0x30	; 48
    1f8e:	90 93 1e 0e 	sts	0x0E1E, r25
    1f92:	80 93 1d 0e 	sts	0x0E1D, r24
		lcd_wr_char(unit);
    1f96:	80 91 1d 0e 	lds	r24, 0x0E1D
    1f9a:	90 91 1e 0e 	lds	r25, 0x0E1E
    1f9e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_wr_char>
	}
	if(digits>5)
    1fa2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa6:	86 30       	cpi	r24, 0x06	; 6
    1fa8:	91 05       	cpc	r25, r1
    1faa:	1c f0       	brlt	.+6      	; 0x1fb2 <lcd_number+0x1b6>
	{
		lcd_wr_char('E');
    1fac:	85 e4       	ldi	r24, 0x45	; 69
    1fae:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_wr_char>
	}
	
}
    1fb2:	27 96       	adiw	r28, 0x07	; 7
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <clear>:

void clear()
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
lcd_cursor(1,1);
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	61 e0       	ldi	r22, 0x01	; 1
    1fd0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <lcd_cursor>
lcd_string("                ");
    1fd4:	81 e1       	ldi	r24, 0x11	; 17
    1fd6:	92 e0       	ldi	r25, 0x02	; 2
    1fd8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>

lcd_cursor(2,1);
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	61 e0       	ldi	r22, 0x01	; 1
    1fe0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <lcd_cursor>
lcd_string("                ");
    1fe4:	81 e1       	ldi	r24, 0x11	; 17
    1fe6:	92 e0       	ldi	r25, 0x02	; 2
    1fe8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>
lcd_cursor(1,1);
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	61 e0       	ldi	r22, 0x01	; 1
    1ff0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <lcd_cursor>

}
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <init_devices_lcd>:
void init_devices_lcd (void)
{
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    2002:	f8 94       	cli
 port_init();
    2004:	0e 94 3a 06 	call	0xc74	; 0xc74 <port_init>
 sei();   //Enables the global interrupts
    2008:	78 94       	sei
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <servo_pin_config>:

//--------------------------------------------------------------------------------
//port initialisation for Servos i/p's												
//--------------------------------------------------------------------------------																			
void servo_pin_config (void)
{ 
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
 DDRJ  = 0xFE;    //PJ 1,2,3,4,5,6,7 as output
    2018:	e4 e0       	ldi	r30, 0x04	; 4
    201a:	f1 e0       	ldi	r31, 0x01	; 1
    201c:	8e ef       	ldi	r24, 0xFE	; 254
    201e:	80 83       	st	Z, r24
 PORTJ = 0x00;
    2020:	e5 e0       	ldi	r30, 0x05	; 5
    2022:	f1 e0       	ldi	r31, 0x01	; 1
    2024:	10 82       	st	Z, r1
}
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <reset_servo2>:

//--------------------------------------------------------------------------------
// reset & set function of servos
//--------------------------------------------------------------------------------
void reset_servo2 (void)
{ PORTJ = PORTJ & 0xFD; }
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	a5 e0       	ldi	r26, 0x05	; 5
    2036:	b1 e0       	ldi	r27, 0x01	; 1
    2038:	e5 e0       	ldi	r30, 0x05	; 5
    203a:	f1 e0       	ldi	r31, 0x01	; 1
    203c:	80 81       	ld	r24, Z
    203e:	8d 7f       	andi	r24, 0xFD	; 253
    2040:	8c 93       	st	X, r24
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <set_servo2>:

void set_servo2 (void)
{ PORTJ = PORTJ | 0x02; }
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	a5 e0       	ldi	r26, 0x05	; 5
    2052:	b1 e0       	ldi	r27, 0x01	; 1
    2054:	e5 e0       	ldi	r30, 0x05	; 5
    2056:	f1 e0       	ldi	r31, 0x01	; 1
    2058:	80 81       	ld	r24, Z
    205a:	82 60       	ori	r24, 0x02	; 2
    205c:	8c 93       	st	X, r24
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <reset_servo3>:

void reset_servo3 (void)
{ PORTJ = PORTJ & 0xFB; }
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	a5 e0       	ldi	r26, 0x05	; 5
    206e:	b1 e0       	ldi	r27, 0x01	; 1
    2070:	e5 e0       	ldi	r30, 0x05	; 5
    2072:	f1 e0       	ldi	r31, 0x01	; 1
    2074:	80 81       	ld	r24, Z
    2076:	8b 7f       	andi	r24, 0xFB	; 251
    2078:	8c 93       	st	X, r24
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <set_servo3>:

void set_servo3 (void)
{ PORTJ = PORTJ | 0x04; }
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	a5 e0       	ldi	r26, 0x05	; 5
    208a:	b1 e0       	ldi	r27, 0x01	; 1
    208c:	e5 e0       	ldi	r30, 0x05	; 5
    208e:	f1 e0       	ldi	r31, 0x01	; 1
    2090:	80 81       	ld	r24, Z
    2092:	84 60       	ori	r24, 0x04	; 4
    2094:	8c 93       	st	X, r24
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <reset_servo4>:

void reset_servo4 (void)
{ PORTJ = PORTJ & 0xF7; }
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	a5 e0       	ldi	r26, 0x05	; 5
    20a6:	b1 e0       	ldi	r27, 0x01	; 1
    20a8:	e5 e0       	ldi	r30, 0x05	; 5
    20aa:	f1 e0       	ldi	r31, 0x01	; 1
    20ac:	80 81       	ld	r24, Z
    20ae:	87 7f       	andi	r24, 0xF7	; 247
    20b0:	8c 93       	st	X, r24
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <set_servo4>:

void set_servo4 (void)
{ PORTJ = PORTJ | 0x08; }
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	a5 e0       	ldi	r26, 0x05	; 5
    20c2:	b1 e0       	ldi	r27, 0x01	; 1
    20c4:	e5 e0       	ldi	r30, 0x05	; 5
    20c6:	f1 e0       	ldi	r31, 0x01	; 1
    20c8:	80 81       	ld	r24, Z
    20ca:	88 60       	ori	r24, 0x08	; 8
    20cc:	8c 93       	st	X, r24
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <reset_servo5>:

void reset_servo5 (void)
{ PORTJ = PORTJ & 0xEF; }
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	a5 e0       	ldi	r26, 0x05	; 5
    20de:	b1 e0       	ldi	r27, 0x01	; 1
    20e0:	e5 e0       	ldi	r30, 0x05	; 5
    20e2:	f1 e0       	ldi	r31, 0x01	; 1
    20e4:	80 81       	ld	r24, Z
    20e6:	8f 7e       	andi	r24, 0xEF	; 239
    20e8:	8c 93       	st	X, r24
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <set_servo5>:

void set_servo5 (void)
{ PORTJ = PORTJ | 0x10; }
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	a5 e0       	ldi	r26, 0x05	; 5
    20fa:	b1 e0       	ldi	r27, 0x01	; 1
    20fc:	e5 e0       	ldi	r30, 0x05	; 5
    20fe:	f1 e0       	ldi	r31, 0x01	; 1
    2100:	80 81       	ld	r24, Z
    2102:	80 61       	ori	r24, 0x10	; 16
    2104:	8c 93       	st	X, r24
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <reset_servo6>:
void reset_servo6 (void)
{ PORTJ = PORTJ & 0xDF; }
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	a5 e0       	ldi	r26, 0x05	; 5
    2116:	b1 e0       	ldi	r27, 0x01	; 1
    2118:	e5 e0       	ldi	r30, 0x05	; 5
    211a:	f1 e0       	ldi	r31, 0x01	; 1
    211c:	80 81       	ld	r24, Z
    211e:	8f 7d       	andi	r24, 0xDF	; 223
    2120:	8c 93       	st	X, r24
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <set_servo6>:

void set_servo6 (void)
{ PORTJ = PORTJ | 0x20; }
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	a5 e0       	ldi	r26, 0x05	; 5
    2132:	b1 e0       	ldi	r27, 0x01	; 1
    2134:	e5 e0       	ldi	r30, 0x05	; 5
    2136:	f1 e0       	ldi	r31, 0x01	; 1
    2138:	80 81       	ld	r24, Z
    213a:	80 62       	ori	r24, 0x20	; 32
    213c:	8c 93       	st	X, r24
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <reset_servo7>:

void reset_servo7 (void)
{ PORTJ = PORTJ & 0xBF; }
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	a5 e0       	ldi	r26, 0x05	; 5
    214e:	b1 e0       	ldi	r27, 0x01	; 1
    2150:	e5 e0       	ldi	r30, 0x05	; 5
    2152:	f1 e0       	ldi	r31, 0x01	; 1
    2154:	80 81       	ld	r24, Z
    2156:	8f 7b       	andi	r24, 0xBF	; 191
    2158:	8c 93       	st	X, r24
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <set_servo7>:

void set_servo7 (void)
{ PORTJ = PORTJ | 0x40; }
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	a5 e0       	ldi	r26, 0x05	; 5
    216a:	b1 e0       	ldi	r27, 0x01	; 1
    216c:	e5 e0       	ldi	r30, 0x05	; 5
    216e:	f1 e0       	ldi	r31, 0x01	; 1
    2170:	80 81       	ld	r24, Z
    2172:	80 64       	ori	r24, 0x40	; 64
    2174:	8c 93       	st	X, r24
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	08 95       	ret

0000217c <timer1_init>:
// WGM: 0) Normal, TOP=0xFFFF
// desired value: 400Hz
// actual value: 400.007Hz (0.0%) = 2.5ms
//--------------------------------------------------------------------------------
void timer1_init(void)
{ 
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    2184:	e1 e8       	ldi	r30, 0x81	; 129
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	10 82       	st	Z, r1
 TCNT1H = 0x70; //setup
    218a:	e5 e8       	ldi	r30, 0x85	; 133
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 e7       	ldi	r24, 0x70	; 112
    2190:	80 83       	st	Z, r24
 TCNT1L = 0x01;
    2192:	e4 e8       	ldi	r30, 0x84	; 132
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	80 83       	st	Z, r24
 OCR1AH = 0x8F;
    219a:	e9 e8       	ldi	r30, 0x89	; 137
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	8f e8       	ldi	r24, 0x8F	; 143
    21a0:	80 83       	st	Z, r24
 OCR1AL = 0xFF;
    21a2:	e8 e8       	ldi	r30, 0x88	; 136
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	8f ef       	ldi	r24, 0xFF	; 255
    21a8:	80 83       	st	Z, r24
 OCR1BH = 0x8F;
    21aa:	eb e8       	ldi	r30, 0x8B	; 139
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	8f e8       	ldi	r24, 0x8F	; 143
    21b0:	80 83       	st	Z, r24
 OCR1BL = 0xFF;
    21b2:	ea e8       	ldi	r30, 0x8A	; 138
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	8f ef       	ldi	r24, 0xFF	; 255
    21b8:	80 83       	st	Z, r24
 OCR1CH = 0x00;
    21ba:	ed e8       	ldi	r30, 0x8D	; 141
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	10 82       	st	Z, r1
 OCR1CL = 0x00;
    21c0:	ec e8       	ldi	r30, 0x8C	; 140
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	10 82       	st	Z, r1
 ICR1H  = 0x8F;
    21c6:	e7 e8       	ldi	r30, 0x87	; 135
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	8f e8       	ldi	r24, 0x8F	; 143
    21cc:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
    21ce:	e6 e8       	ldi	r30, 0x86	; 134
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	80 83       	st	Z, r24
 TCCR1A = 0x00;
    21d6:	e0 e8       	ldi	r30, 0x80	; 128
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	10 82       	st	Z, r1
 TCCR1C = 0x00;
    21dc:	e2 e8       	ldi	r30, 0x82	; 130
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	10 82       	st	Z, r1
 TCCR1B = 0x01; //start Timer
    21e2:	e1 e8       	ldi	r30, 0x81	; 129
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	80 83       	st	Z, r24
}
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <__vector_17>:
//--------------------------------------------------------------------------------
// timer1 comparatorA match with timer register ISR,
// This ISR used for reset servo on set number 
//--------------------------------------------------------------------------------
ISR(TIMER1_COMPA_vect)
{
    21f0:	1f 92       	push	r1
    21f2:	0f 92       	push	r0
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	0f 92       	push	r0
    21f8:	11 24       	eor	r1, r1
    21fa:	2f 93       	push	r18
    21fc:	3f 93       	push	r19
    21fe:	4f 93       	push	r20
    2200:	5f 93       	push	r21
    2202:	6f 93       	push	r22
    2204:	7f 93       	push	r23
    2206:	8f 93       	push	r24
    2208:	9f 93       	push	r25
    220a:	af 93       	push	r26
    220c:	bf 93       	push	r27
    220e:	ef 93       	push	r30
    2210:	ff 93       	push	r31
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
 //compare occured TCNT1=OCR1A
 if (set_number == 0) { reset_servo2(); }
    221a:	80 91 04 03 	lds	r24, 0x0304
    221e:	88 23       	and	r24, r24
    2220:	11 f4       	brne	.+4      	; 0x2226 <__stack+0x27>
    2222:	0e 94 16 10 	call	0x202c	; 0x202c <reset_servo2>
 if (set_number == 1) { reset_servo3(); }
    2226:	80 91 04 03 	lds	r24, 0x0304
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	11 f4       	brne	.+4      	; 0x2232 <__stack+0x33>
    222e:	0e 94 32 10 	call	0x2064	; 0x2064 <reset_servo3>
}
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	ff 91       	pop	r31
    2238:	ef 91       	pop	r30
    223a:	bf 91       	pop	r27
    223c:	af 91       	pop	r26
    223e:	9f 91       	pop	r25
    2240:	8f 91       	pop	r24
    2242:	7f 91       	pop	r23
    2244:	6f 91       	pop	r22
    2246:	5f 91       	pop	r21
    2248:	4f 91       	pop	r20
    224a:	3f 91       	pop	r19
    224c:	2f 91       	pop	r18
    224e:	0f 90       	pop	r0
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	0f 90       	pop	r0
    2254:	1f 90       	pop	r1
    2256:	18 95       	reti

00002258 <__vector_18>:
//--------------------------------------------------------------------------------
// timer1 comparatorB match with timer register ISR,
// This ISR used for reset servo set number
//--------------------------------------------------------------------------------
ISR(TIMER1_COMPB_vect)
{
    2258:	1f 92       	push	r1
    225a:	0f 92       	push	r0
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	0f 92       	push	r0
    2260:	11 24       	eor	r1, r1
    2262:	2f 93       	push	r18
    2264:	3f 93       	push	r19
    2266:	4f 93       	push	r20
    2268:	5f 93       	push	r21
    226a:	6f 93       	push	r22
    226c:	7f 93       	push	r23
    226e:	8f 93       	push	r24
    2270:	9f 93       	push	r25
    2272:	af 93       	push	r26
    2274:	bf 93       	push	r27
    2276:	ef 93       	push	r30
    2278:	ff 93       	push	r31
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
 //compare occured TCNT1=OCR1B
 if (set_number == 0) { reset_servo4(); }
    2282:	80 91 04 03 	lds	r24, 0x0304
    2286:	88 23       	and	r24, r24
    2288:	11 f4       	brne	.+4      	; 0x228e <__vector_18+0x36>
    228a:	0e 94 4e 10 	call	0x209c	; 0x209c <reset_servo4>
 if (set_number == 1) { reset_servo5(); }
    228e:	80 91 04 03 	lds	r24, 0x0304
    2292:	81 30       	cpi	r24, 0x01	; 1
    2294:	11 f4       	brne	.+4      	; 0x229a <__vector_18+0x42>
    2296:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <reset_servo5>
}
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	ff 91       	pop	r31
    22a0:	ef 91       	pop	r30
    22a2:	bf 91       	pop	r27
    22a4:	af 91       	pop	r26
    22a6:	9f 91       	pop	r25
    22a8:	8f 91       	pop	r24
    22aa:	7f 91       	pop	r23
    22ac:	6f 91       	pop	r22
    22ae:	5f 91       	pop	r21
    22b0:	4f 91       	pop	r20
    22b2:	3f 91       	pop	r19
    22b4:	2f 91       	pop	r18
    22b6:	0f 90       	pop	r0
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	0f 90       	pop	r0
    22bc:	1f 90       	pop	r1
    22be:	18 95       	reti

000022c0 <__vector_19>:
//--------------------------------------------------------------------------------
// timer1 comparatorC match with timer register ISR,
// This ISR used for reset servo set number
//--------------------------------------------------------------------------------
ISR(TIMER1_COMPC_vect)
{
    22c0:	1f 92       	push	r1
    22c2:	0f 92       	push	r0
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	0f 92       	push	r0
    22c8:	11 24       	eor	r1, r1
    22ca:	2f 93       	push	r18
    22cc:	3f 93       	push	r19
    22ce:	4f 93       	push	r20
    22d0:	5f 93       	push	r21
    22d2:	6f 93       	push	r22
    22d4:	7f 93       	push	r23
    22d6:	8f 93       	push	r24
    22d8:	9f 93       	push	r25
    22da:	af 93       	push	r26
    22dc:	bf 93       	push	r27
    22de:	ef 93       	push	r30
    22e0:	ff 93       	push	r31
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
 //compare occured TCNT1=OCR1c
 if (set_number == 0) { reset_servo6(); }
    22ea:	80 91 04 03 	lds	r24, 0x0304
    22ee:	88 23       	and	r24, r24
    22f0:	11 f4       	brne	.+4      	; 0x22f6 <__vector_19+0x36>
    22f2:	0e 94 86 10 	call	0x210c	; 0x210c <reset_servo6>
 if (set_number == 1) { reset_servo7(); }
    22f6:	80 91 04 03 	lds	r24, 0x0304
    22fa:	81 30       	cpi	r24, 0x01	; 1
    22fc:	11 f4       	brne	.+4      	; 0x2302 <__vector_19+0x42>
    22fe:	0e 94 a2 10 	call	0x2144	; 0x2144 <reset_servo7>
}
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	ff 91       	pop	r31
    2308:	ef 91       	pop	r30
    230a:	bf 91       	pop	r27
    230c:	af 91       	pop	r26
    230e:	9f 91       	pop	r25
    2310:	8f 91       	pop	r24
    2312:	7f 91       	pop	r23
    2314:	6f 91       	pop	r22
    2316:	5f 91       	pop	r21
    2318:	4f 91       	pop	r20
    231a:	3f 91       	pop	r19
    231c:	2f 91       	pop	r18
    231e:	0f 90       	pop	r0
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	0f 90       	pop	r0
    2324:	1f 90       	pop	r1
    2326:	18 95       	reti

00002328 <__vector_20>:
// This ISR can be used to load the PWM value. Here Servo motors move between 0 to
// 180 degrees proportional to the pulse train with the on time of 1 to 2 ms with
// the frequency between 40 to 60 Hz. ie. 400Hz/8 = 50Hz
//--------------------------------------------------------------------------------
ISR(TIMER1_OVF_vect)
{
    2328:	1f 92       	push	r1
    232a:	0f 92       	push	r0
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	0f 92       	push	r0
    2330:	11 24       	eor	r1, r1
    2332:	2f 93       	push	r18
    2334:	3f 93       	push	r19
    2336:	4f 93       	push	r20
    2338:	5f 93       	push	r21
    233a:	6f 93       	push	r22
    233c:	7f 93       	push	r23
    233e:	8f 93       	push	r24
    2340:	9f 93       	push	r25
    2342:	af 93       	push	r26
    2344:	bf 93       	push	r27
    2346:	ef 93       	push	r30
    2348:	ff 93       	push	r31
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
 //TIMER1 has overflowed
 TCNT1H = 0x70; //reload counter high value	for 400Hz	
    2352:	e5 e8       	ldi	r30, 0x85	; 133
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 e7       	ldi	r24, 0x70	; 112
    2358:	80 83       	st	Z, r24
 TCNT1L = 0x01; //reload counter low value for 400Hz
    235a:	e4 e8       	ldi	r30, 0x84	; 132
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	80 83       	st	Z, r24

 set_number ++;
    2362:	80 91 04 03 	lds	r24, 0x0304
    2366:	8f 5f       	subi	r24, 0xFF	; 255
    2368:	80 93 04 03 	sts	0x0304, r24

 if (set_number>7)     				// 400Hz/8 = 50Hz
    236c:	80 91 04 03 	lds	r24, 0x0304
    2370:	88 30       	cpi	r24, 0x08	; 8
    2372:	10 f0       	brcs	.+4      	; 0x2378 <__vector_20+0x50>
 {
  	set_number = 0;
    2374:	10 92 04 03 	sts	0x0304, r1
 }

 if (set_number == 0)               // 1st set of servo motor
    2378:	80 91 04 03 	lds	r24, 0x0304
    237c:	88 23       	and	r24, r24
    237e:	21 f5       	brne	.+72     	; 0x23c8 <__vector_20+0xa0>
 {
  set_servo2(); 
    2380:	0e 94 24 10 	call	0x2048	; 0x2048 <set_servo2>
  set_servo4(); 
    2384:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <set_servo4>
  set_servo6();
    2388:	0e 94 94 10 	call	0x2128	; 0x2128 <set_servo6>
  OCR1AH = angle_upper_byte_servo2;
    238c:	e9 e8       	ldi	r30, 0x89	; 137
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 91 d2 0d 	lds	r24, 0x0DD2
    2394:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_servo2;
    2396:	e8 e8       	ldi	r30, 0x88	; 136
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 91 b9 0d 	lds	r24, 0x0DB9
    239e:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_servo4;
    23a0:	eb e8       	ldi	r30, 0x8B	; 139
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 91 7e 03 	lds	r24, 0x037E
    23a8:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_servo4;
    23aa:	ea e8       	ldi	r30, 0x8A	; 138
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 91 8c 03 	lds	r24, 0x038C
    23b2:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_servo6;
    23b4:	ed e8       	ldi	r30, 0x8D	; 141
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 91 b3 0d 	lds	r24, 0x0DB3
    23bc:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_servo6;
    23be:	ec e8       	ldi	r30, 0x8C	; 140
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 91 90 03 	lds	r24, 0x0390
    23c6:	80 83       	st	Z, r24
 }
 
 if (set_number == 1)               // 2nd set of servo motor   
    23c8:	80 91 04 03 	lds	r24, 0x0304
    23cc:	81 30       	cpi	r24, 0x01	; 1
    23ce:	21 f5       	brne	.+72     	; 0x2418 <__vector_20+0xf0>
 {
  set_servo3(); 
    23d0:	0e 94 40 10 	call	0x2080	; 0x2080 <set_servo3>
  set_servo5(); 
    23d4:	0e 94 78 10 	call	0x20f0	; 0x20f0 <set_servo5>
  set_servo7();
    23d8:	0e 94 b0 10 	call	0x2160	; 0x2160 <set_servo7>
  OCR1AH = angle_upper_byte_servo3;
    23dc:	e9 e8       	ldi	r30, 0x89	; 137
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 91 87 03 	lds	r24, 0x0387
    23e4:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_servo3;
    23e6:	e8 e8       	ldi	r30, 0x88	; 136
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 91 d3 0d 	lds	r24, 0x0DD3
    23ee:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_servo5;
    23f0:	eb e8       	ldi	r30, 0x8B	; 139
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 91 b4 0d 	lds	r24, 0x0DB4
    23f8:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_servo5;
    23fa:	ea e8       	ldi	r30, 0x8A	; 138
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 91 b5 0d 	lds	r24, 0x0DB5
    2402:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_servo7;
    2404:	ed e8       	ldi	r30, 0x8D	; 141
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 91 b8 0d 	lds	r24, 0x0DB8
    240c:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_servo7;
    240e:	ec e8       	ldi	r30, 0x8C	; 140
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 91 1c 0e 	lds	r24, 0x0E1C
    2416:	80 83       	st	Z, r24
 }
 
}
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	ff 91       	pop	r31
    241e:	ef 91       	pop	r30
    2420:	bf 91       	pop	r27
    2422:	af 91       	pop	r26
    2424:	9f 91       	pop	r25
    2426:	8f 91       	pop	r24
    2428:	7f 91       	pop	r23
    242a:	6f 91       	pop	r22
    242c:	5f 91       	pop	r21
    242e:	4f 91       	pop	r20
    2430:	3f 91       	pop	r19
    2432:	2f 91       	pop	r18
    2434:	0f 90       	pop	r0
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	0f 90       	pop	r0
    243a:	1f 90       	pop	r1
    243c:	18 95       	reti

0000243e <angle_value_calculation>:

//--------------------------------------------------------------------------------
// function for angular movement calculation
//--------------------------------------------------------------------------------
void angle_value_calculation (void)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	00 d0       	rcall	.+0      	; 0x2444 <angle_value_calculation+0x6>
    2444:	00 d0       	rcall	.+0      	; 0x2446 <angle_value_calculation+0x8>
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
 unsigned int angle_value = 0;
    244a:	1c 82       	std	Y+4, r1	; 0x04
    244c:	1b 82       	std	Y+3, r1	; 0x03
 unsigned int temp = 0;
    244e:	1a 82       	std	Y+2, r1	; 0x02
    2450:	19 82       	std	Y+1, r1	; 0x01

 if (degree > 180)
    2452:	80 91 07 03 	lds	r24, 0x0307
    2456:	85 3b       	cpi	r24, 0xB5	; 181
    2458:	18 f0       	brcs	.+6      	; 0x2460 <angle_value_calculation+0x22>
 degree = 180; // limiting the scope of the servo rotation
    245a:	84 eb       	ldi	r24, 0xB4	; 180
    245c:	80 93 07 03 	sts	0x0307, r24

 //angle_value = 0xA240 + (89 * (unsigned char) degree); //for 1ms to 2 ms for 0 to 180degree  //16MHz
 //angle_value = 41536 + (89 * (unsigned char) degree);  //for 1ms to 2 ms for 0 to 180degree//16MHz
													     // actual constant is 88.88  
 //angle_value = 0xA999 + (81 * (unsigned char) degree); //for 1ms to 2 ms for 0 to 180degree // 14.4756MHz
 angle_value = 43417 + (81 * (unsigned char) degree);    //for 1ms to 2 ms for 0 to 180degree // 14.4756MHz
    2460:	80 91 07 03 	lds	r24, 0x0307
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	c9 01       	movw	r24, r18
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	82 0f       	add	r24, r18
    2478:	93 1f       	adc	r25, r19
    247a:	9c 01       	movw	r18, r24
    247c:	22 0f       	add	r18, r18
    247e:	33 1f       	adc	r19, r19
    2480:	22 0f       	add	r18, r18
    2482:	33 1f       	adc	r19, r19
    2484:	22 0f       	add	r18, r18
    2486:	33 1f       	adc	r19, r19
    2488:	82 0f       	add	r24, r18
    248a:	93 1f       	adc	r25, r19
    248c:	87 56       	subi	r24, 0x67	; 103
    248e:	96 45       	sbci	r25, 0x56	; 86
    2490:	9c 83       	std	Y+4, r25	; 0x04
    2492:	8b 83       	std	Y+3, r24	; 0x03
													     //actual constant is 81.91
														  
 angle_lower_byte = (unsigned char) angle_value;         //separating the lower byte
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	80 93 06 03 	sts	0x0306, r24
 
 temp = angle_value >> 8;
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	9c 81       	ldd	r25, Y+4	; 0x04
    249e:	89 2f       	mov	r24, r25
    24a0:	99 27       	eor	r25, r25
    24a2:	9a 83       	std	Y+2, r25	; 0x02
    24a4:	89 83       	std	Y+1, r24	; 0x01
 angle_upper_byte = (unsigned char) temp;                //separating the upper byte
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	80 93 05 03 	sts	0x0305, r24
}
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <angle_servo2>:
// Function for individual servo angle calculation call with degree as parameter & 
// store into respective variables. 
//--------------------------------------------------------------------------------

void angle_servo2 (unsigned char angle)                // for servo2 
{
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	0f 92       	push	r0
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	80 93 07 03 	sts	0x0307, r24
 angle_value_calculation();
    24cc:	0e 94 1f 12 	call	0x243e	; 0x243e <angle_value_calculation>
 angle_upper_byte_servo2 = angle_upper_byte;
    24d0:	80 91 05 03 	lds	r24, 0x0305
    24d4:	80 93 d2 0d 	sts	0x0DD2, r24
 angle_lower_byte_servo2 = angle_lower_byte;
    24d8:	80 91 06 03 	lds	r24, 0x0306
    24dc:	80 93 b9 0d 	sts	0x0DB9, r24
}
    24e0:	0f 90       	pop	r0
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <angle_servo3>:

void angle_servo3 (unsigned char angle)                // for servo3 
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	0f 92       	push	r0
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	80 93 07 03 	sts	0x0307, r24
 angle_value_calculation();
    24fa:	0e 94 1f 12 	call	0x243e	; 0x243e <angle_value_calculation>
 angle_upper_byte_servo3 = angle_upper_byte;
    24fe:	80 91 05 03 	lds	r24, 0x0305
    2502:	80 93 87 03 	sts	0x0387, r24
 angle_lower_byte_servo3 = angle_lower_byte;
    2506:	80 91 06 03 	lds	r24, 0x0306
    250a:	80 93 d3 0d 	sts	0x0DD3, r24
}
    250e:	0f 90       	pop	r0
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <angle_servo4>:

void angle_servo4 (unsigned char angle)                // for servo4 
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	0f 92       	push	r0
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	80 93 07 03 	sts	0x0307, r24
 angle_value_calculation();
    2528:	0e 94 1f 12 	call	0x243e	; 0x243e <angle_value_calculation>
 angle_upper_byte_servo4 = angle_upper_byte;
    252c:	80 91 05 03 	lds	r24, 0x0305
    2530:	80 93 7e 03 	sts	0x037E, r24
 angle_lower_byte_servo4 = angle_lower_byte;
    2534:	80 91 06 03 	lds	r24, 0x0306
    2538:	80 93 8c 03 	sts	0x038C, r24
}
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <angle_servo5>:

void angle_servo5 (unsigned char angle)                // for servo5 
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	0f 92       	push	r0
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	80 93 07 03 	sts	0x0307, r24
 angle_value_calculation();
    2556:	0e 94 1f 12 	call	0x243e	; 0x243e <angle_value_calculation>
 angle_upper_byte_servo5 = angle_upper_byte;
    255a:	80 91 05 03 	lds	r24, 0x0305
    255e:	80 93 b4 0d 	sts	0x0DB4, r24
 angle_lower_byte_servo5 = angle_lower_byte;
    2562:	80 91 06 03 	lds	r24, 0x0306
    2566:	80 93 b5 0d 	sts	0x0DB5, r24
}
    256a:	0f 90       	pop	r0
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <angle_servo6>:

void angle_servo6 (unsigned char angle)                // for servo6 
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	0f 92       	push	r0
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	80 93 07 03 	sts	0x0307, r24
 angle_value_calculation();
    2584:	0e 94 1f 12 	call	0x243e	; 0x243e <angle_value_calculation>
 angle_upper_byte_servo6 = angle_upper_byte;
    2588:	80 91 05 03 	lds	r24, 0x0305
    258c:	80 93 b3 0d 	sts	0x0DB3, r24
 angle_lower_byte_servo6 = angle_lower_byte;
    2590:	80 91 06 03 	lds	r24, 0x0306
    2594:	80 93 90 03 	sts	0x0390, r24
}
    2598:	0f 90       	pop	r0
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <angle_servo7>:

void angle_servo7 (unsigned char angle)                // for servo7
{
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	0f 92       	push	r0
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	80 93 07 03 	sts	0x0307, r24
 angle_value_calculation();
    25b2:	0e 94 1f 12 	call	0x243e	; 0x243e <angle_value_calculation>
 angle_upper_byte_servo7 = angle_upper_byte;
    25b6:	80 91 05 03 	lds	r24, 0x0305
    25ba:	80 93 b8 0d 	sts	0x0DB8, r24
 angle_lower_byte_servo7 = angle_lower_byte;
    25be:	80 91 06 03 	lds	r24, 0x0306
    25c2:	80 93 1c 0e 	sts	0x0E1C, r24
}
    25c6:	0f 90       	pop	r0
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <init_devices_servo>:

//--------------------------------------------------------------------------------
//call this routine to initialize all peripherals
//--------------------------------------------------------------------------------
void init_devices_servo(void)
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli();                                // disable all interrupts
    25d6:	f8 94       	cli

 servo_pin_config();                   // servo configuration 
    25d8:	0e 94 08 10 	call	0x2010	; 0x2010 <servo_pin_config>
 timer1_init();                        // initilize timer1
    25dc:	0e 94 be 10 	call	0x217c	; 0x217c <timer1_init>

 TIMSK1 = 0x0F;                        // timer1 interrupt sources
    25e0:	ef e6       	ldi	r30, 0x6F	; 111
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	8f e0       	ldi	r24, 0x0F	; 15
    25e6:	80 83       	st	Z, r24
 
 sei(); //re-enable interrupts
    25e8:	78 94       	sei
 //all peripherals are now initialized
}
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <down>:


void down()
{
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
angle_servo2(164);
    25f8:	84 ea       	ldi	r24, 0xA4	; 164
    25fa:	0e 94 5d 12 	call	0x24ba	; 0x24ba <angle_servo2>
angle_servo3(164);
    25fe:	84 ea       	ldi	r24, 0xA4	; 164
    2600:	0e 94 74 12 	call	0x24e8	; 0x24e8 <angle_servo3>
}
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	08 95       	ret

0000260a <up>:
void up()
{
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
 angle_servo2(120); 
    2612:	88 e7       	ldi	r24, 0x78	; 120
    2614:	0e 94 5d 12 	call	0x24ba	; 0x24ba <angle_servo2>
 angle_servo3(120);
    2618:	88 e7       	ldi	r24, 0x78	; 120
    261a:	0e 94 74 12 	call	0x24e8	; 0x24e8 <angle_servo3>
}
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <release>:
void release()
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
angle_servo4(0);
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	0e 94 8b 12 	call	0x2516	; 0x2516 <angle_servo4>
 angle_servo5(180);
    2632:	84 eb       	ldi	r24, 0xB4	; 180
    2634:	0e 94 a2 12 	call	0x2544	; 0x2544 <angle_servo5>
}
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <grab>:
void grab()
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
 angle_servo4(140);
    2646:	8c e8       	ldi	r24, 0x8C	; 140
    2648:	0e 94 8b 12 	call	0x2516	; 0x2516 <angle_servo4>
  angle_servo6(30);
    264c:	8e e1       	ldi	r24, 0x1E	; 30
    264e:	0e 94 b9 12 	call	0x2572	; 0x2572 <angle_servo6>
  angle_servo5(30);
    2652:	8e e1       	ldi	r24, 0x1E	; 30
    2654:	0e 94 a2 12 	call	0x2544	; 0x2544 <angle_servo5>
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <port_init_motor>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

void port_init_motor (void)
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;    //set direction of the PORTA 3 to PORTA 0 pins as output
    2666:	a1 e2       	ldi	r26, 0x21	; 33
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e1 e2       	ldi	r30, 0x21	; 33
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	8f 60       	ori	r24, 0x0F	; 15
    2672:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;  // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
    2674:	a2 e2       	ldi	r26, 0x22	; 34
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	e2 e2       	ldi	r30, 0x22	; 34
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	80 7f       	andi	r24, 0xF0	; 240
    2680:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;    //Setting PL3 and PL4 pins as output for PWM generation
    2682:	aa e0       	ldi	r26, 0x0A	; 10
    2684:	b1 e0       	ldi	r27, 0x01	; 1
    2686:	ea e0       	ldi	r30, 0x0A	; 10
    2688:	f1 e0       	ldi	r31, 0x01	; 1
    268a:	80 81       	ld	r24, Z
    268c:	88 61       	ori	r24, 0x18	; 24
    268e:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18;  //PL3 and PL4 pins are for velocity control using PWM
    2690:	ab e0       	ldi	r26, 0x0B	; 11
    2692:	b1 e0       	ldi	r27, 0x01	; 1
    2694:	eb e0       	ldi	r30, 0x0B	; 11
    2696:	f1 e0       	ldi	r31, 0x01	; 1
    2698:	80 81       	ld	r24, Z
    269a:	88 61       	ori	r24, 0x18	; 24
    269c:	8c 93       	st	X, r24
}
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <timer5_init>:

//TIMER5 initialize - prescale:1024
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// timer5 value: 56.250Hz
void timer5_init(void)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
 TCCR5B = 0x00; //stop
    26ac:	e1 e2       	ldi	r30, 0x21	; 33
    26ae:	f1 e0       	ldi	r31, 0x01	; 1
    26b0:	10 82       	st	Z, r1
 TCNT5H = 0xFF; //setup
    26b2:	e5 e2       	ldi	r30, 0x25	; 37
    26b4:	f1 e0       	ldi	r31, 0x01	; 1
    26b6:	8f ef       	ldi	r24, 0xFF	; 255
    26b8:	80 83       	st	Z, r24
 TCNT5L = 0x01;
    26ba:	e4 e2       	ldi	r30, 0x24	; 36
    26bc:	f1 e0       	ldi	r31, 0x01	; 1
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	80 83       	st	Z, r24
 OCR5AH = 0x00;
    26c2:	e9 e2       	ldi	r30, 0x29	; 41
    26c4:	f1 e0       	ldi	r31, 0x01	; 1
    26c6:	10 82       	st	Z, r1
 OCR5AL = 0xFF;
    26c8:	e8 e2       	ldi	r30, 0x28	; 40
    26ca:	f1 e0       	ldi	r31, 0x01	; 1
    26cc:	8f ef       	ldi	r24, 0xFF	; 255
    26ce:	80 83       	st	Z, r24
 OCR5BH = 0x00;
    26d0:	eb e2       	ldi	r30, 0x2B	; 43
    26d2:	f1 e0       	ldi	r31, 0x01	; 1
    26d4:	10 82       	st	Z, r1
 OCR5BL = 0xFF;
    26d6:	ea e2       	ldi	r30, 0x2A	; 42
    26d8:	f1 e0       	ldi	r31, 0x01	; 1
    26da:	8f ef       	ldi	r24, 0xFF	; 255
    26dc:	80 83       	st	Z, r24
 OCR5CH = 0x00;
    26de:	ed e2       	ldi	r30, 0x2D	; 45
    26e0:	f1 e0       	ldi	r31, 0x01	; 1
    26e2:	10 82       	st	Z, r1
 OCR5CL = 0xFF;
    26e4:	ec e2       	ldi	r30, 0x2C	; 44
    26e6:	f1 e0       	ldi	r31, 0x01	; 1
    26e8:	8f ef       	ldi	r24, 0xFF	; 255
    26ea:	80 83       	st	Z, r24
 ICR5H  = 0x00;
    26ec:	e7 e2       	ldi	r30, 0x27	; 39
    26ee:	f1 e0       	ldi	r31, 0x01	; 1
    26f0:	10 82       	st	Z, r1
 ICR5L  = 0xFF;
    26f2:	e6 e2       	ldi	r30, 0x26	; 38
    26f4:	f1 e0       	ldi	r31, 0x01	; 1
    26f6:	8f ef       	ldi	r24, 0xFF	; 255
    26f8:	80 83       	st	Z, r24
 TCCR5A = 0xA9;
    26fa:	e0 e2       	ldi	r30, 0x20	; 32
    26fc:	f1 e0       	ldi	r31, 0x01	; 1
    26fe:	89 ea       	ldi	r24, 0xA9	; 169
    2700:	80 83       	st	Z, r24
 TCCR5C = 0x00;
    2702:	e2 e2       	ldi	r30, 0x22	; 34
    2704:	f1 e0       	ldi	r31, 0x01	; 1
    2706:	10 82       	st	Z, r1
 TCCR5B = 0x0D; //start Timer
    2708:	e1 e2       	ldi	r30, 0x21	; 33
    270a:	f1 e0       	ldi	r31, 0x01	; 1
    270c:	8d e0       	ldi	r24, 0x0D	; 13
    270e:	80 83       	st	Z, r24
}
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <set_PWM_value>:

// Function for robot velocity control
void set_PWM_value(unsigned char value) 	//set 8 bit PWM value
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	0f 92       	push	r0
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	89 83       	std	Y+1, r24	; 0x01
 OCR5AH = 0x00;
    2722:	e9 e2       	ldi	r30, 0x29	; 41
    2724:	f1 e0       	ldi	r31, 0x01	; 1
    2726:	10 82       	st	Z, r1
 OCR5AL = value;
    2728:	e8 e2       	ldi	r30, 0x28	; 40
    272a:	f1 e0       	ldi	r31, 0x01	; 1
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	80 83       	st	Z, r24
 OCR5BH = 0x00;
    2730:	eb e2       	ldi	r30, 0x2B	; 43
    2732:	f1 e0       	ldi	r31, 0x01	; 1
    2734:	10 82       	st	Z, r1
 OCR5BL = value;
    2736:	ea e2       	ldi	r30, 0x2A	; 42
    2738:	f1 e0       	ldi	r31, 0x01	; 1
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	80 83       	st	Z, r24
}
    273e:	0f 90       	pop	r0
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	00 d0       	rcall	.+0      	; 0x274c <motion_set+0x6>
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    2752:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	8f 70       	andi	r24, 0x0F	; 15
    2758:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 			// reading the PORTA's original status
    275a:	e2 e2       	ldi	r30, 0x22	; 34
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	80 7f       	andi	r24, 0xF0	; 240
    2766:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    2768:	99 81       	ldd	r25, Y+1	; 0x01
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	89 2b       	or	r24, r25
    276e:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 			// setting the command to the port
    2770:	e2 e2       	ldi	r30, 0x22	; 34
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	80 83       	st	Z, r24
}
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <forward>:

void forward (void) 		//both inputs forward
{  	
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
  motion_set(0b00000110);//0b00000110
    278a:	86 e0       	ldi	r24, 0x06	; 6
    278c:	0e 94 a3 13 	call	0x2746	; 0x2746 <motion_set>
}
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <back>:
void back (void) 			//both inputs backward
{ 
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
  motion_set(0b00001001); //0b00001001
    279e:	89 e0       	ldi	r24, 0x09	; 9
    27a0:	0e 94 a3 13 	call	0x2746	; 0x2746 <motion_set>
}
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <left>:

void left (void) 			//input12 backward, input34 forward
{	
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62

 motion_set(0b00000101); // 0b00000101;
    27b2:	85 e0       	ldi	r24, 0x05	; 5
    27b4:	0e 94 a3 13 	call	0x2746	; 0x2746 <motion_set>
}
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	08 95       	ret

000027be <right>:

void right (void) 			//input34 backward, input12 forward
{	
    27be:	df 93       	push	r29
    27c0:	cf 93       	push	r28
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62

  motion_set(0b00001010); //0b00001010
    27c6:	8a e0       	ldi	r24, 0x0A	; 10
    27c8:	0e 94 a3 13 	call	0x2746	; 0x2746 <motion_set>
}
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	08 95       	ret

000027d2 <soft_left>:

void soft_left (void) 		//input12 stationary, input34 forward
{	
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
 motion_set(0b00000111); //0b00000100
    27da:	87 e0       	ldi	r24, 0x07	; 7
    27dc:	0e 94 a3 13 	call	0x2746	; 0x2746 <motion_set>
}
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <soft_right>:

void soft_right (void)      //input12 forward, input34 stationary
{	
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
 motion_set(0b00001110);//0b00000010
    27ee:	8e e0       	ldi	r24, 0x0E	; 14
    27f0:	0e 94 a3 13 	call	0x2746	; 0x2746 <motion_set>
}
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <soft_left_2>:

void soft_left_2 (void)     //input12 backward, input34 stationary
{	
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
 motion_set(0b00001101); //0b00000001
    2802:	8d e0       	ldi	r24, 0x0D	; 13
    2804:	0e 94 a3 13 	call	0x2746	; 0x2746 <motion_set>
}
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <soft_right_2>:

void soft_right_2 (void)    //input12 stationary, input34 backward
{	
    280e:	df 93       	push	r29
    2810:	cf 93       	push	r28
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
 motion_set(0b00001011); //0b00001000
    2816:	8b e0       	ldi	r24, 0x0B	; 11
    2818:	0e 94 a3 13 	call	0x2746	; 0x2746 <motion_set>
}
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	08 95       	ret

00002822 <stop>:

void stop (void)            // both input stationary
{
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0F);
    282a:	8f e0       	ldi	r24, 0x0F	; 15
    282c:	0e 94 a3 13 	call	0x2746	; 0x2746 <motion_set>
}
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <init_devices_motor>:

void init_devices_motor (void)
{
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    283e:	f8 94       	cli
 port_init_motor();
    2840:	0e 94 2f 13 	call	0x265e	; 0x265e <port_init_motor>
 timer5_init();
    2844:	0e 94 52 13 	call	0x26a4	; 0x26a4 <timer5_init>
 sei(); //Enables the global interrupts
    2848:	78 94       	sei
}
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <init>:
int cas=0,ca=0,dan,dir=0;
char arr[6][6];
int count=0;

void init()
{
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
DDRK=0x00;
    2858:	e7 e0       	ldi	r30, 0x07	; 7
    285a:	f1 e0       	ldi	r31, 0x01	; 1
    285c:	10 82       	st	Z, r1
DDRH=0x00;
    285e:	e1 e0       	ldi	r30, 0x01	; 1
    2860:	f1 e0       	ldi	r31, 0x01	; 1
    2862:	10 82       	st	Z, r1
PORTK=0x00;
    2864:	e8 e0       	ldi	r30, 0x08	; 8
    2866:	f1 e0       	ldi	r31, 0x01	; 1
    2868:	10 82       	st	Z, r1
PORTH=0xFF;
    286a:	e2 e0       	ldi	r30, 0x02	; 2
    286c:	f1 e0       	ldi	r31, 0x01	; 1
    286e:	8f ef       	ldi	r24, 0xFF	; 255
    2870:	80 83       	st	Z, r24
}
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <line>:

void line(int what)
{ 
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	28 97       	sbiw	r28, 0x08	; 8
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	98 87       	std	Y+8, r25	; 0x08
    288e:	8f 83       	std	Y+7, r24	; 0x07
//cli();
sei();
    2890:	78 94       	sei
int t=0,temp=0,cd;
    2892:	1e 82       	std	Y+6, r1	; 0x06
    2894:	1d 82       	std	Y+5, r1	; 0x05
    2896:	1c 82       	std	Y+4, r1	; 0x04
    2898:	1b 82       	std	Y+3, r1	; 0x03
while(1)
{



if(what==1)
    289a:	8f 81       	ldd	r24, Y+7	; 0x07
    289c:	98 85       	ldd	r25, Y+8	; 0x08
    289e:	81 30       	cpi	r24, 0x01	; 1
    28a0:	91 05       	cpc	r25, r1
    28a2:	09 f0       	breq	.+2      	; 0x28a6 <line+0x2e>
    28a4:	9a c0       	rjmp	.+308    	; 0x29da <line+0x162>
{cd=0;
    28a6:	1a 82       	std	Y+2, r1	; 0x02
    28a8:	19 82       	std	Y+1, r1	; 0x01
//if((P2&0b11) ==0b11 && count > 26)
if(P1&0b1) cd++; if(P1&0b10) cd++;if(P1&0b100) cd++; if(P2&0b10) cd++;if(P2&0b1) cd++; if(P1&0b10000000) cd++; if(P1&0b1000000) cd++;if(P1&0b100000) cd++; if(P1&0b10000) cd++; if(P1&0b1000) cd++; 
    28aa:	e6 e0       	ldi	r30, 0x06	; 6
    28ac:	f1 e0       	ldi	r31, 0x01	; 1
    28ae:	80 81       	ld	r24, Z
    28b0:	88 2f       	mov	r24, r24
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	81 70       	andi	r24, 0x01	; 1
    28b6:	90 70       	andi	r25, 0x00	; 0
    28b8:	88 23       	and	r24, r24
    28ba:	29 f0       	breq	.+10     	; 0x28c6 <line+0x4e>
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	01 96       	adiw	r24, 0x01	; 1
    28c2:	9a 83       	std	Y+2, r25	; 0x02
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	e6 e0       	ldi	r30, 0x06	; 6
    28c8:	f1 e0       	ldi	r31, 0x01	; 1
    28ca:	80 81       	ld	r24, Z
    28cc:	88 2f       	mov	r24, r24
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	82 70       	andi	r24, 0x02	; 2
    28d2:	90 70       	andi	r25, 0x00	; 0
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	29 f0       	breq	.+10     	; 0x28e2 <line+0x6a>
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	9a 81       	ldd	r25, Y+2	; 0x02
    28dc:	01 96       	adiw	r24, 0x01	; 1
    28de:	9a 83       	std	Y+2, r25	; 0x02
    28e0:	89 83       	std	Y+1, r24	; 0x01
    28e2:	e6 e0       	ldi	r30, 0x06	; 6
    28e4:	f1 e0       	ldi	r31, 0x01	; 1
    28e6:	80 81       	ld	r24, Z
    28e8:	88 2f       	mov	r24, r24
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	84 70       	andi	r24, 0x04	; 4
    28ee:	90 70       	andi	r25, 0x00	; 0
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	29 f0       	breq	.+10     	; 0x28fe <line+0x86>
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	9a 81       	ldd	r25, Y+2	; 0x02
    28f8:	01 96       	adiw	r24, 0x01	; 1
    28fa:	9a 83       	std	Y+2, r25	; 0x02
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	e2 e3       	ldi	r30, 0x32	; 50
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	88 2f       	mov	r24, r24
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	82 70       	andi	r24, 0x02	; 2
    290a:	90 70       	andi	r25, 0x00	; 0
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	29 f0       	breq	.+10     	; 0x291a <line+0xa2>
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	9a 81       	ldd	r25, Y+2	; 0x02
    2914:	01 96       	adiw	r24, 0x01	; 1
    2916:	9a 83       	std	Y+2, r25	; 0x02
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	e2 e3       	ldi	r30, 0x32	; 50
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	88 2f       	mov	r24, r24
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	81 70       	andi	r24, 0x01	; 1
    2926:	90 70       	andi	r25, 0x00	; 0
    2928:	88 23       	and	r24, r24
    292a:	29 f0       	breq	.+10     	; 0x2936 <line+0xbe>
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	9a 81       	ldd	r25, Y+2	; 0x02
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	9a 83       	std	Y+2, r25	; 0x02
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	e6 e0       	ldi	r30, 0x06	; 6
    2938:	f1 e0       	ldi	r31, 0x01	; 1
    293a:	80 81       	ld	r24, Z
    293c:	88 23       	and	r24, r24
    293e:	2c f4       	brge	.+10     	; 0x294a <line+0xd2>
    2940:	89 81       	ldd	r24, Y+1	; 0x01
    2942:	9a 81       	ldd	r25, Y+2	; 0x02
    2944:	01 96       	adiw	r24, 0x01	; 1
    2946:	9a 83       	std	Y+2, r25	; 0x02
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	e6 e0       	ldi	r30, 0x06	; 6
    294c:	f1 e0       	ldi	r31, 0x01	; 1
    294e:	80 81       	ld	r24, Z
    2950:	88 2f       	mov	r24, r24
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	80 74       	andi	r24, 0x40	; 64
    2956:	90 70       	andi	r25, 0x00	; 0
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	29 f0       	breq	.+10     	; 0x2966 <line+0xee>
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	01 96       	adiw	r24, 0x01	; 1
    2962:	9a 83       	std	Y+2, r25	; 0x02
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	e6 e0       	ldi	r30, 0x06	; 6
    2968:	f1 e0       	ldi	r31, 0x01	; 1
    296a:	80 81       	ld	r24, Z
    296c:	88 2f       	mov	r24, r24
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	80 72       	andi	r24, 0x20	; 32
    2972:	90 70       	andi	r25, 0x00	; 0
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	29 f0       	breq	.+10     	; 0x2982 <line+0x10a>
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	01 96       	adiw	r24, 0x01	; 1
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	89 83       	std	Y+1, r24	; 0x01
    2982:	e6 e0       	ldi	r30, 0x06	; 6
    2984:	f1 e0       	ldi	r31, 0x01	; 1
    2986:	80 81       	ld	r24, Z
    2988:	88 2f       	mov	r24, r24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	80 71       	andi	r24, 0x10	; 16
    298e:	90 70       	andi	r25, 0x00	; 0
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	29 f0       	breq	.+10     	; 0x299e <line+0x126>
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	9a 81       	ldd	r25, Y+2	; 0x02
    2998:	01 96       	adiw	r24, 0x01	; 1
    299a:	9a 83       	std	Y+2, r25	; 0x02
    299c:	89 83       	std	Y+1, r24	; 0x01
    299e:	e6 e0       	ldi	r30, 0x06	; 6
    29a0:	f1 e0       	ldi	r31, 0x01	; 1
    29a2:	80 81       	ld	r24, Z
    29a4:	88 2f       	mov	r24, r24
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	88 70       	andi	r24, 0x08	; 8
    29aa:	90 70       	andi	r25, 0x00	; 0
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	29 f0       	breq	.+10     	; 0x29ba <line+0x142>
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	01 96       	adiw	r24, 0x01	; 1
    29b6:	9a 83       	std	Y+2, r25	; 0x02
    29b8:	89 83       	std	Y+1, r24	; 0x01
if(cd>6 && count> 20)
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	9a 81       	ldd	r25, Y+2	; 0x02
    29be:	87 30       	cpi	r24, 0x07	; 7
    29c0:	91 05       	cpc	r25, r1
    29c2:	5c f0       	brlt	.+22     	; 0x29da <line+0x162>
    29c4:	80 91 0e 03 	lds	r24, 0x030E
    29c8:	90 91 0f 03 	lds	r25, 0x030F
    29cc:	85 31       	cpi	r24, 0x15	; 21
    29ce:	91 05       	cpc	r25, r1
    29d0:	24 f0       	brlt	.+8      	; 0x29da <line+0x162>
{stop(); break;}
    29d2:	0e 94 11 14 	call	0x2822	; 0x2822 <stop>
    29d6:	0c 94 3a 20 	jmp	0x4074	; 0x4074 <line+0x17fc>
}
//what =3 follow right bridge
if(what==3)
    29da:	8f 81       	ldd	r24, Y+7	; 0x07
    29dc:	98 85       	ldd	r25, Y+8	; 0x08
    29de:	83 30       	cpi	r24, 0x03	; 3
    29e0:	91 05       	cpc	r25, r1
    29e2:	11 f5       	brne	.+68     	; 0x2a28 <line+0x1b0>
{
if(P2&0b1 && count > 26)
    29e4:	e2 e3       	ldi	r30, 0x32	; 50
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	88 2f       	mov	r24, r24
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	81 70       	andi	r24, 0x01	; 1
    29f0:	90 70       	andi	r25, 0x00	; 0
    29f2:	88 23       	and	r24, r24
    29f4:	59 f0       	breq	.+22     	; 0x2a0c <line+0x194>
    29f6:	80 91 0e 03 	lds	r24, 0x030E
    29fa:	90 91 0f 03 	lds	r25, 0x030F
    29fe:	8b 31       	cpi	r24, 0x1B	; 27
    2a00:	91 05       	cpc	r25, r1
    2a02:	24 f0       	brlt	.+8      	; 0x2a0c <line+0x194>
temp=23;
    2a04:	87 e1       	ldi	r24, 0x17	; 23
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03

if(temp==23 && P1&0b10000000)
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a10:	87 31       	cpi	r24, 0x17	; 23
    2a12:	91 05       	cpc	r25, r1
    2a14:	49 f4       	brne	.+18     	; 0x2a28 <line+0x1b0>
    2a16:	e6 e0       	ldi	r30, 0x06	; 6
    2a18:	f1 e0       	ldi	r31, 0x01	; 1
    2a1a:	80 81       	ld	r24, Z
    2a1c:	88 23       	and	r24, r24
    2a1e:	24 f4       	brge	.+8      	; 0x2a28 <line+0x1b0>
{stop();break;}
    2a20:	0e 94 11 14 	call	0x2822	; 0x2822 <stop>
    2a24:	0c 94 3a 20 	jmp	0x4074	; 0x4074 <line+0x17fc>

}


//what =4 follow left bridge
if(what==4)
    2a28:	8f 81       	ldd	r24, Y+7	; 0x07
    2a2a:	98 85       	ldd	r25, Y+8	; 0x08
    2a2c:	84 30       	cpi	r24, 0x04	; 4
    2a2e:	91 05       	cpc	r25, r1
    2a30:	31 f5       	brne	.+76     	; 0x2a7e <line+0x206>
{
if(P2&0b10 && count > 26)
    2a32:	e2 e3       	ldi	r30, 0x32	; 50
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	88 2f       	mov	r24, r24
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	82 70       	andi	r24, 0x02	; 2
    2a3e:	90 70       	andi	r25, 0x00	; 0
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	59 f0       	breq	.+22     	; 0x2a5a <line+0x1e2>
    2a44:	80 91 0e 03 	lds	r24, 0x030E
    2a48:	90 91 0f 03 	lds	r25, 0x030F
    2a4c:	8b 31       	cpi	r24, 0x1B	; 27
    2a4e:	91 05       	cpc	r25, r1
    2a50:	24 f0       	brlt	.+8      	; 0x2a5a <line+0x1e2>
temp=23;
    2a52:	87 e1       	ldi	r24, 0x17	; 23
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9c 83       	std	Y+4, r25	; 0x04
    2a58:	8b 83       	std	Y+3, r24	; 0x03

if(temp==23 && P1&0b1)
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5e:	87 31       	cpi	r24, 0x17	; 23
    2a60:	91 05       	cpc	r25, r1
    2a62:	69 f4       	brne	.+26     	; 0x2a7e <line+0x206>
    2a64:	e6 e0       	ldi	r30, 0x06	; 6
    2a66:	f1 e0       	ldi	r31, 0x01	; 1
    2a68:	80 81       	ld	r24, Z
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	81 70       	andi	r24, 0x01	; 1
    2a70:	90 70       	andi	r25, 0x00	; 0
    2a72:	88 23       	and	r24, r24
    2a74:	21 f0       	breq	.+8      	; 0x2a7e <line+0x206>
{stop();break;}
    2a76:	0e 94 11 14 	call	0x2822	; 0x2822 <stop>
    2a7a:	0c 94 3a 20 	jmp	0x4074	; 0x4074 <line+0x17fc>

}

if(what>5)
    2a7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a80:	98 85       	ldd	r25, Y+8	; 0x08
    2a82:	86 30       	cpi	r24, 0x06	; 6
    2a84:	91 05       	cpc	r25, r1
    2a86:	6c f0       	brlt	.+26     	; 0x2aa2 <line+0x22a>
{
if(count>what)
    2a88:	20 91 0e 03 	lds	r18, 0x030E
    2a8c:	30 91 0f 03 	lds	r19, 0x030F
    2a90:	8f 81       	ldd	r24, Y+7	; 0x07
    2a92:	98 85       	ldd	r25, Y+8	; 0x08
    2a94:	82 17       	cp	r24, r18
    2a96:	93 07       	cpc	r25, r19
    2a98:	24 f4       	brge	.+8      	; 0x2aa2 <line+0x22a>
{stop();break;}
    2a9a:	0e 94 11 14 	call	0x2822	; 0x2822 <stop>
    2a9e:	0c 94 3a 20 	jmp	0x4074	; 0x4074 <line+0x17fc>
}

if(what==-1)// line follow till block
    2aa2:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa4:	98 85       	ldd	r25, Y+8	; 0x08
    2aa6:	2f ef       	ldi	r18, 0xFF	; 255
    2aa8:	8f 3f       	cpi	r24, 0xFF	; 255
    2aaa:	92 07       	cpc	r25, r18
    2aac:	69 f4       	brne	.+26     	; 0x2ac8 <line+0x250>
{
if(PINH & 0b01000000)
    2aae:	e0 e0       	ldi	r30, 0x00	; 0
    2ab0:	f1 e0       	ldi	r31, 0x01	; 1
    2ab2:	80 81       	ld	r24, Z
    2ab4:	88 2f       	mov	r24, r24
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	80 74       	andi	r24, 0x40	; 64
    2aba:	90 70       	andi	r25, 0x00	; 0
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	21 f0       	breq	.+8      	; 0x2ac8 <line+0x250>
{stop();break;}
    2ac0:	0e 94 11 14 	call	0x2822	; 0x2822 <stop>
    2ac4:	0c 94 3a 20 	jmp	0x4074	; 0x4074 <line+0x17fc>
}

if((P1 & 0b11111111) == 0b00011000 && (P2 & 0b11) == 0b00 ) //1
    2ac8:	e6 e0       	ldi	r30, 0x06	; 6
    2aca:	f1 e0       	ldi	r31, 0x01	; 1
    2acc:	80 81       	ld	r24, Z
    2ace:	88 31       	cpi	r24, 0x18	; 24
    2ad0:	a9 f4       	brne	.+42     	; 0x2afc <line+0x284>
    2ad2:	e2 e3       	ldi	r30, 0x32	; 50
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	88 2f       	mov	r24, r24
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	83 70       	andi	r24, 0x03	; 3
    2ade:	90 70       	andi	r25, 0x00	; 0
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	61 f4       	brne	.+24     	; 0x2afc <line+0x284>
  {   t=1; 
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	9e 83       	std	Y+6, r25	; 0x06
    2aea:	8d 83       	std	Y+5, r24	; 0x05
  set_PWM_value(HIGH);
    2aec:	80 91 81 03 	lds	r24, 0x0381
    2af0:	90 91 82 03 	lds	r25, 0x0382
    2af4:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
   forward();// lcd_cursor(1,1); lcd_string("0000XX0000");
    2af8:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
                 
  }
if((P1 & 0b11111111) == 0b00001100 && (P2 & 0b11) == 0b00 ) //2
    2afc:	e6 e0       	ldi	r30, 0x06	; 6
    2afe:	f1 e0       	ldi	r31, 0x01	; 1
    2b00:	80 81       	ld	r24, Z
    2b02:	8c 30       	cpi	r24, 0x0C	; 12
    2b04:	a9 f4       	brne	.+42     	; 0x2b30 <line+0x2b8>
    2b06:	e2 e3       	ldi	r30, 0x32	; 50
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	88 2f       	mov	r24, r24
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	83 70       	andi	r24, 0x03	; 3
    2b12:	90 70       	andi	r25, 0x00	; 0
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	61 f4       	brne	.+24     	; 0x2b30 <line+0x2b8>
  {   t=1;
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	9e 83       	std	Y+6, r25	; 0x06
    2b1e:	8d 83       	std	Y+5, r24	; 0x05
  set_PWM_value(LOW);
    2b20:	80 91 ce 0d 	lds	r24, 0x0DCE
    2b24:	90 91 cf 0d 	lds	r25, 0x0DCF
    2b28:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
   soft_right();  //  lcd_cursor(1,1); lcd_string("00000XX000");
    2b2c:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
  				  
  }
if((P1 & 0b11111111) == 0b00110000 && (P2 & 0b11) == 0b00 ) //3
    2b30:	e6 e0       	ldi	r30, 0x06	; 6
    2b32:	f1 e0       	ldi	r31, 0x01	; 1
    2b34:	80 81       	ld	r24, Z
    2b36:	80 33       	cpi	r24, 0x30	; 48
    2b38:	a9 f4       	brne	.+42     	; 0x2b64 <line+0x2ec>
    2b3a:	e2 e3       	ldi	r30, 0x32	; 50
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	88 2f       	mov	r24, r24
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	83 70       	andi	r24, 0x03	; 3
    2b46:	90 70       	andi	r25, 0x00	; 0
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	61 f4       	brne	.+24     	; 0x2b64 <line+0x2ec>
  {   t=1; 
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	9e 83       	std	Y+6, r25	; 0x06
    2b52:	8d 83       	std	Y+5, r24	; 0x05
  set_PWM_value(LOW);
    2b54:	80 91 ce 0d 	lds	r24, 0x0DCE
    2b58:	90 91 cf 0d 	lds	r25, 0x0DCF
    2b5c:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();      //    lcd_cursor(1,1); lcd_string("000XX00000"); 
    2b60:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
  					
  }
if((P1 & 0b11111111) == 0b00001000 && (P2 & 0b11) == 0b00 ) //4
    2b64:	e6 e0       	ldi	r30, 0x06	; 6
    2b66:	f1 e0       	ldi	r31, 0x01	; 1
    2b68:	80 81       	ld	r24, Z
    2b6a:	88 30       	cpi	r24, 0x08	; 8
    2b6c:	a9 f4       	brne	.+42     	; 0x2b98 <line+0x320>
    2b6e:	e2 e3       	ldi	r30, 0x32	; 50
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	88 2f       	mov	r24, r24
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	83 70       	andi	r24, 0x03	; 3
    2b7a:	90 70       	andi	r25, 0x00	; 0
    2b7c:	00 97       	sbiw	r24, 0x00	; 0
    2b7e:	61 f4       	brne	.+24     	; 0x2b98 <line+0x320>
  {  t=1; 
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	9e 83       	std	Y+6, r25	; 0x06
    2b86:	8d 83       	std	Y+5, r24	; 0x05
  set_PWM_value(MID);
    2b88:	80 91 8a 03 	lds	r24, 0x038A
    2b8c:	90 91 8b 03 	lds	r25, 0x038B
    2b90:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
   soft_right();  
    2b94:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
  				
  }
if((P1 & 0b11111111) == 0b00010000 && (P2 & 0b11) == 0b00 ) //5
    2b98:	e6 e0       	ldi	r30, 0x06	; 6
    2b9a:	f1 e0       	ldi	r31, 0x01	; 1
    2b9c:	80 81       	ld	r24, Z
    2b9e:	80 31       	cpi	r24, 0x10	; 16
    2ba0:	a9 f4       	brne	.+42     	; 0x2bcc <line+0x354>
    2ba2:	e2 e3       	ldi	r30, 0x32	; 50
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	88 2f       	mov	r24, r24
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	83 70       	andi	r24, 0x03	; 3
    2bae:	90 70       	andi	r25, 0x00	; 0
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	61 f4       	brne	.+24     	; 0x2bcc <line+0x354>
  {   t=1; 
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	9e 83       	std	Y+6, r25	; 0x06
    2bba:	8d 83       	std	Y+5, r24	; 0x05
  set_PWM_value(MID);
    2bbc:	80 91 8a 03 	lds	r24, 0x038A
    2bc0:	90 91 8b 03 	lds	r25, 0x038B
    2bc4:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    soft_left();    
    2bc8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
  				
  }
if((P1 & 0b11111111) == 0b01110000 && (P2 & 0b11) == 0b00 ) //6
    2bcc:	e6 e0       	ldi	r30, 0x06	; 6
    2bce:	f1 e0       	ldi	r31, 0x01	; 1
    2bd0:	80 81       	ld	r24, Z
    2bd2:	80 37       	cpi	r24, 0x70	; 112
    2bd4:	a9 f4       	brne	.+42     	; 0x2c00 <line+0x388>
    2bd6:	e2 e3       	ldi	r30, 0x32	; 50
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	88 2f       	mov	r24, r24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	83 70       	andi	r24, 0x03	; 3
    2be2:	90 70       	andi	r25, 0x00	; 0
    2be4:	00 97       	sbiw	r24, 0x00	; 0
    2be6:	61 f4       	brne	.+24     	; 0x2c00 <line+0x388>
  {   t=1;    
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9e 83       	std	Y+6, r25	; 0x06
    2bee:	8d 83       	std	Y+5, r24	; 0x05
  set_PWM_value(LOW);
    2bf0:	80 91 ce 0d 	lds	r24, 0x0DCE
    2bf4:	90 91 cf 0d 	lds	r25, 0x0DCF
    2bf8:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    2bfc:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
     
  			  
  }
if((P1 & 0b11111111) == 0b00001110 && (P2 & 0b11) == 0b00 )//7
    2c00:	e6 e0       	ldi	r30, 0x06	; 6
    2c02:	f1 e0       	ldi	r31, 0x01	; 1
    2c04:	80 81       	ld	r24, Z
    2c06:	8e 30       	cpi	r24, 0x0E	; 14
    2c08:	a9 f4       	brne	.+42     	; 0x2c34 <line+0x3bc>
    2c0a:	e2 e3       	ldi	r30, 0x32	; 50
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	88 2f       	mov	r24, r24
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	83 70       	andi	r24, 0x03	; 3
    2c16:	90 70       	andi	r25, 0x00	; 0
    2c18:	00 97       	sbiw	r24, 0x00	; 0
    2c1a:	61 f4       	brne	.+24     	; 0x2c34 <line+0x3bc>
  {     t=1;    
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	9e 83       	std	Y+6, r25	; 0x06
    2c22:	8d 83       	std	Y+5, r24	; 0x05
  set_PWM_value(LOW);
    2c24:	80 91 ce 0d 	lds	r24, 0x0DCE
    2c28:	90 91 cf 0d 	lds	r25, 0x0DCF
    2c2c:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    soft_right();
    2c30:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    
  			    
  }
if((P1 & 0b11111111) == 0b01101100 && (P2 & 0b11) == 0b00 )//8
    2c34:	e6 e0       	ldi	r30, 0x06	; 6
    2c36:	f1 e0       	ldi	r31, 0x01	; 1
    2c38:	80 81       	ld	r24, Z
    2c3a:	8c 36       	cpi	r24, 0x6C	; 108
    2c3c:	e9 f4       	brne	.+58     	; 0x2c78 <line+0x400>
    2c3e:	e2 e3       	ldi	r30, 0x32	; 50
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	88 2f       	mov	r24, r24
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	83 70       	andi	r24, 0x03	; 3
    2c4a:	90 70       	andi	r25, 0x00	; 0
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	a1 f4       	brne	.+40     	; 0x2c78 <line+0x400>
  {    t=1;    set_PWM_value(MID); 
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	9e 83       	std	Y+6, r25	; 0x06
    2c56:	8d 83       	std	Y+5, r24	; 0x05
    2c58:	80 91 8a 03 	lds	r24, 0x038A
    2c5c:	90 91 8b 03 	lds	r25, 0x038B
    2c60:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  if(what==4)
    2c64:	8f 81       	ldd	r24, Y+7	; 0x07
    2c66:	98 85       	ldd	r25, Y+8	; 0x08
    2c68:	84 30       	cpi	r24, 0x04	; 4
    2c6a:	91 05       	cpc	r25, r1
    2c6c:	19 f4       	brne	.+6      	; 0x2c74 <line+0x3fc>
    soft_left();
    2c6e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <line+0x400>
else 
   soft_right();    
    2c74:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
                 
  			 
  }
  if((P1 & 0b11111111) == 0b11001100 && (P2 & 0b11) == 0b00 )//9
    2c78:	e6 e0       	ldi	r30, 0x06	; 6
    2c7a:	f1 e0       	ldi	r31, 0x01	; 1
    2c7c:	80 81       	ld	r24, Z
    2c7e:	8c 3c       	cpi	r24, 0xCC	; 204
    2c80:	e9 f4       	brne	.+58     	; 0x2cbc <line+0x444>
    2c82:	e2 e3       	ldi	r30, 0x32	; 50
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	88 2f       	mov	r24, r24
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	83 70       	andi	r24, 0x03	; 3
    2c8e:	90 70       	andi	r25, 0x00	; 0
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	a1 f4       	brne	.+40     	; 0x2cbc <line+0x444>
  {    t=1;    set_PWM_value(MID); 
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9e 83       	std	Y+6, r25	; 0x06
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
    2c9c:	80 91 8a 03 	lds	r24, 0x038A
    2ca0:	90 91 8b 03 	lds	r25, 0x038B
    2ca4:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
   if(what==4)
    2ca8:	8f 81       	ldd	r24, Y+7	; 0x07
    2caa:	98 85       	ldd	r25, Y+8	; 0x08
    2cac:	84 30       	cpi	r24, 0x04	; 4
    2cae:	91 05       	cpc	r25, r1
    2cb0:	19 f4       	brne	.+6      	; 0x2cb8 <line+0x440>
    soft_left();
    2cb2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    2cb6:	02 c0       	rjmp	.+4      	; 0x2cbc <line+0x444>
else  soft_right();    
    2cb8:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
                 //  lcd_cursor(1,1); lcd_string("0000XXXX00");  
  			 
  }
  if((P1 & 0b11111111) == 0b01001100 && (P2 & 0b11) == 0b00 )//10
    2cbc:	e6 e0       	ldi	r30, 0x06	; 6
    2cbe:	f1 e0       	ldi	r31, 0x01	; 1
    2cc0:	80 81       	ld	r24, Z
    2cc2:	8c 34       	cpi	r24, 0x4C	; 76
    2cc4:	e9 f4       	brne	.+58     	; 0x2d00 <line+0x488>
    2cc6:	e2 e3       	ldi	r30, 0x32	; 50
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	88 2f       	mov	r24, r24
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	83 70       	andi	r24, 0x03	; 3
    2cd2:	90 70       	andi	r25, 0x00	; 0
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	a1 f4       	brne	.+40     	; 0x2d00 <line+0x488>
  {    t=1;    set_PWM_value(MID); 
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
    2ce0:	80 91 8a 03 	lds	r24, 0x038A
    2ce4:	90 91 8b 03 	lds	r25, 0x038B
    2ce8:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
   if(what==4)
    2cec:	8f 81       	ldd	r24, Y+7	; 0x07
    2cee:	98 85       	ldd	r25, Y+8	; 0x08
    2cf0:	84 30       	cpi	r24, 0x04	; 4
    2cf2:	91 05       	cpc	r25, r1
    2cf4:	19 f4       	brne	.+6      	; 0x2cfc <line+0x484>
    soft_left();
    2cf6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    2cfa:	02 c0       	rjmp	.+4      	; 0x2d00 <line+0x488>
else  soft_right();    
    2cfc:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
                 //  lcd_cursor(1,1); lcd_string("0000XXXX00");  
  			 
  }
  if((P1 & 0b11111111) == 0b10001100 && (P2 & 0b11) == 0b00 )//11
    2d00:	e6 e0       	ldi	r30, 0x06	; 6
    2d02:	f1 e0       	ldi	r31, 0x01	; 1
    2d04:	80 81       	ld	r24, Z
    2d06:	8c 38       	cpi	r24, 0x8C	; 140
    2d08:	e9 f4       	brne	.+58     	; 0x2d44 <line+0x4cc>
    2d0a:	e2 e3       	ldi	r30, 0x32	; 50
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	88 2f       	mov	r24, r24
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	83 70       	andi	r24, 0x03	; 3
    2d16:	90 70       	andi	r25, 0x00	; 0
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	a1 f4       	brne	.+40     	; 0x2d44 <line+0x4cc>
  {    t=1;    set_PWM_value(MID); 
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	80 91 8a 03 	lds	r24, 0x038A
    2d28:	90 91 8b 03 	lds	r25, 0x038B
    2d2c:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
   if(what==4)
    2d30:	8f 81       	ldd	r24, Y+7	; 0x07
    2d32:	98 85       	ldd	r25, Y+8	; 0x08
    2d34:	84 30       	cpi	r24, 0x04	; 4
    2d36:	91 05       	cpc	r25, r1
    2d38:	19 f4       	brne	.+6      	; 0x2d40 <line+0x4c8>
    soft_left();
    2d3a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <line+0x4cc>
else  soft_right();    
    2d40:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
                 //  lcd_cursor(1,1); lcd_string("0000XXXX00");  
  			 
  }
  if((P1 & 0b11111111) == 0b10001100 && (P2 & 0b11) == 0b10 )//12
    2d44:	e6 e0       	ldi	r30, 0x06	; 6
    2d46:	f1 e0       	ldi	r31, 0x01	; 1
    2d48:	80 81       	ld	r24, Z
    2d4a:	8c 38       	cpi	r24, 0x8C	; 140
    2d4c:	f1 f4       	brne	.+60     	; 0x2d8a <line+0x512>
    2d4e:	e2 e3       	ldi	r30, 0x32	; 50
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	88 2f       	mov	r24, r24
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	83 70       	andi	r24, 0x03	; 3
    2d5a:	90 70       	andi	r25, 0x00	; 0
    2d5c:	82 30       	cpi	r24, 0x02	; 2
    2d5e:	91 05       	cpc	r25, r1
    2d60:	a1 f4       	brne	.+40     	; 0x2d8a <line+0x512>
  {    t=1;    set_PWM_value(MID); 
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	9e 83       	std	Y+6, r25	; 0x06
    2d68:	8d 83       	std	Y+5, r24	; 0x05
    2d6a:	80 91 8a 03 	lds	r24, 0x038A
    2d6e:	90 91 8b 03 	lds	r25, 0x038B
    2d72:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
   if(what==4)
    2d76:	8f 81       	ldd	r24, Y+7	; 0x07
    2d78:	98 85       	ldd	r25, Y+8	; 0x08
    2d7a:	84 30       	cpi	r24, 0x04	; 4
    2d7c:	91 05       	cpc	r25, r1
    2d7e:	19 f4       	brne	.+6      	; 0x2d86 <line+0x50e>
    soft_left();
    2d80:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    2d84:	02 c0       	rjmp	.+4      	; 0x2d8a <line+0x512>
else  soft_right();    
    2d86:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
                 //  lcd_cursor(1,1); lcd_string("0000XXXX00");  
  			 
  }
  if((P1 & 0b11111111) == 0b11001100 && (P2 & 0b11) == 0b10 )//13
    2d8a:	e6 e0       	ldi	r30, 0x06	; 6
    2d8c:	f1 e0       	ldi	r31, 0x01	; 1
    2d8e:	80 81       	ld	r24, Z
    2d90:	8c 3c       	cpi	r24, 0xCC	; 204
    2d92:	f1 f4       	brne	.+60     	; 0x2dd0 <line+0x558>
    2d94:	e2 e3       	ldi	r30, 0x32	; 50
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	88 2f       	mov	r24, r24
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	83 70       	andi	r24, 0x03	; 3
    2da0:	90 70       	andi	r25, 0x00	; 0
    2da2:	82 30       	cpi	r24, 0x02	; 2
    2da4:	91 05       	cpc	r25, r1
    2da6:	a1 f4       	brne	.+40     	; 0x2dd0 <line+0x558>
  {    t=1;    set_PWM_value(MID);
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	9e 83       	std	Y+6, r25	; 0x06
    2dae:	8d 83       	std	Y+5, r24	; 0x05
    2db0:	80 91 8a 03 	lds	r24, 0x038A
    2db4:	90 91 8b 03 	lds	r25, 0x038B
    2db8:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
   if(what==4)
    2dbc:	8f 81       	ldd	r24, Y+7	; 0x07
    2dbe:	98 85       	ldd	r25, Y+8	; 0x08
    2dc0:	84 30       	cpi	r24, 0x04	; 4
    2dc2:	91 05       	cpc	r25, r1
    2dc4:	19 f4       	brne	.+6      	; 0x2dcc <line+0x554>
    soft_left();
    2dc6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <line+0x558>
else   soft_right();    
    2dcc:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
                 //  lcd_cursor(1,1); lcd_string("0000XXXX00");  
  			 
  }
    if((P1 & 0b11111111) == 0b11110000 && (P2 & 0b11) == 0b00 )//14
    2dd0:	e6 e0       	ldi	r30, 0x06	; 6
    2dd2:	f1 e0       	ldi	r31, 0x01	; 1
    2dd4:	80 81       	ld	r24, Z
    2dd6:	80 3f       	cpi	r24, 0xF0	; 240
    2dd8:	a9 f4       	brne	.+42     	; 0x2e04 <line+0x58c>
    2dda:	e2 e3       	ldi	r30, 0x32	; 50
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 81       	ld	r24, Z
    2de0:	88 2f       	mov	r24, r24
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	83 70       	andi	r24, 0x03	; 3
    2de6:	90 70       	andi	r25, 0x00	; 0
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	61 f4       	brne	.+24     	; 0x2e04 <line+0x58c>
  {    t=1;     set_PWM_value(MID); soft_left();    
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	9e 83       	std	Y+6, r25	; 0x06
    2df2:	8d 83       	std	Y+5, r24	; 0x05
    2df4:	80 91 8a 03 	lds	r24, 0x038A
    2df8:	90 91 8b 03 	lds	r25, 0x038B
    2dfc:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    2e00:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
                  // lcd_cursor(1,1); lcd_string("00XXXX0000");  
  			    
  }
if((P1 & 0b11111111) == 0b00110110 && (P2 & 0b11) == 0b00 )//15
    2e04:	e6 e0       	ldi	r30, 0x06	; 6
    2e06:	f1 e0       	ldi	r31, 0x01	; 1
    2e08:	80 81       	ld	r24, Z
    2e0a:	86 33       	cpi	r24, 0x36	; 54
    2e0c:	e9 f4       	brne	.+58     	; 0x2e48 <line+0x5d0>
    2e0e:	e2 e3       	ldi	r30, 0x32	; 50
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	88 2f       	mov	r24, r24
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	83 70       	andi	r24, 0x03	; 3
    2e1a:	90 70       	andi	r25, 0x00	; 0
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	a1 f4       	brne	.+40     	; 0x2e48 <line+0x5d0>
  {      t=1;        
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    2e28:	80 91 ce 0d 	lds	r24, 0x0DCE
    2e2c:	90 91 cf 0d 	lds	r25, 0x0DCF
    2e30:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    2e34:	8f 81       	ldd	r24, Y+7	; 0x07
    2e36:	98 85       	ldd	r25, Y+8	; 0x08
    2e38:	83 30       	cpi	r24, 0x03	; 3
    2e3a:	91 05       	cpc	r25, r1
    2e3c:	19 f4       	brne	.+6      	; 0x2e44 <line+0x5cc>
    soft_right();
    2e3e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <line+0x5d0>
else 
                soft_left();
    2e44:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				
				  // lcd_cursor(1,1); lcd_string("0000XX0XX0");  
  			  
  }
if((P1 & 0b11111111) == 0b10110000 && (P2 & 0b11) == 0b00 )//16
    2e48:	e6 e0       	ldi	r30, 0x06	; 6
    2e4a:	f1 e0       	ldi	r31, 0x01	; 1
    2e4c:	80 81       	ld	r24, Z
    2e4e:	80 3b       	cpi	r24, 0xB0	; 176
    2e50:	a9 f4       	brne	.+42     	; 0x2e7c <line+0x604>
    2e52:	e2 e3       	ldi	r30, 0x32	; 50
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	88 2f       	mov	r24, r24
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	83 70       	andi	r24, 0x03	; 3
    2e5e:	90 70       	andi	r25, 0x00	; 0
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	61 f4       	brne	.+24     	; 0x2e7c <line+0x604>
  {      t=1;        
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	9e 83       	std	Y+6, r25	; 0x06
    2e6a:	8d 83       	std	Y+5, r24	; 0x05
               set_PWM_value(LOW);
    2e6c:	80 91 ce 0d 	lds	r24, 0x0DCE
    2e70:	90 91 cf 0d 	lds	r25, 0x0DCF
    2e74:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
                soft_left();
    2e78:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				
				  // lcd_cursor(1,1); lcd_string("0XX0XX0000");  
  			    
  }
if((P1 & 0b11111111) == 0b00110010 && (P2 & 0b11) == 0b00 )//17
    2e7c:	e6 e0       	ldi	r30, 0x06	; 6
    2e7e:	f1 e0       	ldi	r31, 0x01	; 1
    2e80:	80 81       	ld	r24, Z
    2e82:	82 33       	cpi	r24, 0x32	; 50
    2e84:	19 f5       	brne	.+70     	; 0x2ecc <line+0x654>
    2e86:	e2 e3       	ldi	r30, 0x32	; 50
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	88 2f       	mov	r24, r24
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	83 70       	andi	r24, 0x03	; 3
    2e92:	90 70       	andi	r25, 0x00	; 0
    2e94:	00 97       	sbiw	r24, 0x00	; 0
    2e96:	d1 f4       	brne	.+52     	; 0x2ecc <line+0x654>
  {       t=1;       
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	9e 83       	std	Y+6, r25	; 0x06
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    2ea0:	80 91 ce 0d 	lds	r24, 0x0DCE
    2ea4:	90 91 cf 0d 	lds	r25, 0x0DCF
    2ea8:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    2eac:	8f 81       	ldd	r24, Y+7	; 0x07
    2eae:	98 85       	ldd	r25, Y+8	; 0x08
    2eb0:	83 30       	cpi	r24, 0x03	; 3
    2eb2:	91 05       	cpc	r25, r1
    2eb4:	49 f4       	brne	.+18     	; 0x2ec8 <line+0x650>
   {  set_PWM_value(MID);soft_right();}
    2eb6:	80 91 8a 03 	lds	r24, 0x038A
    2eba:	90 91 8b 03 	lds	r25, 0x038B
    2ebe:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    2ec2:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <line+0x654>
else 
  soft_left();
    2ec8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				 //  lcd_cursor(1,1); lcd_string("0000XX00X0");  
  			   
  }
 if((P1 & 0b11111111) == 0b00110000 && (P2 & 0b11) == 0b01 )//18
    2ecc:	e6 e0       	ldi	r30, 0x06	; 6
    2ece:	f1 e0       	ldi	r31, 0x01	; 1
    2ed0:	80 81       	ld	r24, Z
    2ed2:	80 33       	cpi	r24, 0x30	; 48
    2ed4:	21 f5       	brne	.+72     	; 0x2f1e <line+0x6a6>
    2ed6:	e2 e3       	ldi	r30, 0x32	; 50
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	88 2f       	mov	r24, r24
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	83 70       	andi	r24, 0x03	; 3
    2ee2:	90 70       	andi	r25, 0x00	; 0
    2ee4:	81 30       	cpi	r24, 0x01	; 1
    2ee6:	91 05       	cpc	r25, r1
    2ee8:	d1 f4       	brne	.+52     	; 0x2f1e <line+0x6a6>
  {       t=1;       
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	9e 83       	std	Y+6, r25	; 0x06
    2ef0:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    2ef2:	80 91 ce 0d 	lds	r24, 0x0DCE
    2ef6:	90 91 cf 0d 	lds	r25, 0x0DCF
    2efa:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    2efe:	8f 81       	ldd	r24, Y+7	; 0x07
    2f00:	98 85       	ldd	r25, Y+8	; 0x08
    2f02:	83 30       	cpi	r24, 0x03	; 3
    2f04:	91 05       	cpc	r25, r1
    2f06:	49 f4       	brne	.+18     	; 0x2f1a <line+0x6a2>
   {  set_PWM_value(HIGH);soft_right();}
    2f08:	80 91 81 03 	lds	r24, 0x0381
    2f0c:	90 91 82 03 	lds	r25, 0x0382
    2f10:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    2f14:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <line+0x6a6>
else 
  soft_left();
    2f1a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				
				 //  lcd_cursor(1,1); lcd_string("0X00XX0000");  
  			  
  }
 if((P1 & 0b11111111) == 0b00110100 && (P2 & 0b11) == 0b00 )//19
    2f1e:	e6 e0       	ldi	r30, 0x06	; 6
    2f20:	f1 e0       	ldi	r31, 0x01	; 1
    2f22:	80 81       	ld	r24, Z
    2f24:	84 33       	cpi	r24, 0x34	; 52
    2f26:	19 f5       	brne	.+70     	; 0x2f6e <line+0x6f6>
    2f28:	e2 e3       	ldi	r30, 0x32	; 50
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	88 2f       	mov	r24, r24
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	83 70       	andi	r24, 0x03	; 3
    2f34:	90 70       	andi	r25, 0x00	; 0
    2f36:	00 97       	sbiw	r24, 0x00	; 0
    2f38:	d1 f4       	brne	.+52     	; 0x2f6e <line+0x6f6>
  {        t=1;      
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	9e 83       	std	Y+6, r25	; 0x06
    2f40:	8d 83       	std	Y+5, r24	; 0x05
                 set_PWM_value(LOW);
    2f42:	80 91 ce 0d 	lds	r24, 0x0DCE
    2f46:	90 91 cf 0d 	lds	r25, 0x0DCF
    2f4a:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				  if(what==3)
    2f4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f50:	98 85       	ldd	r25, Y+8	; 0x08
    2f52:	83 30       	cpi	r24, 0x03	; 3
    2f54:	91 05       	cpc	r25, r1
    2f56:	49 f4       	brne	.+18     	; 0x2f6a <line+0x6f2>
   {  set_PWM_value(MID);soft_right();}
    2f58:	80 91 8a 03 	lds	r24, 0x038A
    2f5c:	90 91 8b 03 	lds	r25, 0x038B
    2f60:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    2f64:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    2f68:	02 c0       	rjmp	.+4      	; 0x2f6e <line+0x6f6>
else 
  soft_left();
    2f6a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("0000XX0X00");  
  			    
  }
if((P1 & 0b11111111) == 0b00110001 && (P2 & 0b11) == 0b01 )//20
    2f6e:	e6 e0       	ldi	r30, 0x06	; 6
    2f70:	f1 e0       	ldi	r31, 0x01	; 1
    2f72:	80 81       	ld	r24, Z
    2f74:	81 33       	cpi	r24, 0x31	; 49
    2f76:	21 f5       	brne	.+72     	; 0x2fc0 <line+0x748>
    2f78:	e2 e3       	ldi	r30, 0x32	; 50
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	83 70       	andi	r24, 0x03	; 3
    2f84:	90 70       	andi	r25, 0x00	; 0
    2f86:	81 30       	cpi	r24, 0x01	; 1
    2f88:	91 05       	cpc	r25, r1
    2f8a:	d1 f4       	brne	.+52     	; 0x2fc0 <line+0x748>
  {       t=1;       
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    2f94:	80 91 ce 0d 	lds	r24, 0x0DCE
    2f98:	90 91 cf 0d 	lds	r25, 0x0DCF
    2f9c:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    2fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    2fa2:	98 85       	ldd	r25, Y+8	; 0x08
    2fa4:	83 30       	cpi	r24, 0x03	; 3
    2fa6:	91 05       	cpc	r25, r1
    2fa8:	49 f4       	brne	.+18     	; 0x2fbc <line+0x744>
   {  set_PWM_value(HIGH);soft_right();}
    2faa:	80 91 81 03 	lds	r24, 0x0381
    2fae:	90 91 82 03 	lds	r25, 0x0382
    2fb2:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    2fb6:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    2fba:	02 c0       	rjmp	.+4      	; 0x2fc0 <line+0x748>
else 
  soft_left();
    2fbc:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00110011 && (P2 & 0b11) == 0b00 )//21
    2fc0:	e6 e0       	ldi	r30, 0x06	; 6
    2fc2:	f1 e0       	ldi	r31, 0x01	; 1
    2fc4:	80 81       	ld	r24, Z
    2fc6:	83 33       	cpi	r24, 0x33	; 51
    2fc8:	19 f5       	brne	.+70     	; 0x3010 <line+0x798>
    2fca:	e2 e3       	ldi	r30, 0x32	; 50
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	88 2f       	mov	r24, r24
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	83 70       	andi	r24, 0x03	; 3
    2fd6:	90 70       	andi	r25, 0x00	; 0
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	d1 f4       	brne	.+52     	; 0x3010 <line+0x798>
  {        t=1;      
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	9e 83       	std	Y+6, r25	; 0x06
    2fe2:	8d 83       	std	Y+5, r24	; 0x05
                 set_PWM_value(LOW);
    2fe4:	80 91 ce 0d 	lds	r24, 0x0DCE
    2fe8:	90 91 cf 0d 	lds	r25, 0x0DCF
    2fec:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				  if(what==3)
    2ff0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff2:	98 85       	ldd	r25, Y+8	; 0x08
    2ff4:	83 30       	cpi	r24, 0x03	; 3
    2ff6:	91 05       	cpc	r25, r1
    2ff8:	49 f4       	brne	.+18     	; 0x300c <line+0x794>
   {  set_PWM_value(MID);soft_right();}
    2ffa:	80 91 8a 03 	lds	r24, 0x038A
    2ffe:	90 91 8b 03 	lds	r25, 0x038B
    3002:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3006:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <line+0x798>
else 
  soft_left();
    300c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("0000XX00XX");  
  			    
  }
  if((P1 & 0b11111111) == 0b00110000 && (P2 & 0b11) == 0b10 )//22
    3010:	e6 e0       	ldi	r30, 0x06	; 6
    3012:	f1 e0       	ldi	r31, 0x01	; 1
    3014:	80 81       	ld	r24, Z
    3016:	80 33       	cpi	r24, 0x30	; 48
    3018:	b1 f4       	brne	.+44     	; 0x3046 <line+0x7ce>
    301a:	e2 e3       	ldi	r30, 0x32	; 50
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	88 2f       	mov	r24, r24
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	83 70       	andi	r24, 0x03	; 3
    3026:	90 70       	andi	r25, 0x00	; 0
    3028:	82 30       	cpi	r24, 0x02	; 2
    302a:	91 05       	cpc	r25, r1
    302c:	61 f4       	brne	.+24     	; 0x3046 <line+0x7ce>
  {       t=1;       
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9e 83       	std	Y+6, r25	; 0x06
    3034:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    3036:	80 91 ce 0d 	lds	r24, 0x0DCE
    303a:	90 91 cf 0d 	lds	r25, 0x0DCF
    303e:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    3042:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }

  if((P1 & 0b11111111) == 0b01110000 && (P2 & 0b11) == 0b10 )//23
    3046:	e6 e0       	ldi	r30, 0x06	; 6
    3048:	f1 e0       	ldi	r31, 0x01	; 1
    304a:	80 81       	ld	r24, Z
    304c:	80 37       	cpi	r24, 0x70	; 112
    304e:	b1 f4       	brne	.+44     	; 0x307c <line+0x804>
    3050:	e2 e3       	ldi	r30, 0x32	; 50
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	88 2f       	mov	r24, r24
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	83 70       	andi	r24, 0x03	; 3
    305c:	90 70       	andi	r25, 0x00	; 0
    305e:	82 30       	cpi	r24, 0x02	; 2
    3060:	91 05       	cpc	r25, r1
    3062:	61 f4       	brne	.+24     	; 0x307c <line+0x804>
  {       t=1;       
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	9e 83       	std	Y+6, r25	; 0x06
    306a:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    306c:	80 91 ce 0d 	lds	r24, 0x0DCE
    3070:	90 91 cf 0d 	lds	r25, 0x0DCF
    3074:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    3078:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b10110000 && (P2 & 0b11) == 0b10 )//24
    307c:	e6 e0       	ldi	r30, 0x06	; 6
    307e:	f1 e0       	ldi	r31, 0x01	; 1
    3080:	80 81       	ld	r24, Z
    3082:	80 3b       	cpi	r24, 0xB0	; 176
    3084:	b1 f4       	brne	.+44     	; 0x30b2 <line+0x83a>
    3086:	e2 e3       	ldi	r30, 0x32	; 50
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	80 81       	ld	r24, Z
    308c:	88 2f       	mov	r24, r24
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	83 70       	andi	r24, 0x03	; 3
    3092:	90 70       	andi	r25, 0x00	; 0
    3094:	82 30       	cpi	r24, 0x02	; 2
    3096:	91 05       	cpc	r25, r1
    3098:	61 f4       	brne	.+24     	; 0x30b2 <line+0x83a>
  {       t=1;       
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	9e 83       	std	Y+6, r25	; 0x06
    30a0:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    30a2:	80 91 ce 0d 	lds	r24, 0x0DCE
    30a6:	90 91 cf 0d 	lds	r25, 0x0DCF
    30aa:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    30ae:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00110111 && (P2 & 0b11) == 0b00 )//25
    30b2:	e6 e0       	ldi	r30, 0x06	; 6
    30b4:	f1 e0       	ldi	r31, 0x01	; 1
    30b6:	80 81       	ld	r24, Z
    30b8:	87 33       	cpi	r24, 0x37	; 55
    30ba:	19 f5       	brne	.+70     	; 0x3102 <line+0x88a>
    30bc:	e2 e3       	ldi	r30, 0x32	; 50
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	88 2f       	mov	r24, r24
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	83 70       	andi	r24, 0x03	; 3
    30c8:	90 70       	andi	r25, 0x00	; 0
    30ca:	00 97       	sbiw	r24, 0x00	; 0
    30cc:	d1 f4       	brne	.+52     	; 0x3102 <line+0x88a>
  {       t=1;       
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	9e 83       	std	Y+6, r25	; 0x06
    30d4:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    30d6:	80 91 ce 0d 	lds	r24, 0x0DCE
    30da:	90 91 cf 0d 	lds	r25, 0x0DCF
    30de:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    30e2:	8f 81       	ldd	r24, Y+7	; 0x07
    30e4:	98 85       	ldd	r25, Y+8	; 0x08
    30e6:	83 30       	cpi	r24, 0x03	; 3
    30e8:	91 05       	cpc	r25, r1
    30ea:	49 f4       	brne	.+18     	; 0x30fe <line+0x886>
   {  set_PWM_value(MID);soft_right();}
    30ec:	80 91 8a 03 	lds	r24, 0x038A
    30f0:	90 91 8b 03 	lds	r25, 0x038B
    30f4:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    30f8:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    30fc:	02 c0       	rjmp	.+4      	; 0x3102 <line+0x88a>
else 
  soft_left();
    30fe:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00110011 && (P2 & 0b11) == 0b01 )//26
    3102:	e6 e0       	ldi	r30, 0x06	; 6
    3104:	f1 e0       	ldi	r31, 0x01	; 1
    3106:	80 81       	ld	r24, Z
    3108:	83 33       	cpi	r24, 0x33	; 51
    310a:	21 f5       	brne	.+72     	; 0x3154 <line+0x8dc>
    310c:	e2 e3       	ldi	r30, 0x32	; 50
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	88 2f       	mov	r24, r24
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	83 70       	andi	r24, 0x03	; 3
    3118:	90 70       	andi	r25, 0x00	; 0
    311a:	81 30       	cpi	r24, 0x01	; 1
    311c:	91 05       	cpc	r25, r1
    311e:	d1 f4       	brne	.+52     	; 0x3154 <line+0x8dc>
  {       t=1;       
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	9e 83       	std	Y+6, r25	; 0x06
    3126:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    3128:	80 91 ce 0d 	lds	r24, 0x0DCE
    312c:	90 91 cf 0d 	lds	r25, 0x0DCF
    3130:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    3134:	8f 81       	ldd	r24, Y+7	; 0x07
    3136:	98 85       	ldd	r25, Y+8	; 0x08
    3138:	83 30       	cpi	r24, 0x03	; 3
    313a:	91 05       	cpc	r25, r1
    313c:	49 f4       	brne	.+18     	; 0x3150 <line+0x8d8>
   {  set_PWM_value(MID);soft_right();}
    313e:	80 91 8a 03 	lds	r24, 0x038A
    3142:	90 91 8b 03 	lds	r25, 0x038B
    3146:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    314a:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <line+0x8dc>
else 
  soft_left();
    3150:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00110001 && (P2 & 0b11) == 0b00 )//27
    3154:	e6 e0       	ldi	r30, 0x06	; 6
    3156:	f1 e0       	ldi	r31, 0x01	; 1
    3158:	80 81       	ld	r24, Z
    315a:	81 33       	cpi	r24, 0x31	; 49
    315c:	19 f5       	brne	.+70     	; 0x31a4 <line+0x92c>
    315e:	e2 e3       	ldi	r30, 0x32	; 50
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	80 81       	ld	r24, Z
    3164:	88 2f       	mov	r24, r24
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	83 70       	andi	r24, 0x03	; 3
    316a:	90 70       	andi	r25, 0x00	; 0
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	d1 f4       	brne	.+52     	; 0x31a4 <line+0x92c>
  {       t=1;       
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	9e 83       	std	Y+6, r25	; 0x06
    3176:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    3178:	80 91 ce 0d 	lds	r24, 0x0DCE
    317c:	90 91 cf 0d 	lds	r25, 0x0DCF
    3180:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    3184:	8f 81       	ldd	r24, Y+7	; 0x07
    3186:	98 85       	ldd	r25, Y+8	; 0x08
    3188:	83 30       	cpi	r24, 0x03	; 3
    318a:	91 05       	cpc	r25, r1
    318c:	49 f4       	brne	.+18     	; 0x31a0 <line+0x928>
   {  set_PWM_value(MID);soft_right();}
    318e:	80 91 8a 03 	lds	r24, 0x038A
    3192:	90 91 8b 03 	lds	r25, 0x038B
    3196:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    319a:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <line+0x92c>
else 
  soft_left();
    31a0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b01100011 && (P2 & 0b11) == 0b01 )//28
    31a4:	e6 e0       	ldi	r30, 0x06	; 6
    31a6:	f1 e0       	ldi	r31, 0x01	; 1
    31a8:	80 81       	ld	r24, Z
    31aa:	83 36       	cpi	r24, 0x63	; 99
    31ac:	21 f5       	brne	.+72     	; 0x31f6 <line+0x97e>
    31ae:	e2 e3       	ldi	r30, 0x32	; 50
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	88 2f       	mov	r24, r24
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	83 70       	andi	r24, 0x03	; 3
    31ba:	90 70       	andi	r25, 0x00	; 0
    31bc:	81 30       	cpi	r24, 0x01	; 1
    31be:	91 05       	cpc	r25, r1
    31c0:	d1 f4       	brne	.+52     	; 0x31f6 <line+0x97e>
  {       t=1;       
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	9e 83       	std	Y+6, r25	; 0x06
    31c8:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    31ca:	80 91 ce 0d 	lds	r24, 0x0DCE
    31ce:	90 91 cf 0d 	lds	r25, 0x0DCF
    31d2:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    31d6:	8f 81       	ldd	r24, Y+7	; 0x07
    31d8:	98 85       	ldd	r25, Y+8	; 0x08
    31da:	83 30       	cpi	r24, 0x03	; 3
    31dc:	91 05       	cpc	r25, r1
    31de:	49 f4       	brne	.+18     	; 0x31f2 <line+0x97a>
   {  set_PWM_value(MID);soft_right();}
    31e0:	80 91 8a 03 	lds	r24, 0x038A
    31e4:	90 91 8b 03 	lds	r25, 0x038B
    31e8:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    31ec:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    31f0:	02 c0       	rjmp	.+4      	; 0x31f6 <line+0x97e>
else 
  soft_left();
    31f2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b01100011 && (P2 & 0b11) == 0b01 )//29
    31f6:	e6 e0       	ldi	r30, 0x06	; 6
    31f8:	f1 e0       	ldi	r31, 0x01	; 1
    31fa:	80 81       	ld	r24, Z
    31fc:	83 36       	cpi	r24, 0x63	; 99
    31fe:	21 f5       	brne	.+72     	; 0x3248 <line+0x9d0>
    3200:	e2 e3       	ldi	r30, 0x32	; 50
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	88 2f       	mov	r24, r24
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	83 70       	andi	r24, 0x03	; 3
    320c:	90 70       	andi	r25, 0x00	; 0
    320e:	81 30       	cpi	r24, 0x01	; 1
    3210:	91 05       	cpc	r25, r1
    3212:	d1 f4       	brne	.+52     	; 0x3248 <line+0x9d0>
  {       t=1;       
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	9e 83       	std	Y+6, r25	; 0x06
    321a:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    321c:	80 91 ce 0d 	lds	r24, 0x0DCE
    3220:	90 91 cf 0d 	lds	r25, 0x0DCF
    3224:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    3228:	8f 81       	ldd	r24, Y+7	; 0x07
    322a:	98 85       	ldd	r25, Y+8	; 0x08
    322c:	83 30       	cpi	r24, 0x03	; 3
    322e:	91 05       	cpc	r25, r1
    3230:	49 f4       	brne	.+18     	; 0x3244 <line+0x9cc>
   {  set_PWM_value(MID);soft_right();}
    3232:	80 91 8a 03 	lds	r24, 0x038A
    3236:	90 91 8b 03 	lds	r25, 0x038B
    323a:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    323e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <line+0x9d0>
else 
  soft_left();
    3244:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b01100111 && (P2 & 0b11) == 0b00 )//30
    3248:	e6 e0       	ldi	r30, 0x06	; 6
    324a:	f1 e0       	ldi	r31, 0x01	; 1
    324c:	80 81       	ld	r24, Z
    324e:	87 36       	cpi	r24, 0x67	; 103
    3250:	19 f5       	brne	.+70     	; 0x3298 <line+0xa20>
    3252:	e2 e3       	ldi	r30, 0x32	; 50
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	88 2f       	mov	r24, r24
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	83 70       	andi	r24, 0x03	; 3
    325e:	90 70       	andi	r25, 0x00	; 0
    3260:	00 97       	sbiw	r24, 0x00	; 0
    3262:	d1 f4       	brne	.+52     	; 0x3298 <line+0xa20>
  {       t=1;       
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	9e 83       	std	Y+6, r25	; 0x06
    326a:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    326c:	80 91 ce 0d 	lds	r24, 0x0DCE
    3270:	90 91 cf 0d 	lds	r25, 0x0DCF
    3274:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    3278:	8f 81       	ldd	r24, Y+7	; 0x07
    327a:	98 85       	ldd	r25, Y+8	; 0x08
    327c:	83 30       	cpi	r24, 0x03	; 3
    327e:	91 05       	cpc	r25, r1
    3280:	49 f4       	brne	.+18     	; 0x3294 <line+0xa1c>
   {  set_PWM_value(MID);soft_right();}
    3282:	80 91 8a 03 	lds	r24, 0x038A
    3286:	90 91 8b 03 	lds	r25, 0x038B
    328a:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    328e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    3292:	02 c0       	rjmp	.+4      	; 0x3298 <line+0xa20>
else 
  soft_left();
    3294:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00011011 && (P2 & 0b11) == 0b01 )//40
    3298:	e6 e0       	ldi	r30, 0x06	; 6
    329a:	f1 e0       	ldi	r31, 0x01	; 1
    329c:	80 81       	ld	r24, Z
    329e:	8b 31       	cpi	r24, 0x1B	; 27
    32a0:	21 f5       	brne	.+72     	; 0x32ea <line+0xa72>
    32a2:	e2 e3       	ldi	r30, 0x32	; 50
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
    32a8:	88 2f       	mov	r24, r24
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	83 70       	andi	r24, 0x03	; 3
    32ae:	90 70       	andi	r25, 0x00	; 0
    32b0:	81 30       	cpi	r24, 0x01	; 1
    32b2:	91 05       	cpc	r25, r1
    32b4:	d1 f4       	brne	.+52     	; 0x32ea <line+0xa72>
  {       t=1;       
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	9e 83       	std	Y+6, r25	; 0x06
    32bc:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    32be:	80 91 81 03 	lds	r24, 0x0381
    32c2:	90 91 82 03 	lds	r25, 0x0382
    32c6:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    32ca:	8f 81       	ldd	r24, Y+7	; 0x07
    32cc:	98 85       	ldd	r25, Y+8	; 0x08
    32ce:	83 30       	cpi	r24, 0x03	; 3
    32d0:	91 05       	cpc	r25, r1
    32d2:	49 f4       	brne	.+18     	; 0x32e6 <line+0xa6e>
   {  set_PWM_value(MID);soft_right();}
    32d4:	80 91 8a 03 	lds	r24, 0x038A
    32d8:	90 91 8b 03 	lds	r25, 0x038B
    32dc:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    32e0:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    32e4:	02 c0       	rjmp	.+4      	; 0x32ea <line+0xa72>
else 
  forward();
    32e6:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
    if((P1 & 0b11111111) == 0b00011001 && (P2 & 0b11) == 0b01 )//41
    32ea:	e6 e0       	ldi	r30, 0x06	; 6
    32ec:	f1 e0       	ldi	r31, 0x01	; 1
    32ee:	80 81       	ld	r24, Z
    32f0:	89 31       	cpi	r24, 0x19	; 25
    32f2:	21 f5       	brne	.+72     	; 0x333c <line+0xac4>
    32f4:	e2 e3       	ldi	r30, 0x32	; 50
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	88 2f       	mov	r24, r24
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	83 70       	andi	r24, 0x03	; 3
    3300:	90 70       	andi	r25, 0x00	; 0
    3302:	81 30       	cpi	r24, 0x01	; 1
    3304:	91 05       	cpc	r25, r1
    3306:	d1 f4       	brne	.+52     	; 0x333c <line+0xac4>
  {       t=1;       
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	9e 83       	std	Y+6, r25	; 0x06
    330e:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3310:	80 91 81 03 	lds	r24, 0x0381
    3314:	90 91 82 03 	lds	r25, 0x0382
    3318:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    331c:	8f 81       	ldd	r24, Y+7	; 0x07
    331e:	98 85       	ldd	r25, Y+8	; 0x08
    3320:	83 30       	cpi	r24, 0x03	; 3
    3322:	91 05       	cpc	r25, r1
    3324:	49 f4       	brne	.+18     	; 0x3338 <line+0xac0>
   {  set_PWM_value(MID);soft_right();}
    3326:	80 91 8a 03 	lds	r24, 0x038A
    332a:	90 91 8b 03 	lds	r25, 0x038B
    332e:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3332:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    3336:	02 c0       	rjmp	.+4      	; 0x333c <line+0xac4>
else 
  forward();
    3338:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
    if((P1 & 0b11111111) == 0b00011101 && (P2 & 0b11) == 0b00 )//42
    333c:	e6 e0       	ldi	r30, 0x06	; 6
    333e:	f1 e0       	ldi	r31, 0x01	; 1
    3340:	80 81       	ld	r24, Z
    3342:	8d 31       	cpi	r24, 0x1D	; 29
    3344:	19 f5       	brne	.+70     	; 0x338c <line+0xb14>
    3346:	e2 e3       	ldi	r30, 0x32	; 50
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	88 2f       	mov	r24, r24
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	83 70       	andi	r24, 0x03	; 3
    3352:	90 70       	andi	r25, 0x00	; 0
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	d1 f4       	brne	.+52     	; 0x338c <line+0xb14>
  {       t=1;       
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	9e 83       	std	Y+6, r25	; 0x06
    335e:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3360:	80 91 81 03 	lds	r24, 0x0381
    3364:	90 91 82 03 	lds	r25, 0x0382
    3368:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    336c:	8f 81       	ldd	r24, Y+7	; 0x07
    336e:	98 85       	ldd	r25, Y+8	; 0x08
    3370:	83 30       	cpi	r24, 0x03	; 3
    3372:	91 05       	cpc	r25, r1
    3374:	49 f4       	brne	.+18     	; 0x3388 <line+0xb10>
   {  set_PWM_value(MID);soft_right();}
    3376:	80 91 8a 03 	lds	r24, 0x038A
    337a:	90 91 8b 03 	lds	r25, 0x038B
    337e:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3382:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    3386:	02 c0       	rjmp	.+4      	; 0x338c <line+0xb14>
else 
  forward();
    3388:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
    if((P1 & 0b11111111) == 0b00011001 && (P2 & 0b11) == 0b00 )//43
    338c:	e6 e0       	ldi	r30, 0x06	; 6
    338e:	f1 e0       	ldi	r31, 0x01	; 1
    3390:	80 81       	ld	r24, Z
    3392:	89 31       	cpi	r24, 0x19	; 25
    3394:	19 f5       	brne	.+70     	; 0x33dc <line+0xb64>
    3396:	e2 e3       	ldi	r30, 0x32	; 50
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	88 2f       	mov	r24, r24
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	83 70       	andi	r24, 0x03	; 3
    33a2:	90 70       	andi	r25, 0x00	; 0
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	d1 f4       	brne	.+52     	; 0x33dc <line+0xb64>
  {       t=1;       
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	9e 83       	std	Y+6, r25	; 0x06
    33ae:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    33b0:	80 91 81 03 	lds	r24, 0x0381
    33b4:	90 91 82 03 	lds	r25, 0x0382
    33b8:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    33bc:	8f 81       	ldd	r24, Y+7	; 0x07
    33be:	98 85       	ldd	r25, Y+8	; 0x08
    33c0:	83 30       	cpi	r24, 0x03	; 3
    33c2:	91 05       	cpc	r25, r1
    33c4:	49 f4       	brne	.+18     	; 0x33d8 <line+0xb60>
   {  set_PWM_value(HIGH);soft_right();}
    33c6:	80 91 81 03 	lds	r24, 0x0381
    33ca:	90 91 82 03 	lds	r25, 0x0382
    33ce:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    33d2:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    33d6:	02 c0       	rjmp	.+4      	; 0x33dc <line+0xb64>
else 
  forward();
    33d8:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
    if((P1 & 0b11111111) == 0b00011000 && (P2 & 0b11) == 0b01 )//44
    33dc:	e6 e0       	ldi	r30, 0x06	; 6
    33de:	f1 e0       	ldi	r31, 0x01	; 1
    33e0:	80 81       	ld	r24, Z
    33e2:	88 31       	cpi	r24, 0x18	; 24
    33e4:	21 f5       	brne	.+72     	; 0x342e <line+0xbb6>
    33e6:	e2 e3       	ldi	r30, 0x32	; 50
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	80 81       	ld	r24, Z
    33ec:	88 2f       	mov	r24, r24
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	83 70       	andi	r24, 0x03	; 3
    33f2:	90 70       	andi	r25, 0x00	; 0
    33f4:	81 30       	cpi	r24, 0x01	; 1
    33f6:	91 05       	cpc	r25, r1
    33f8:	d1 f4       	brne	.+52     	; 0x342e <line+0xbb6>
  {       t=1;       
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	9e 83       	std	Y+6, r25	; 0x06
    3400:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3402:	80 91 81 03 	lds	r24, 0x0381
    3406:	90 91 82 03 	lds	r25, 0x0382
    340a:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    340e:	8f 81       	ldd	r24, Y+7	; 0x07
    3410:	98 85       	ldd	r25, Y+8	; 0x08
    3412:	83 30       	cpi	r24, 0x03	; 3
    3414:	91 05       	cpc	r25, r1
    3416:	49 f4       	brne	.+18     	; 0x342a <line+0xbb2>
   {  set_PWM_value(HIGH);soft_right();}
    3418:	80 91 81 03 	lds	r24, 0x0381
    341c:	90 91 82 03 	lds	r25, 0x0382
    3420:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3424:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    3428:	02 c0       	rjmp	.+4      	; 0x342e <line+0xbb6>
else 
  forward();
    342a:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
    if((P1 & 0b11111111) == 0b00011010 && (P2 & 0b11) == 0b00 )//45
    342e:	e6 e0       	ldi	r30, 0x06	; 6
    3430:	f1 e0       	ldi	r31, 0x01	; 1
    3432:	80 81       	ld	r24, Z
    3434:	8a 31       	cpi	r24, 0x1A	; 26
    3436:	19 f5       	brne	.+70     	; 0x347e <line+0xc06>
    3438:	e2 e3       	ldi	r30, 0x32	; 50
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	80 81       	ld	r24, Z
    343e:	88 2f       	mov	r24, r24
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	83 70       	andi	r24, 0x03	; 3
    3444:	90 70       	andi	r25, 0x00	; 0
    3446:	00 97       	sbiw	r24, 0x00	; 0
    3448:	d1 f4       	brne	.+52     	; 0x347e <line+0xc06>
  {       t=1;       
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	9e 83       	std	Y+6, r25	; 0x06
    3450:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3452:	80 91 81 03 	lds	r24, 0x0381
    3456:	90 91 82 03 	lds	r25, 0x0382
    345a:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    345e:	8f 81       	ldd	r24, Y+7	; 0x07
    3460:	98 85       	ldd	r25, Y+8	; 0x08
    3462:	83 30       	cpi	r24, 0x03	; 3
    3464:	91 05       	cpc	r25, r1
    3466:	49 f4       	brne	.+18     	; 0x347a <line+0xc02>
   {  set_PWM_value(MID);soft_right();}
    3468:	80 91 8a 03 	lds	r24, 0x038A
    346c:	90 91 8b 03 	lds	r25, 0x038B
    3470:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3474:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    3478:	02 c0       	rjmp	.+4      	; 0x347e <line+0xc06>
else 
  forward();
    347a:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }


    if((P1 & 0b11111111) == 0b00001000 && (P2 & 0b11) == 0b01 )//60
    347e:	e6 e0       	ldi	r30, 0x06	; 6
    3480:	f1 e0       	ldi	r31, 0x01	; 1
    3482:	80 81       	ld	r24, Z
    3484:	88 30       	cpi	r24, 0x08	; 8
    3486:	b1 f4       	brne	.+44     	; 0x34b4 <line+0xc3c>
    3488:	e2 e3       	ldi	r30, 0x32	; 50
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	88 2f       	mov	r24, r24
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	83 70       	andi	r24, 0x03	; 3
    3494:	90 70       	andi	r25, 0x00	; 0
    3496:	81 30       	cpi	r24, 0x01	; 1
    3498:	91 05       	cpc	r25, r1
    349a:	61 f4       	brne	.+24     	; 0x34b4 <line+0xc3c>
  {       t=1;       
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	9e 83       	std	Y+6, r25	; 0x06
    34a2:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    34a4:	80 91 8a 03 	lds	r24, 0x038A
    34a8:	90 91 8b 03 	lds	r25, 0x038B
    34ac:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    34b0:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00001001 && (P2 & 0b11) == 0b01 )//61
    34b4:	e6 e0       	ldi	r30, 0x06	; 6
    34b6:	f1 e0       	ldi	r31, 0x01	; 1
    34b8:	80 81       	ld	r24, Z
    34ba:	89 30       	cpi	r24, 0x09	; 9
    34bc:	b1 f4       	brne	.+44     	; 0x34ea <line+0xc72>
    34be:	e2 e3       	ldi	r30, 0x32	; 50
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	80 81       	ld	r24, Z
    34c4:	88 2f       	mov	r24, r24
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	83 70       	andi	r24, 0x03	; 3
    34ca:	90 70       	andi	r25, 0x00	; 0
    34cc:	81 30       	cpi	r24, 0x01	; 1
    34ce:	91 05       	cpc	r25, r1
    34d0:	61 f4       	brne	.+24     	; 0x34ea <line+0xc72>
  {       t=1;       
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	9e 83       	std	Y+6, r25	; 0x06
    34d8:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    34da:	80 91 8a 03 	lds	r24, 0x038A
    34de:	90 91 8b 03 	lds	r25, 0x038B
    34e2:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    34e6:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }

  if((P1 & 0b11111111) == 0b00001001 && (P2 & 0b11) == 0b00 )//62
    34ea:	e6 e0       	ldi	r30, 0x06	; 6
    34ec:	f1 e0       	ldi	r31, 0x01	; 1
    34ee:	80 81       	ld	r24, Z
    34f0:	89 30       	cpi	r24, 0x09	; 9
    34f2:	a9 f4       	brne	.+42     	; 0x351e <line+0xca6>
    34f4:	e2 e3       	ldi	r30, 0x32	; 50
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	88 2f       	mov	r24, r24
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	83 70       	andi	r24, 0x03	; 3
    3500:	90 70       	andi	r25, 0x00	; 0
    3502:	00 97       	sbiw	r24, 0x00	; 0
    3504:	61 f4       	brne	.+24     	; 0x351e <line+0xca6>
  {       t=1;       
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	9e 83       	std	Y+6, r25	; 0x06
    350c:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    350e:	80 91 8a 03 	lds	r24, 0x038A
    3512:	90 91 8b 03 	lds	r25, 0x038B
    3516:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    351a:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
 
  if((P1 & 0b11111111) == 0b00001011 && (P2 & 0b11) == 0b00 )//64
    351e:	e6 e0       	ldi	r30, 0x06	; 6
    3520:	f1 e0       	ldi	r31, 0x01	; 1
    3522:	80 81       	ld	r24, Z
    3524:	8b 30       	cpi	r24, 0x0B	; 11
    3526:	a9 f4       	brne	.+42     	; 0x3552 <line+0xcda>
    3528:	e2 e3       	ldi	r30, 0x32	; 50
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z
    352e:	88 2f       	mov	r24, r24
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	83 70       	andi	r24, 0x03	; 3
    3534:	90 70       	andi	r25, 0x00	; 0
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	61 f4       	brne	.+24     	; 0x3552 <line+0xcda>
  {       t=1;       
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	9e 83       	std	Y+6, r25	; 0x06
    3540:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    3542:	80 91 8a 03 	lds	r24, 0x038A
    3546:	90 91 8b 03 	lds	r25, 0x038B
    354a:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    354e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00001011 && (P2 & 0b11) == 0b01 )//65
    3552:	e6 e0       	ldi	r30, 0x06	; 6
    3554:	f1 e0       	ldi	r31, 0x01	; 1
    3556:	80 81       	ld	r24, Z
    3558:	8b 30       	cpi	r24, 0x0B	; 11
    355a:	b1 f4       	brne	.+44     	; 0x3588 <line+0xd10>
    355c:	e2 e3       	ldi	r30, 0x32	; 50
    355e:	f0 e0       	ldi	r31, 0x00	; 0
    3560:	80 81       	ld	r24, Z
    3562:	88 2f       	mov	r24, r24
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	83 70       	andi	r24, 0x03	; 3
    3568:	90 70       	andi	r25, 0x00	; 0
    356a:	81 30       	cpi	r24, 0x01	; 1
    356c:	91 05       	cpc	r25, r1
    356e:	61 f4       	brne	.+24     	; 0x3588 <line+0xd10>
  {       t=1;       
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	9e 83       	std	Y+6, r25	; 0x06
    3576:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    3578:	80 91 8a 03 	lds	r24, 0x038A
    357c:	90 91 8b 03 	lds	r25, 0x038B
    3580:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    3584:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00001100 && (P2 & 0b11) == 0b01 )//66
    3588:	e6 e0       	ldi	r30, 0x06	; 6
    358a:	f1 e0       	ldi	r31, 0x01	; 1
    358c:	80 81       	ld	r24, Z
    358e:	8c 30       	cpi	r24, 0x0C	; 12
    3590:	b1 f4       	brne	.+44     	; 0x35be <line+0xd46>
    3592:	e2 e3       	ldi	r30, 0x32	; 50
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
    3598:	88 2f       	mov	r24, r24
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	83 70       	andi	r24, 0x03	; 3
    359e:	90 70       	andi	r25, 0x00	; 0
    35a0:	81 30       	cpi	r24, 0x01	; 1
    35a2:	91 05       	cpc	r25, r1
    35a4:	61 f4       	brne	.+24     	; 0x35be <line+0xd46>
  {       t=1;       
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	9e 83       	std	Y+6, r25	; 0x06
    35ac:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    35ae:	80 91 8a 03 	lds	r24, 0x038A
    35b2:	90 91 8b 03 	lds	r25, 0x038B
    35b6:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    35ba:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00001111 && (P2 & 0b11) == 0b01 )//67
    35be:	e6 e0       	ldi	r30, 0x06	; 6
    35c0:	f1 e0       	ldi	r31, 0x01	; 1
    35c2:	80 81       	ld	r24, Z
    35c4:	8f 30       	cpi	r24, 0x0F	; 15
    35c6:	b1 f4       	brne	.+44     	; 0x35f4 <line+0xd7c>
    35c8:	e2 e3       	ldi	r30, 0x32	; 50
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	88 2f       	mov	r24, r24
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	83 70       	andi	r24, 0x03	; 3
    35d4:	90 70       	andi	r25, 0x00	; 0
    35d6:	81 30       	cpi	r24, 0x01	; 1
    35d8:	91 05       	cpc	r25, r1
    35da:	61 f4       	brne	.+24     	; 0x35f4 <line+0xd7c>
  {       t=1;       
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	9e 83       	std	Y+6, r25	; 0x06
    35e2:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    35e4:	80 91 8a 03 	lds	r24, 0x038A
    35e8:	90 91 8b 03 	lds	r25, 0x038B
    35ec:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    35f0:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00001101 && (P2 & 0b11) == 0b01 )//68
    35f4:	e6 e0       	ldi	r30, 0x06	; 6
    35f6:	f1 e0       	ldi	r31, 0x01	; 1
    35f8:	80 81       	ld	r24, Z
    35fa:	8d 30       	cpi	r24, 0x0D	; 13
    35fc:	b1 f4       	brne	.+44     	; 0x362a <line+0xdb2>
    35fe:	e2 e3       	ldi	r30, 0x32	; 50
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	80 81       	ld	r24, Z
    3604:	88 2f       	mov	r24, r24
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	83 70       	andi	r24, 0x03	; 3
    360a:	90 70       	andi	r25, 0x00	; 0
    360c:	81 30       	cpi	r24, 0x01	; 1
    360e:	91 05       	cpc	r25, r1
    3610:	61 f4       	brne	.+24     	; 0x362a <line+0xdb2>
  {       t=1;       
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	9e 83       	std	Y+6, r25	; 0x06
    3618:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    361a:	80 91 8a 03 	lds	r24, 0x038A
    361e:	90 91 8b 03 	lds	r25, 0x038B
    3622:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    3626:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00000110 && (P2 & 0b11) == 0b00 )//69
    362a:	e6 e0       	ldi	r30, 0x06	; 6
    362c:	f1 e0       	ldi	r31, 0x01	; 1
    362e:	80 81       	ld	r24, Z
    3630:	86 30       	cpi	r24, 0x06	; 6
    3632:	a9 f4       	brne	.+42     	; 0x365e <line+0xde6>
    3634:	e2 e3       	ldi	r30, 0x32	; 50
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 81       	ld	r24, Z
    363a:	88 2f       	mov	r24, r24
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	83 70       	andi	r24, 0x03	; 3
    3640:	90 70       	andi	r25, 0x00	; 0
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	61 f4       	brne	.+24     	; 0x365e <line+0xde6>
  {       t=1;       
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	9e 83       	std	Y+6, r25	; 0x06
    364c:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    364e:	80 91 8a 03 	lds	r24, 0x038A
    3652:	90 91 8b 03 	lds	r25, 0x038B
    3656:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    365a:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00000010 && (P2 & 0b11) == 0b00 )//70
    365e:	e6 e0       	ldi	r30, 0x06	; 6
    3660:	f1 e0       	ldi	r31, 0x01	; 1
    3662:	80 81       	ld	r24, Z
    3664:	82 30       	cpi	r24, 0x02	; 2
    3666:	a9 f4       	brne	.+42     	; 0x3692 <line+0xe1a>
    3668:	e2 e3       	ldi	r30, 0x32	; 50
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	80 81       	ld	r24, Z
    366e:	88 2f       	mov	r24, r24
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	83 70       	andi	r24, 0x03	; 3
    3674:	90 70       	andi	r25, 0x00	; 0
    3676:	00 97       	sbiw	r24, 0x00	; 0
    3678:	61 f4       	brne	.+24     	; 0x3692 <line+0xe1a>
  {       t=1;       
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	9e 83       	std	Y+6, r25	; 0x06
    3680:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    3682:	80 91 8a 03 	lds	r24, 0x038A
    3686:	90 91 8b 03 	lds	r25, 0x038B
    368a:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    368e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00000011 && (P2 & 0b11) == 0b00 )//71
    3692:	e6 e0       	ldi	r30, 0x06	; 6
    3694:	f1 e0       	ldi	r31, 0x01	; 1
    3696:	80 81       	ld	r24, Z
    3698:	83 30       	cpi	r24, 0x03	; 3
    369a:	a9 f4       	brne	.+42     	; 0x36c6 <line+0xe4e>
    369c:	e2 e3       	ldi	r30, 0x32	; 50
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	80 81       	ld	r24, Z
    36a2:	88 2f       	mov	r24, r24
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	83 70       	andi	r24, 0x03	; 3
    36a8:	90 70       	andi	r25, 0x00	; 0
    36aa:	00 97       	sbiw	r24, 0x00	; 0
    36ac:	61 f4       	brne	.+24     	; 0x36c6 <line+0xe4e>
  {       t=1;       
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	9e 83       	std	Y+6, r25	; 0x06
    36b4:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    36b6:	80 91 8a 03 	lds	r24, 0x038A
    36ba:	90 91 8b 03 	lds	r25, 0x038B
    36be:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    36c2:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00000011 && (P2 & 0b11) == 0b01 )//72
    36c6:	e6 e0       	ldi	r30, 0x06	; 6
    36c8:	f1 e0       	ldi	r31, 0x01	; 1
    36ca:	80 81       	ld	r24, Z
    36cc:	83 30       	cpi	r24, 0x03	; 3
    36ce:	b1 f4       	brne	.+44     	; 0x36fc <line+0xe84>
    36d0:	e2 e3       	ldi	r30, 0x32	; 50
    36d2:	f0 e0       	ldi	r31, 0x00	; 0
    36d4:	80 81       	ld	r24, Z
    36d6:	88 2f       	mov	r24, r24
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	83 70       	andi	r24, 0x03	; 3
    36dc:	90 70       	andi	r25, 0x00	; 0
    36de:	81 30       	cpi	r24, 0x01	; 1
    36e0:	91 05       	cpc	r25, r1
    36e2:	61 f4       	brne	.+24     	; 0x36fc <line+0xe84>
  {       t=1;       
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	9e 83       	std	Y+6, r25	; 0x06
    36ea:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    36ec:	80 91 8a 03 	lds	r24, 0x038A
    36f0:	90 91 8b 03 	lds	r25, 0x038B
    36f4:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    36f8:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00000100 && (P2 & 0b11) == 0b00 )//73
    36fc:	e6 e0       	ldi	r30, 0x06	; 6
    36fe:	f1 e0       	ldi	r31, 0x01	; 1
    3700:	80 81       	ld	r24, Z
    3702:	84 30       	cpi	r24, 0x04	; 4
    3704:	a9 f4       	brne	.+42     	; 0x3730 <line+0xeb8>
    3706:	e2 e3       	ldi	r30, 0x32	; 50
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	80 81       	ld	r24, Z
    370c:	88 2f       	mov	r24, r24
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	83 70       	andi	r24, 0x03	; 3
    3712:	90 70       	andi	r25, 0x00	; 0
    3714:	00 97       	sbiw	r24, 0x00	; 0
    3716:	61 f4       	brne	.+24     	; 0x3730 <line+0xeb8>
  {       t=1;       
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	9e 83       	std	Y+6, r25	; 0x06
    371e:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    3720:	80 91 8a 03 	lds	r24, 0x038A
    3724:	90 91 8b 03 	lds	r25, 0x038B
    3728:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    372c:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  if((P1 & 0b11111111) == 0b00000001 && (P2 & 0b11) == 0b01 )//74
    3730:	e6 e0       	ldi	r30, 0x06	; 6
    3732:	f1 e0       	ldi	r31, 0x01	; 1
    3734:	80 81       	ld	r24, Z
    3736:	81 30       	cpi	r24, 0x01	; 1
    3738:	b1 f4       	brne	.+44     	; 0x3766 <line+0xeee>
    373a:	e2 e3       	ldi	r30, 0x32	; 50
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	80 81       	ld	r24, Z
    3740:	88 2f       	mov	r24, r24
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	83 70       	andi	r24, 0x03	; 3
    3746:	90 70       	andi	r25, 0x00	; 0
    3748:	81 30       	cpi	r24, 0x01	; 1
    374a:	91 05       	cpc	r25, r1
    374c:	61 f4       	brne	.+24     	; 0x3766 <line+0xeee>
  {       t=1;       
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	9e 83       	std	Y+6, r25	; 0x06
    3754:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(MID);
    3756:	80 91 8a 03 	lds	r24, 0x038A
    375a:	90 91 8b 03 	lds	r25, 0x038B
    375e:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    3762:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }

   if((P1 & 0b11111111) == 0b00000000 && (P2 & 0b11) == 0b01 )//75
    3766:	e6 e0       	ldi	r30, 0x06	; 6
    3768:	f1 e0       	ldi	r31, 0x01	; 1
    376a:	80 81       	ld	r24, Z
    376c:	88 23       	and	r24, r24
    376e:	b1 f4       	brne	.+44     	; 0x379c <line+0xf24>
    3770:	e2 e3       	ldi	r30, 0x32	; 50
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	80 81       	ld	r24, Z
    3776:	88 2f       	mov	r24, r24
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	83 70       	andi	r24, 0x03	; 3
    377c:	90 70       	andi	r25, 0x00	; 0
    377e:	81 30       	cpi	r24, 0x01	; 1
    3780:	91 05       	cpc	r25, r1
    3782:	61 f4       	brne	.+24     	; 0x379c <line+0xf24>
  {       t=1;       
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	9e 83       	std	Y+6, r25	; 0x06
    378a:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    378c:	80 91 81 03 	lds	r24, 0x0381
    3790:	90 91 82 03 	lds	r25, 0x0382
    3794:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_right();
    3798:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
  			   
  }



 if((P1 & 0b11111111) == 0b01110000 && (P2 & 0b11) == 0b00 )//90
    379c:	e6 e0       	ldi	r30, 0x06	; 6
    379e:	f1 e0       	ldi	r31, 0x01	; 1
    37a0:	80 81       	ld	r24, Z
    37a2:	80 37       	cpi	r24, 0x70	; 112
    37a4:	a9 f4       	brne	.+42     	; 0x37d0 <line+0xf58>
    37a6:	e2 e3       	ldi	r30, 0x32	; 50
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	80 81       	ld	r24, Z
    37ac:	88 2f       	mov	r24, r24
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	83 70       	andi	r24, 0x03	; 3
    37b2:	90 70       	andi	r25, 0x00	; 0
    37b4:	00 97       	sbiw	r24, 0x00	; 0
    37b6:	61 f4       	brne	.+24     	; 0x37d0 <line+0xf58>
  {       t=1;       
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	9e 83       	std	Y+6, r25	; 0x06
    37be:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    37c0:	80 91 ce 0d 	lds	r24, 0x0DCE
    37c4:	90 91 cf 0d 	lds	r25, 0x0DCF
    37c8:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    37cc:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
   if((P1 & 0b11111111) == 0b01100000 && (P2 & 0b11) == 0b00 )//91
    37d0:	e6 e0       	ldi	r30, 0x06	; 6
    37d2:	f1 e0       	ldi	r31, 0x01	; 1
    37d4:	80 81       	ld	r24, Z
    37d6:	80 36       	cpi	r24, 0x60	; 96
    37d8:	a9 f4       	brne	.+42     	; 0x3804 <line+0xf8c>
    37da:	e2 e3       	ldi	r30, 0x32	; 50
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	88 2f       	mov	r24, r24
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	83 70       	andi	r24, 0x03	; 3
    37e6:	90 70       	andi	r25, 0x00	; 0
    37e8:	00 97       	sbiw	r24, 0x00	; 0
    37ea:	61 f4       	brne	.+24     	; 0x3804 <line+0xf8c>
  {       t=1;       
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	9e 83       	std	Y+6, r25	; 0x06
    37f2:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    37f4:	80 91 ce 0d 	lds	r24, 0x0DCE
    37f8:	90 91 cf 0d 	lds	r25, 0x0DCF
    37fc:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    3800:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
   if((P1 & 0b11111111) == 0b00110000 && (P2 & 0b11) == 0b00 )//92
    3804:	e6 e0       	ldi	r30, 0x06	; 6
    3806:	f1 e0       	ldi	r31, 0x01	; 1
    3808:	80 81       	ld	r24, Z
    380a:	80 33       	cpi	r24, 0x30	; 48
    380c:	a9 f4       	brne	.+42     	; 0x3838 <line+0xfc0>
    380e:	e2 e3       	ldi	r30, 0x32	; 50
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	80 81       	ld	r24, Z
    3814:	88 2f       	mov	r24, r24
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	83 70       	andi	r24, 0x03	; 3
    381a:	90 70       	andi	r25, 0x00	; 0
    381c:	00 97       	sbiw	r24, 0x00	; 0
    381e:	61 f4       	brne	.+24     	; 0x3838 <line+0xfc0>
  {       t=1;       
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	9e 83       	std	Y+6, r25	; 0x06
    3826:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    3828:	80 91 ce 0d 	lds	r24, 0x0DCE
    382c:	90 91 cf 0d 	lds	r25, 0x0DCF
    3830:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    3834:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
   if((P1 & 0b11111111) == 0b00100000 && (P2 & 0b11) == 0b00 )//93
    3838:	e6 e0       	ldi	r30, 0x06	; 6
    383a:	f1 e0       	ldi	r31, 0x01	; 1
    383c:	80 81       	ld	r24, Z
    383e:	80 32       	cpi	r24, 0x20	; 32
    3840:	a9 f4       	brne	.+42     	; 0x386c <line+0xff4>
    3842:	e2 e3       	ldi	r30, 0x32	; 50
    3844:	f0 e0       	ldi	r31, 0x00	; 0
    3846:	80 81       	ld	r24, Z
    3848:	88 2f       	mov	r24, r24
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	83 70       	andi	r24, 0x03	; 3
    384e:	90 70       	andi	r25, 0x00	; 0
    3850:	00 97       	sbiw	r24, 0x00	; 0
    3852:	61 f4       	brne	.+24     	; 0x386c <line+0xff4>
  {       t=1;       
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	9e 83       	std	Y+6, r25	; 0x06
    385a:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    385c:	80 91 ce 0d 	lds	r24, 0x0DCE
    3860:	90 91 cf 0d 	lds	r25, 0x0DCF
    3864:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    3868:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
   if((P1 & 0b11111111) == 0b11100000 && (P2 & 0b11) == 0b00 )//94
    386c:	e6 e0       	ldi	r30, 0x06	; 6
    386e:	f1 e0       	ldi	r31, 0x01	; 1
    3870:	80 81       	ld	r24, Z
    3872:	80 3e       	cpi	r24, 0xE0	; 224
    3874:	a9 f4       	brne	.+42     	; 0x38a0 <line+0x1028>
    3876:	e2 e3       	ldi	r30, 0x32	; 50
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	80 81       	ld	r24, Z
    387c:	88 2f       	mov	r24, r24
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	83 70       	andi	r24, 0x03	; 3
    3882:	90 70       	andi	r25, 0x00	; 0
    3884:	00 97       	sbiw	r24, 0x00	; 0
    3886:	61 f4       	brne	.+24     	; 0x38a0 <line+0x1028>
  {       t=1;       
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	9e 83       	std	Y+6, r25	; 0x06
    388e:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    3890:	80 91 ce 0d 	lds	r24, 0x0DCE
    3894:	90 91 cf 0d 	lds	r25, 0x0DCF
    3898:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    389c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
   if((P1 & 0b11111111) == 0b11100000 && (P2 & 0b11) == 0b10 )//95
    38a0:	e6 e0       	ldi	r30, 0x06	; 6
    38a2:	f1 e0       	ldi	r31, 0x01	; 1
    38a4:	80 81       	ld	r24, Z
    38a6:	80 3e       	cpi	r24, 0xE0	; 224
    38a8:	b1 f4       	brne	.+44     	; 0x38d6 <line+0x105e>
    38aa:	e2 e3       	ldi	r30, 0x32	; 50
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
    38b0:	88 2f       	mov	r24, r24
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	83 70       	andi	r24, 0x03	; 3
    38b6:	90 70       	andi	r25, 0x00	; 0
    38b8:	82 30       	cpi	r24, 0x02	; 2
    38ba:	91 05       	cpc	r25, r1
    38bc:	61 f4       	brne	.+24     	; 0x38d6 <line+0x105e>
  {       t=1;       
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	9e 83       	std	Y+6, r25	; 0x06
    38c4:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    38c6:	80 91 ce 0d 	lds	r24, 0x0DCE
    38ca:	90 91 cf 0d 	lds	r25, 0x0DCF
    38ce:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    38d2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
   if((P1 & 0b11111111) == 0b11110000 && (P2 & 0b11) == 0b00 )//96
    38d6:	e6 e0       	ldi	r30, 0x06	; 6
    38d8:	f1 e0       	ldi	r31, 0x01	; 1
    38da:	80 81       	ld	r24, Z
    38dc:	80 3f       	cpi	r24, 0xF0	; 240
    38de:	a9 f4       	brne	.+42     	; 0x390a <line+0x1092>
    38e0:	e2 e3       	ldi	r30, 0x32	; 50
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	80 81       	ld	r24, Z
    38e6:	88 2f       	mov	r24, r24
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	83 70       	andi	r24, 0x03	; 3
    38ec:	90 70       	andi	r25, 0x00	; 0
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	61 f4       	brne	.+24     	; 0x390a <line+0x1092>
  {       t=1;       
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	9e 83       	std	Y+6, r25	; 0x06
    38f8:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    38fa:	80 91 ce 0d 	lds	r24, 0x0DCE
    38fe:	90 91 cf 0d 	lds	r25, 0x0DCF
    3902:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    3906:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
   if((P1 & 0b11111111) == 0b00010000 && (P2 & 0b11) == 0b00 )//97
    390a:	e6 e0       	ldi	r30, 0x06	; 6
    390c:	f1 e0       	ldi	r31, 0x01	; 1
    390e:	80 81       	ld	r24, Z
    3910:	80 31       	cpi	r24, 0x10	; 16
    3912:	a9 f4       	brne	.+42     	; 0x393e <line+0x10c6>
    3914:	e2 e3       	ldi	r30, 0x32	; 50
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	80 81       	ld	r24, Z
    391a:	88 2f       	mov	r24, r24
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	83 70       	andi	r24, 0x03	; 3
    3920:	90 70       	andi	r25, 0x00	; 0
    3922:	00 97       	sbiw	r24, 0x00	; 0
    3924:	61 f4       	brne	.+24     	; 0x393e <line+0x10c6>
  {       t=1;       
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	9e 83       	std	Y+6, r25	; 0x06
    392c:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    392e:	80 91 ce 0d 	lds	r24, 0x0DCE
    3932:	90 91 cf 0d 	lds	r25, 0x0DCF
    3936:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    393a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
   if((P1 & 0b11111111) == 0b00111110 && (P2 & 0b11) == 0b00 )//98
    393e:	e6 e0       	ldi	r30, 0x06	; 6
    3940:	f1 e0       	ldi	r31, 0x01	; 1
    3942:	80 81       	ld	r24, Z
    3944:	8e 33       	cpi	r24, 0x3E	; 62
    3946:	19 f5       	brne	.+70     	; 0x398e <line+0x1116>
    3948:	e2 e3       	ldi	r30, 0x32	; 50
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	80 81       	ld	r24, Z
    394e:	88 2f       	mov	r24, r24
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	83 70       	andi	r24, 0x03	; 3
    3954:	90 70       	andi	r25, 0x00	; 0
    3956:	00 97       	sbiw	r24, 0x00	; 0
    3958:	d1 f4       	brne	.+52     	; 0x398e <line+0x1116>
  {       t=1;       
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	9e 83       	std	Y+6, r25	; 0x06
    3960:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    3962:	80 91 ce 0d 	lds	r24, 0x0DCE
    3966:	90 91 cf 0d 	lds	r25, 0x0DCF
    396a:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    396e:	8f 81       	ldd	r24, Y+7	; 0x07
    3970:	98 85       	ldd	r25, Y+8	; 0x08
    3972:	83 30       	cpi	r24, 0x03	; 3
    3974:	91 05       	cpc	r25, r1
    3976:	49 f4       	brne	.+18     	; 0x398a <line+0x1112>
   {  set_PWM_value(MID);soft_right();}
    3978:	80 91 8a 03 	lds	r24, 0x038A
    397c:	90 91 8b 03 	lds	r25, 0x038B
    3980:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3984:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    3988:	02 c0       	rjmp	.+4      	; 0x398e <line+0x1116>
else 
  soft_left();
    398a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
   if((P1 & 0b11111111) == 0b00100111 && (P2 & 0b11) == 0b01 )//99
    398e:	e6 e0       	ldi	r30, 0x06	; 6
    3990:	f1 e0       	ldi	r31, 0x01	; 1
    3992:	80 81       	ld	r24, Z
    3994:	87 32       	cpi	r24, 0x27	; 39
    3996:	21 f5       	brne	.+72     	; 0x39e0 <line+0x1168>
    3998:	e2 e3       	ldi	r30, 0x32	; 50
    399a:	f0 e0       	ldi	r31, 0x00	; 0
    399c:	80 81       	ld	r24, Z
    399e:	88 2f       	mov	r24, r24
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	83 70       	andi	r24, 0x03	; 3
    39a4:	90 70       	andi	r25, 0x00	; 0
    39a6:	81 30       	cpi	r24, 0x01	; 1
    39a8:	91 05       	cpc	r25, r1
    39aa:	d1 f4       	brne	.+52     	; 0x39e0 <line+0x1168>
  {       t=1;       
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	9e 83       	std	Y+6, r25	; 0x06
    39b2:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(LOW);
    39b4:	80 91 ce 0d 	lds	r24, 0x0DCE
    39b8:	90 91 cf 0d 	lds	r25, 0x0DCF
    39bc:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
				 if(what==3)
    39c0:	8f 81       	ldd	r24, Y+7	; 0x07
    39c2:	98 85       	ldd	r25, Y+8	; 0x08
    39c4:	83 30       	cpi	r24, 0x03	; 3
    39c6:	91 05       	cpc	r25, r1
    39c8:	49 f4       	brne	.+18     	; 0x39dc <line+0x1164>
   {  set_PWM_value(MID);soft_right();}
    39ca:	80 91 8a 03 	lds	r24, 0x038A
    39ce:	90 91 8b 03 	lds	r25, 0x038B
    39d2:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    39d6:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    39da:	02 c0       	rjmp	.+4      	; 0x39e0 <line+0x1168>
else 
  soft_left();
    39dc:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }

    if((P1 & 0b11111111) == 0b10000000 && (P2 & 0b11) == 0b00 )//100
    39e0:	e6 e0       	ldi	r30, 0x06	; 6
    39e2:	f1 e0       	ldi	r31, 0x01	; 1
    39e4:	80 81       	ld	r24, Z
    39e6:	80 38       	cpi	r24, 0x80	; 128
    39e8:	a9 f4       	brne	.+42     	; 0x3a14 <line+0x119c>
    39ea:	e2 e3       	ldi	r30, 0x32	; 50
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	80 81       	ld	r24, Z
    39f0:	88 2f       	mov	r24, r24
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	83 70       	andi	r24, 0x03	; 3
    39f6:	90 70       	andi	r25, 0x00	; 0
    39f8:	00 97       	sbiw	r24, 0x00	; 0
    39fa:	61 f4       	brne	.+24     	; 0x3a14 <line+0x119c>
  {       t=1;       
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	9e 83       	std	Y+6, r25	; 0x06
    3a02:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3a04:	80 91 81 03 	lds	r24, 0x0381
    3a08:	90 91 82 03 	lds	r25, 0x0382
    3a0c:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    3a10:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }

    if((P1 & 0b11111111) == 0b10000000 && (P2 & 0b11) == 0b10 )//101
    3a14:	e6 e0       	ldi	r30, 0x06	; 6
    3a16:	f1 e0       	ldi	r31, 0x01	; 1
    3a18:	80 81       	ld	r24, Z
    3a1a:	80 38       	cpi	r24, 0x80	; 128
    3a1c:	b1 f4       	brne	.+44     	; 0x3a4a <line+0x11d2>
    3a1e:	e2 e3       	ldi	r30, 0x32	; 50
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	80 81       	ld	r24, Z
    3a24:	88 2f       	mov	r24, r24
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	83 70       	andi	r24, 0x03	; 3
    3a2a:	90 70       	andi	r25, 0x00	; 0
    3a2c:	82 30       	cpi	r24, 0x02	; 2
    3a2e:	91 05       	cpc	r25, r1
    3a30:	61 f4       	brne	.+24     	; 0x3a4a <line+0x11d2>
  {       t=1;       
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	9e 83       	std	Y+6, r25	; 0x06
    3a38:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3a3a:	80 91 81 03 	lds	r24, 0x0381
    3a3e:	90 91 82 03 	lds	r25, 0x0382
    3a42:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    3a46:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
    if((P1 & 0b11111111) == 0b00000000 && (P2 & 0b11) == 0b10 )//102
    3a4a:	e6 e0       	ldi	r30, 0x06	; 6
    3a4c:	f1 e0       	ldi	r31, 0x01	; 1
    3a4e:	80 81       	ld	r24, Z
    3a50:	88 23       	and	r24, r24
    3a52:	b1 f4       	brne	.+44     	; 0x3a80 <line+0x1208>
    3a54:	e2 e3       	ldi	r30, 0x32	; 50
    3a56:	f0 e0       	ldi	r31, 0x00	; 0
    3a58:	80 81       	ld	r24, Z
    3a5a:	88 2f       	mov	r24, r24
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	83 70       	andi	r24, 0x03	; 3
    3a60:	90 70       	andi	r25, 0x00	; 0
    3a62:	82 30       	cpi	r24, 0x02	; 2
    3a64:	91 05       	cpc	r25, r1
    3a66:	61 f4       	brne	.+24     	; 0x3a80 <line+0x1208>
  {       t=1;       
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	9e 83       	std	Y+6, r25	; 0x06
    3a6e:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3a70:	80 91 81 03 	lds	r24, 0x0381
    3a74:	90 91 82 03 	lds	r25, 0x0382
    3a78:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    3a7c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
    if((P1 & 0b11111111) == 0b01000000 && (P2 & 0b11) == 0b00 )//103
    3a80:	e6 e0       	ldi	r30, 0x06	; 6
    3a82:	f1 e0       	ldi	r31, 0x01	; 1
    3a84:	80 81       	ld	r24, Z
    3a86:	80 34       	cpi	r24, 0x40	; 64
    3a88:	a9 f4       	brne	.+42     	; 0x3ab4 <line+0x123c>
    3a8a:	e2 e3       	ldi	r30, 0x32	; 50
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	80 81       	ld	r24, Z
    3a90:	88 2f       	mov	r24, r24
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	83 70       	andi	r24, 0x03	; 3
    3a96:	90 70       	andi	r25, 0x00	; 0
    3a98:	00 97       	sbiw	r24, 0x00	; 0
    3a9a:	61 f4       	brne	.+24     	; 0x3ab4 <line+0x123c>
  {       t=1;       
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	9e 83       	std	Y+6, r25	; 0x06
    3aa2:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3aa4:	80 91 81 03 	lds	r24, 0x0381
    3aa8:	90 91 82 03 	lds	r25, 0x0382
    3aac:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    3ab0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
    if((P1 & 0b11111111) == 0b11000000 && (P2 & 0b11) == 0b00 )//104
    3ab4:	e6 e0       	ldi	r30, 0x06	; 6
    3ab6:	f1 e0       	ldi	r31, 0x01	; 1
    3ab8:	80 81       	ld	r24, Z
    3aba:	80 3c       	cpi	r24, 0xC0	; 192
    3abc:	a9 f4       	brne	.+42     	; 0x3ae8 <line+0x1270>
    3abe:	e2 e3       	ldi	r30, 0x32	; 50
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	80 81       	ld	r24, Z
    3ac4:	88 2f       	mov	r24, r24
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	83 70       	andi	r24, 0x03	; 3
    3aca:	90 70       	andi	r25, 0x00	; 0
    3acc:	00 97       	sbiw	r24, 0x00	; 0
    3ace:	61 f4       	brne	.+24     	; 0x3ae8 <line+0x1270>
  {       t=1;       
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	9e 83       	std	Y+6, r25	; 0x06
    3ad6:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3ad8:	80 91 81 03 	lds	r24, 0x0381
    3adc:	90 91 82 03 	lds	r25, 0x0382
    3ae0:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  soft_left();
    3ae4:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>




  
    if((P1 & 0b11111111) == 0b00011100  && (P2&0b11) == 0b00 )//105
    3ae8:	e6 e0       	ldi	r30, 0x06	; 6
    3aea:	f1 e0       	ldi	r31, 0x01	; 1
    3aec:	80 81       	ld	r24, Z
    3aee:	8c 31       	cpi	r24, 0x1C	; 28
    3af0:	19 f5       	brne	.+70     	; 0x3b38 <line+0x12c0>
    3af2:	e2 e3       	ldi	r30, 0x32	; 50
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	80 81       	ld	r24, Z
    3af8:	88 2f       	mov	r24, r24
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	83 70       	andi	r24, 0x03	; 3
    3afe:	90 70       	andi	r25, 0x00	; 0
    3b00:	00 97       	sbiw	r24, 0x00	; 0
    3b02:	d1 f4       	brne	.+52     	; 0x3b38 <line+0x12c0>
  {       t=1;       
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	9e 83       	std	Y+6, r25	; 0x06
    3b0a:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3b0c:	80 91 81 03 	lds	r24, 0x0381
    3b10:	90 91 82 03 	lds	r25, 0x0382
    3b14:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
					 if(what==3)
    3b18:	8f 81       	ldd	r24, Y+7	; 0x07
    3b1a:	98 85       	ldd	r25, Y+8	; 0x08
    3b1c:	83 30       	cpi	r24, 0x03	; 3
    3b1e:	91 05       	cpc	r25, r1
    3b20:	49 f4       	brne	.+18     	; 0x3b34 <line+0x12bc>
   {  set_PWM_value(LOW);soft_right();}
    3b22:	80 91 ce 0d 	lds	r24, 0x0DCE
    3b26:	90 91 cf 0d 	lds	r25, 0x0DCF
    3b2a:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3b2e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    3b32:	02 c0       	rjmp	.+4      	; 0x3b38 <line+0x12c0>
else 
  forward();
    3b34:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  
    if((P1 & 0b11111111) == 0b00011110 && (P2 & 0b11) == 0b00 )//106
    3b38:	e6 e0       	ldi	r30, 0x06	; 6
    3b3a:	f1 e0       	ldi	r31, 0x01	; 1
    3b3c:	80 81       	ld	r24, Z
    3b3e:	8e 31       	cpi	r24, 0x1E	; 30
    3b40:	19 f5       	brne	.+70     	; 0x3b88 <line+0x1310>
    3b42:	e2 e3       	ldi	r30, 0x32	; 50
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	80 81       	ld	r24, Z
    3b48:	88 2f       	mov	r24, r24
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	83 70       	andi	r24, 0x03	; 3
    3b4e:	90 70       	andi	r25, 0x00	; 0
    3b50:	00 97       	sbiw	r24, 0x00	; 0
    3b52:	d1 f4       	brne	.+52     	; 0x3b88 <line+0x1310>
  {       t=1;       
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	9e 83       	std	Y+6, r25	; 0x06
    3b5a:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3b5c:	80 91 81 03 	lds	r24, 0x0381
    3b60:	90 91 82 03 	lds	r25, 0x0382
    3b64:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
					 if(what==3)
    3b68:	8f 81       	ldd	r24, Y+7	; 0x07
    3b6a:	98 85       	ldd	r25, Y+8	; 0x08
    3b6c:	83 30       	cpi	r24, 0x03	; 3
    3b6e:	91 05       	cpc	r25, r1
    3b70:	49 f4       	brne	.+18     	; 0x3b84 <line+0x130c>
   {  set_PWM_value(MID);soft_right();}
    3b72:	80 91 8a 03 	lds	r24, 0x038A
    3b76:	90 91 8b 03 	lds	r25, 0x038B
    3b7a:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3b7e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    3b82:	02 c0       	rjmp	.+4      	; 0x3b88 <line+0x1310>
else 
  forward();
    3b84:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  
    if((P1 & 0b11111111) == 0b00111000 && (P2 & 0b11) == 0b00 )//107
    3b88:	e6 e0       	ldi	r30, 0x06	; 6
    3b8a:	f1 e0       	ldi	r31, 0x01	; 1
    3b8c:	80 81       	ld	r24, Z
    3b8e:	88 33       	cpi	r24, 0x38	; 56
    3b90:	19 f5       	brne	.+70     	; 0x3bd8 <line+0x1360>
    3b92:	e2 e3       	ldi	r30, 0x32	; 50
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	80 81       	ld	r24, Z
    3b98:	88 2f       	mov	r24, r24
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	83 70       	andi	r24, 0x03	; 3
    3b9e:	90 70       	andi	r25, 0x00	; 0
    3ba0:	00 97       	sbiw	r24, 0x00	; 0
    3ba2:	d1 f4       	brne	.+52     	; 0x3bd8 <line+0x1360>
  {       t=1;       
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	9e 83       	std	Y+6, r25	; 0x06
    3baa:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3bac:	80 91 81 03 	lds	r24, 0x0381
    3bb0:	90 91 82 03 	lds	r25, 0x0382
    3bb4:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
					 if(what==4)
    3bb8:	8f 81       	ldd	r24, Y+7	; 0x07
    3bba:	98 85       	ldd	r25, Y+8	; 0x08
    3bbc:	84 30       	cpi	r24, 0x04	; 4
    3bbe:	91 05       	cpc	r25, r1
    3bc0:	49 f4       	brne	.+18     	; 0x3bd4 <line+0x135c>
   {  set_PWM_value(LOW);soft_left();}
    3bc2:	80 91 ce 0d 	lds	r24, 0x0DCE
    3bc6:	90 91 cf 0d 	lds	r25, 0x0DCF
    3bca:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3bce:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    3bd2:	02 c0       	rjmp	.+4      	; 0x3bd8 <line+0x1360>
else 
  forward();
    3bd4:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  
    if((P1 & 0b11111111) == 0b01111000 && (P2 & 0b11) == 0b00 )//108
    3bd8:	e6 e0       	ldi	r30, 0x06	; 6
    3bda:	f1 e0       	ldi	r31, 0x01	; 1
    3bdc:	80 81       	ld	r24, Z
    3bde:	88 37       	cpi	r24, 0x78	; 120
    3be0:	19 f5       	brne	.+70     	; 0x3c28 <line+0x13b0>
    3be2:	e2 e3       	ldi	r30, 0x32	; 50
    3be4:	f0 e0       	ldi	r31, 0x00	; 0
    3be6:	80 81       	ld	r24, Z
    3be8:	88 2f       	mov	r24, r24
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	83 70       	andi	r24, 0x03	; 3
    3bee:	90 70       	andi	r25, 0x00	; 0
    3bf0:	00 97       	sbiw	r24, 0x00	; 0
    3bf2:	d1 f4       	brne	.+52     	; 0x3c28 <line+0x13b0>
  {       t=1;       
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	9e 83       	std	Y+6, r25	; 0x06
    3bfa:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3bfc:	80 91 81 03 	lds	r24, 0x0381
    3c00:	90 91 82 03 	lds	r25, 0x0382
    3c04:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
					 if(what==4)
    3c08:	8f 81       	ldd	r24, Y+7	; 0x07
    3c0a:	98 85       	ldd	r25, Y+8	; 0x08
    3c0c:	84 30       	cpi	r24, 0x04	; 4
    3c0e:	91 05       	cpc	r25, r1
    3c10:	49 f4       	brne	.+18     	; 0x3c24 <line+0x13ac>
   {  set_PWM_value(MID);soft_left();}
    3c12:	80 91 8a 03 	lds	r24, 0x038A
    3c16:	90 91 8b 03 	lds	r25, 0x038B
    3c1a:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3c1e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    3c22:	02 c0       	rjmp	.+4      	; 0x3c28 <line+0x13b0>
else 
  forward();
    3c24:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  
    if((P1 & 0b11111111) == 0b00011000 && (P2 & 0b11) == 0b10 )//109
    3c28:	e6 e0       	ldi	r30, 0x06	; 6
    3c2a:	f1 e0       	ldi	r31, 0x01	; 1
    3c2c:	80 81       	ld	r24, Z
    3c2e:	88 31       	cpi	r24, 0x18	; 24
    3c30:	f1 f4       	brne	.+60     	; 0x3c6e <line+0x13f6>
    3c32:	e2 e3       	ldi	r30, 0x32	; 50
    3c34:	f0 e0       	ldi	r31, 0x00	; 0
    3c36:	80 81       	ld	r24, Z
    3c38:	88 2f       	mov	r24, r24
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	83 70       	andi	r24, 0x03	; 3
    3c3e:	90 70       	andi	r25, 0x00	; 0
    3c40:	82 30       	cpi	r24, 0x02	; 2
    3c42:	91 05       	cpc	r25, r1
    3c44:	a1 f4       	brne	.+40     	; 0x3c6e <line+0x13f6>
  {       t=1;       
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	9e 83       	std	Y+6, r25	; 0x06
    3c4c:	8d 83       	std	Y+5, r24	; 0x05
               	 if(what==4)
    3c4e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c50:	98 85       	ldd	r25, Y+8	; 0x08
    3c52:	84 30       	cpi	r24, 0x04	; 4
    3c54:	91 05       	cpc	r25, r1
    3c56:	49 f4       	brne	.+18     	; 0x3c6a <line+0x13f2>
   {  set_PWM_value(HIGH);soft_left();}
    3c58:	80 91 81 03 	lds	r24, 0x0381
    3c5c:	90 91 82 03 	lds	r25, 0x0382
    3c60:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3c64:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    3c68:	02 c0       	rjmp	.+4      	; 0x3c6e <line+0x13f6>
else 
  forward(); 
    3c6a:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
  			   
  }
  
    if((P1 & 0b11111111) == 0b10011000 && (P2 & 0b11) == 0b00 )//110
    3c6e:	e6 e0       	ldi	r30, 0x06	; 6
    3c70:	f1 e0       	ldi	r31, 0x01	; 1
    3c72:	80 81       	ld	r24, Z
    3c74:	88 39       	cpi	r24, 0x98	; 152
    3c76:	19 f5       	brne	.+70     	; 0x3cbe <line+0x1446>
    3c78:	e2 e3       	ldi	r30, 0x32	; 50
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	80 81       	ld	r24, Z
    3c7e:	88 2f       	mov	r24, r24
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	83 70       	andi	r24, 0x03	; 3
    3c84:	90 70       	andi	r25, 0x00	; 0
    3c86:	00 97       	sbiw	r24, 0x00	; 0
    3c88:	d1 f4       	brne	.+52     	; 0x3cbe <line+0x1446>
  {       t=1;       
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	9e 83       	std	Y+6, r25	; 0x06
    3c90:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);	 if(what==4)
    3c92:	80 91 81 03 	lds	r24, 0x0381
    3c96:	90 91 82 03 	lds	r25, 0x0382
    3c9a:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3c9e:	8f 81       	ldd	r24, Y+7	; 0x07
    3ca0:	98 85       	ldd	r25, Y+8	; 0x08
    3ca2:	84 30       	cpi	r24, 0x04	; 4
    3ca4:	91 05       	cpc	r25, r1
    3ca6:	49 f4       	brne	.+18     	; 0x3cba <line+0x1442>
   {  set_PWM_value(HIGH);soft_left();}
    3ca8:	80 91 81 03 	lds	r24, 0x0381
    3cac:	90 91 82 03 	lds	r25, 0x0382
    3cb0:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3cb4:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    3cb8:	02 c0       	rjmp	.+4      	; 0x3cbe <line+0x1446>
else 
  forward();
    3cba:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  
    if((P1 & 0b11111111) == 0b01011000 && (P2 & 0b11) == 0b00 )//111
    3cbe:	e6 e0       	ldi	r30, 0x06	; 6
    3cc0:	f1 e0       	ldi	r31, 0x01	; 1
    3cc2:	80 81       	ld	r24, Z
    3cc4:	88 35       	cpi	r24, 0x58	; 88
    3cc6:	19 f5       	brne	.+70     	; 0x3d0e <line+0x1496>
    3cc8:	e2 e3       	ldi	r30, 0x32	; 50
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	80 81       	ld	r24, Z
    3cce:	88 2f       	mov	r24, r24
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	83 70       	andi	r24, 0x03	; 3
    3cd4:	90 70       	andi	r25, 0x00	; 0
    3cd6:	00 97       	sbiw	r24, 0x00	; 0
    3cd8:	d1 f4       	brne	.+52     	; 0x3d0e <line+0x1496>
  {       t=1;       
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	9e 83       	std	Y+6, r25	; 0x06
    3ce0:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3ce2:	80 91 81 03 	lds	r24, 0x0381
    3ce6:	90 91 82 03 	lds	r25, 0x0382
    3cea:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  	 if(what==4)
    3cee:	8f 81       	ldd	r24, Y+7	; 0x07
    3cf0:	98 85       	ldd	r25, Y+8	; 0x08
    3cf2:	84 30       	cpi	r24, 0x04	; 4
    3cf4:	91 05       	cpc	r25, r1
    3cf6:	49 f4       	brne	.+18     	; 0x3d0a <line+0x1492>
   {  set_PWM_value(HIGH);soft_left();}
    3cf8:	80 91 81 03 	lds	r24, 0x0381
    3cfc:	90 91 82 03 	lds	r25, 0x0382
    3d00:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3d04:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    3d08:	02 c0       	rjmp	.+4      	; 0x3d0e <line+0x1496>
else 
  forward();
    3d0a:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  
    if((P1 & 0b11111111) == 0b10011000 && (P2 & 0b11) == 0b10 )//112
    3d0e:	e6 e0       	ldi	r30, 0x06	; 6
    3d10:	f1 e0       	ldi	r31, 0x01	; 1
    3d12:	80 81       	ld	r24, Z
    3d14:	88 39       	cpi	r24, 0x98	; 152
    3d16:	21 f5       	brne	.+72     	; 0x3d60 <line+0x14e8>
    3d18:	e2 e3       	ldi	r30, 0x32	; 50
    3d1a:	f0 e0       	ldi	r31, 0x00	; 0
    3d1c:	80 81       	ld	r24, Z
    3d1e:	88 2f       	mov	r24, r24
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	83 70       	andi	r24, 0x03	; 3
    3d24:	90 70       	andi	r25, 0x00	; 0
    3d26:	82 30       	cpi	r24, 0x02	; 2
    3d28:	91 05       	cpc	r25, r1
    3d2a:	d1 f4       	brne	.+52     	; 0x3d60 <line+0x14e8>
  {       t=1;       
    3d2c:	81 e0       	ldi	r24, 0x01	; 1
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	9e 83       	std	Y+6, r25	; 0x06
    3d32:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3d34:	80 91 81 03 	lds	r24, 0x0381
    3d38:	90 91 82 03 	lds	r25, 0x0382
    3d3c:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  	 if(what==4)
    3d40:	8f 81       	ldd	r24, Y+7	; 0x07
    3d42:	98 85       	ldd	r25, Y+8	; 0x08
    3d44:	84 30       	cpi	r24, 0x04	; 4
    3d46:	91 05       	cpc	r25, r1
    3d48:	49 f4       	brne	.+18     	; 0x3d5c <line+0x14e4>
   {  set_PWM_value(HIGH);soft_left();}
    3d4a:	80 91 81 03 	lds	r24, 0x0381
    3d4e:	90 91 82 03 	lds	r25, 0x0382
    3d52:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3d56:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    3d5a:	02 c0       	rjmp	.+4      	; 0x3d60 <line+0x14e8>
else 
  forward();
    3d5c:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  
    if((P1 & 0b11111111) == 0b11011000 && (P2 & 0b11) == 0b00 )//113
    3d60:	e6 e0       	ldi	r30, 0x06	; 6
    3d62:	f1 e0       	ldi	r31, 0x01	; 1
    3d64:	80 81       	ld	r24, Z
    3d66:	88 3d       	cpi	r24, 0xD8	; 216
    3d68:	19 f5       	brne	.+70     	; 0x3db0 <line+0x1538>
    3d6a:	e2 e3       	ldi	r30, 0x32	; 50
    3d6c:	f0 e0       	ldi	r31, 0x00	; 0
    3d6e:	80 81       	ld	r24, Z
    3d70:	88 2f       	mov	r24, r24
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	83 70       	andi	r24, 0x03	; 3
    3d76:	90 70       	andi	r25, 0x00	; 0
    3d78:	00 97       	sbiw	r24, 0x00	; 0
    3d7a:	d1 f4       	brne	.+52     	; 0x3db0 <line+0x1538>
  {       t=1;       
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	9e 83       	std	Y+6, r25	; 0x06
    3d82:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3d84:	80 91 81 03 	lds	r24, 0x0381
    3d88:	90 91 82 03 	lds	r25, 0x0382
    3d8c:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  	 if(what==4)
    3d90:	8f 81       	ldd	r24, Y+7	; 0x07
    3d92:	98 85       	ldd	r25, Y+8	; 0x08
    3d94:	84 30       	cpi	r24, 0x04	; 4
    3d96:	91 05       	cpc	r25, r1
    3d98:	49 f4       	brne	.+18     	; 0x3dac <line+0x1534>
   {  set_PWM_value(HIGH);soft_left();}
    3d9a:	80 91 81 03 	lds	r24, 0x0381
    3d9e:	90 91 82 03 	lds	r25, 0x0382
    3da2:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3da6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    3daa:	02 c0       	rjmp	.+4      	; 0x3db0 <line+0x1538>
else 
  forward();
    3dac:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  
    if((P1 & 0b11111111) == 0b11011000 && (P2 & 0b11) == 0b10 )//114
    3db0:	e6 e0       	ldi	r30, 0x06	; 6
    3db2:	f1 e0       	ldi	r31, 0x01	; 1
    3db4:	80 81       	ld	r24, Z
    3db6:	88 3d       	cpi	r24, 0xD8	; 216
    3db8:	21 f5       	brne	.+72     	; 0x3e02 <line+0x158a>
    3dba:	e2 e3       	ldi	r30, 0x32	; 50
    3dbc:	f0 e0       	ldi	r31, 0x00	; 0
    3dbe:	80 81       	ld	r24, Z
    3dc0:	88 2f       	mov	r24, r24
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	83 70       	andi	r24, 0x03	; 3
    3dc6:	90 70       	andi	r25, 0x00	; 0
    3dc8:	82 30       	cpi	r24, 0x02	; 2
    3dca:	91 05       	cpc	r25, r1
    3dcc:	d1 f4       	brne	.+52     	; 0x3e02 <line+0x158a>
  {       t=1;       
    3dce:	81 e0       	ldi	r24, 0x01	; 1
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	9e 83       	std	Y+6, r25	; 0x06
    3dd4:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3dd6:	80 91 81 03 	lds	r24, 0x0381
    3dda:	90 91 82 03 	lds	r25, 0x0382
    3dde:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
 	 if(what==4)
    3de2:	8f 81       	ldd	r24, Y+7	; 0x07
    3de4:	98 85       	ldd	r25, Y+8	; 0x08
    3de6:	84 30       	cpi	r24, 0x04	; 4
    3de8:	91 05       	cpc	r25, r1
    3dea:	49 f4       	brne	.+18     	; 0x3dfe <line+0x1586>
   {  set_PWM_value(HIGH);soft_left();}
    3dec:	80 91 81 03 	lds	r24, 0x0381
    3df0:	90 91 82 03 	lds	r25, 0x0382
    3df4:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3df8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    3dfc:	02 c0       	rjmp	.+4      	; 0x3e02 <line+0x158a>
else 
  forward();
    3dfe:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  
    if((P1 & 0b11111111) == 0b11000110 && (P2 & 0b11) == 0b00 )//115
    3e02:	e6 e0       	ldi	r30, 0x06	; 6
    3e04:	f1 e0       	ldi	r31, 0x01	; 1
    3e06:	80 81       	ld	r24, Z
    3e08:	86 3c       	cpi	r24, 0xC6	; 198
    3e0a:	19 f5       	brne	.+70     	; 0x3e52 <line+0x15da>
    3e0c:	e2 e3       	ldi	r30, 0x32	; 50
    3e0e:	f0 e0       	ldi	r31, 0x00	; 0
    3e10:	80 81       	ld	r24, Z
    3e12:	88 2f       	mov	r24, r24
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	83 70       	andi	r24, 0x03	; 3
    3e18:	90 70       	andi	r25, 0x00	; 0
    3e1a:	00 97       	sbiw	r24, 0x00	; 0
    3e1c:	d1 f4       	brne	.+52     	; 0x3e52 <line+0x15da>
  {       t=1;       
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	9e 83       	std	Y+6, r25	; 0x06
    3e24:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3e26:	80 91 81 03 	lds	r24, 0x0381
    3e2a:	90 91 82 03 	lds	r25, 0x0382
    3e2e:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
 	 if(what==4)
    3e32:	8f 81       	ldd	r24, Y+7	; 0x07
    3e34:	98 85       	ldd	r25, Y+8	; 0x08
    3e36:	84 30       	cpi	r24, 0x04	; 4
    3e38:	91 05       	cpc	r25, r1
    3e3a:	49 f4       	brne	.+18     	; 0x3e4e <line+0x15d6>
   {  set_PWM_value(MID);soft_left();}
    3e3c:	80 91 8a 03 	lds	r24, 0x038A
    3e40:	90 91 8b 03 	lds	r25, 0x038B
    3e44:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3e48:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    3e4c:	02 c0       	rjmp	.+4      	; 0x3e52 <line+0x15da>
else 
  forward();
    3e4e:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  
    if((P1 & 0b11111111) == 0b01100110 && (P2 & 0b11) == 0b00 )//116
    3e52:	e6 e0       	ldi	r30, 0x06	; 6
    3e54:	f1 e0       	ldi	r31, 0x01	; 1
    3e56:	80 81       	ld	r24, Z
    3e58:	86 36       	cpi	r24, 0x66	; 102
    3e5a:	19 f5       	brne	.+70     	; 0x3ea2 <line+0x162a>
    3e5c:	e2 e3       	ldi	r30, 0x32	; 50
    3e5e:	f0 e0       	ldi	r31, 0x00	; 0
    3e60:	80 81       	ld	r24, Z
    3e62:	88 2f       	mov	r24, r24
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	83 70       	andi	r24, 0x03	; 3
    3e68:	90 70       	andi	r25, 0x00	; 0
    3e6a:	00 97       	sbiw	r24, 0x00	; 0
    3e6c:	d1 f4       	brne	.+52     	; 0x3ea2 <line+0x162a>
  {       t=1;       
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	9e 83       	std	Y+6, r25	; 0x06
    3e74:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3e76:	80 91 81 03 	lds	r24, 0x0381
    3e7a:	90 91 82 03 	lds	r25, 0x0382
    3e7e:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  	 if(what==4)
    3e82:	8f 81       	ldd	r24, Y+7	; 0x07
    3e84:	98 85       	ldd	r25, Y+8	; 0x08
    3e86:	84 30       	cpi	r24, 0x04	; 4
    3e88:	91 05       	cpc	r25, r1
    3e8a:	49 f4       	brne	.+18     	; 0x3e9e <line+0x1626>
   {  set_PWM_value(MID);soft_left();}
    3e8c:	80 91 8a 03 	lds	r24, 0x038A
    3e90:	90 91 8b 03 	lds	r25, 0x038B
    3e94:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3e98:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    3e9c:	02 c0       	rjmp	.+4      	; 0x3ea2 <line+0x162a>
else 
  forward();
    3e9e:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }
  
    if((P1 & 0b11111111) == 0b10000110 && (P2 & 0b11) == 0b10 )//117
    3ea2:	e6 e0       	ldi	r30, 0x06	; 6
    3ea4:	f1 e0       	ldi	r31, 0x01	; 1
    3ea6:	80 81       	ld	r24, Z
    3ea8:	86 38       	cpi	r24, 0x86	; 134
    3eaa:	21 f5       	brne	.+72     	; 0x3ef4 <line+0x167c>
    3eac:	e2 e3       	ldi	r30, 0x32	; 50
    3eae:	f0 e0       	ldi	r31, 0x00	; 0
    3eb0:	80 81       	ld	r24, Z
    3eb2:	88 2f       	mov	r24, r24
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	83 70       	andi	r24, 0x03	; 3
    3eb8:	90 70       	andi	r25, 0x00	; 0
    3eba:	82 30       	cpi	r24, 0x02	; 2
    3ebc:	91 05       	cpc	r25, r1
    3ebe:	d1 f4       	brne	.+52     	; 0x3ef4 <line+0x167c>
  {       t=1;       
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	9e 83       	std	Y+6, r25	; 0x06
    3ec6:	8d 83       	std	Y+5, r24	; 0x05
                set_PWM_value(HIGH);
    3ec8:	80 91 81 03 	lds	r24, 0x0381
    3ecc:	90 91 82 03 	lds	r25, 0x0382
    3ed0:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
  	 if(what==4)
    3ed4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ed6:	98 85       	ldd	r25, Y+8	; 0x08
    3ed8:	84 30       	cpi	r24, 0x04	; 4
    3eda:	91 05       	cpc	r25, r1
    3edc:	49 f4       	brne	.+18     	; 0x3ef0 <line+0x1678>
   {  set_PWM_value(MID);soft_left();}
    3ede:	80 91 8a 03 	lds	r24, 0x038A
    3ee2:	90 91 8b 03 	lds	r25, 0x038B
    3ee6:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3eea:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    3eee:	02 c0       	rjmp	.+4      	; 0x3ef4 <line+0x167c>
else 
  forward();
    3ef0:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
				 
				  // lcd_cursor(1,1); lcd_string("00X0XX0000");  
  			   
  }

  if(what==4)
    3ef4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ef6:	98 85       	ldd	r25, Y+8	; 0x08
    3ef8:	84 30       	cpi	r24, 0x04	; 4
    3efa:	91 05       	cpc	r25, r1
    3efc:	09 f0       	breq	.+2      	; 0x3f00 <line+0x1688>
    3efe:	50 c0       	rjmp	.+160    	; 0x3fa0 <line+0x1728>
  {
  if(P2&0b10)
    3f00:	e2 e3       	ldi	r30, 0x32	; 50
    3f02:	f0 e0       	ldi	r31, 0x00	; 0
    3f04:	80 81       	ld	r24, Z
    3f06:	88 2f       	mov	r24, r24
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	82 70       	andi	r24, 0x02	; 2
    3f0c:	90 70       	andi	r25, 0x00	; 0
    3f0e:	00 97       	sbiw	r24, 0x00	; 0
    3f10:	61 f0       	breq	.+24     	; 0x3f2a <line+0x16b2>
   { t=1;set_PWM_value(HIGH);soft_left(); }
    3f12:	81 e0       	ldi	r24, 0x01	; 1
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	9e 83       	std	Y+6, r25	; 0x06
    3f18:	8d 83       	std	Y+5, r24	; 0x05
    3f1a:	80 91 81 03 	lds	r24, 0x0381
    3f1e:	90 91 82 03 	lds	r25, 0x0382
    3f22:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3f26:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
   if(P1&0b10000000)
    3f2a:	e6 e0       	ldi	r30, 0x06	; 6
    3f2c:	f1 e0       	ldi	r31, 0x01	; 1
    3f2e:	80 81       	ld	r24, Z
    3f30:	88 23       	and	r24, r24
    3f32:	64 f4       	brge	.+24     	; 0x3f4c <line+0x16d4>
   { t=1;set_PWM_value(HIGH);soft_left(); }
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	9e 83       	std	Y+6, r25	; 0x06
    3f3a:	8d 83       	std	Y+5, r24	; 0x05
    3f3c:	80 91 81 03 	lds	r24, 0x0381
    3f40:	90 91 82 03 	lds	r25, 0x0382
    3f44:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3f48:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    if(P1&0b01000000)
    3f4c:	e6 e0       	ldi	r30, 0x06	; 6
    3f4e:	f1 e0       	ldi	r31, 0x01	; 1
    3f50:	80 81       	ld	r24, Z
    3f52:	88 2f       	mov	r24, r24
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	80 74       	andi	r24, 0x40	; 64
    3f58:	90 70       	andi	r25, 0x00	; 0
    3f5a:	00 97       	sbiw	r24, 0x00	; 0
    3f5c:	61 f0       	breq	.+24     	; 0x3f76 <line+0x16fe>
   { t=1;set_PWM_value(MID);soft_left(); }
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	9e 83       	std	Y+6, r25	; 0x06
    3f64:	8d 83       	std	Y+5, r24	; 0x05
    3f66:	80 91 8a 03 	lds	r24, 0x038A
    3f6a:	90 91 8b 03 	lds	r25, 0x038B
    3f6e:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3f72:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
    if(P1&0b00100000)
    3f76:	e6 e0       	ldi	r30, 0x06	; 6
    3f78:	f1 e0       	ldi	r31, 0x01	; 1
    3f7a:	80 81       	ld	r24, Z
    3f7c:	88 2f       	mov	r24, r24
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	80 72       	andi	r24, 0x20	; 32
    3f82:	90 70       	andi	r25, 0x00	; 0
    3f84:	00 97       	sbiw	r24, 0x00	; 0
    3f86:	61 f0       	breq	.+24     	; 0x3fa0 <line+0x1728>
   { t=1;set_PWM_value(LOW);soft_left(); }
    3f88:	81 e0       	ldi	r24, 0x01	; 1
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	9e 83       	std	Y+6, r25	; 0x06
    3f8e:	8d 83       	std	Y+5, r24	; 0x05
    3f90:	80 91 ce 0d 	lds	r24, 0x0DCE
    3f94:	90 91 cf 0d 	lds	r25, 0x0DCF
    3f98:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3f9c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <soft_left>
  
  
  }

   if(what==3)
    3fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    3fa2:	98 85       	ldd	r25, Y+8	; 0x08
    3fa4:	83 30       	cpi	r24, 0x03	; 3
    3fa6:	91 05       	cpc	r25, r1
    3fa8:	09 f0       	breq	.+2      	; 0x3fac <line+0x1734>
    3faa:	54 c0       	rjmp	.+168    	; 0x4054 <line+0x17dc>
  {
  if(P2&0b1)
    3fac:	e2 e3       	ldi	r30, 0x32	; 50
    3fae:	f0 e0       	ldi	r31, 0x00	; 0
    3fb0:	80 81       	ld	r24, Z
    3fb2:	88 2f       	mov	r24, r24
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	81 70       	andi	r24, 0x01	; 1
    3fb8:	90 70       	andi	r25, 0x00	; 0
    3fba:	88 23       	and	r24, r24
    3fbc:	61 f0       	breq	.+24     	; 0x3fd6 <line+0x175e>
   { t=1;set_PWM_value(HIGH);soft_right(); }
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	9e 83       	std	Y+6, r25	; 0x06
    3fc4:	8d 83       	std	Y+5, r24	; 0x05
    3fc6:	80 91 81 03 	lds	r24, 0x0381
    3fca:	90 91 82 03 	lds	r25, 0x0382
    3fce:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3fd2:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
   if(P1&0b00000001)
    3fd6:	e6 e0       	ldi	r30, 0x06	; 6
    3fd8:	f1 e0       	ldi	r31, 0x01	; 1
    3fda:	80 81       	ld	r24, Z
    3fdc:	88 2f       	mov	r24, r24
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	81 70       	andi	r24, 0x01	; 1
    3fe2:	90 70       	andi	r25, 0x00	; 0
    3fe4:	88 23       	and	r24, r24
    3fe6:	61 f0       	breq	.+24     	; 0x4000 <line+0x1788>
   { t=1;set_PWM_value(HIGH);soft_right(); }
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	9e 83       	std	Y+6, r25	; 0x06
    3fee:	8d 83       	std	Y+5, r24	; 0x05
    3ff0:	80 91 81 03 	lds	r24, 0x0381
    3ff4:	90 91 82 03 	lds	r25, 0x0382
    3ff8:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    3ffc:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    if(P1&0b00000010)
    4000:	e6 e0       	ldi	r30, 0x06	; 6
    4002:	f1 e0       	ldi	r31, 0x01	; 1
    4004:	80 81       	ld	r24, Z
    4006:	88 2f       	mov	r24, r24
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	82 70       	andi	r24, 0x02	; 2
    400c:	90 70       	andi	r25, 0x00	; 0
    400e:	00 97       	sbiw	r24, 0x00	; 0
    4010:	61 f0       	breq	.+24     	; 0x402a <line+0x17b2>
   { t=1;set_PWM_value(MID);soft_right(); }
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	9e 83       	std	Y+6, r25	; 0x06
    4018:	8d 83       	std	Y+5, r24	; 0x05
    401a:	80 91 8a 03 	lds	r24, 0x038A
    401e:	90 91 8b 03 	lds	r25, 0x038B
    4022:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    4026:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>
    if(P1&0b00000100)
    402a:	e6 e0       	ldi	r30, 0x06	; 6
    402c:	f1 e0       	ldi	r31, 0x01	; 1
    402e:	80 81       	ld	r24, Z
    4030:	88 2f       	mov	r24, r24
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	84 70       	andi	r24, 0x04	; 4
    4036:	90 70       	andi	r25, 0x00	; 0
    4038:	00 97       	sbiw	r24, 0x00	; 0
    403a:	61 f0       	breq	.+24     	; 0x4054 <line+0x17dc>
   { t=1;set_PWM_value(LOW);soft_right(); }
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	9e 83       	std	Y+6, r25	; 0x06
    4042:	8d 83       	std	Y+5, r24	; 0x05
    4044:	80 91 ce 0d 	lds	r24, 0x0DCE
    4048:	90 91 cf 0d 	lds	r25, 0x0DCF
    404c:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
    4050:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <soft_right>


  


  if(t==0)
    4054:	8d 81       	ldd	r24, Y+5	; 0x05
    4056:	9e 81       	ldd	r25, Y+6	; 0x06
    4058:	00 97       	sbiw	r24, 0x00	; 0
    405a:	41 f4       	brne	.+16     	; 0x406c <line+0x17f4>
 {//lcd_cursor(1,1); lcd_string("NOCONDITIO"); 
  set_PWM_value(MID);
    405c:	80 91 8a 03 	lds	r24, 0x038A
    4060:	90 91 8b 03 	lds	r25, 0x038B
    4064:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
 forward(); 
    4068:	0e 94 c1 13 	call	0x2782	; 0x2782 <forward>
 }
 t=0;
    406c:	1e 82       	std	Y+6, r1	; 0x06
    406e:	1d 82       	std	Y+5, r1	; 0x05
    4070:	0c 94 4d 14 	jmp	0x289a	; 0x289a <line+0x22>
 
} //while

 dan=0;
    4074:	10 92 89 03 	sts	0x0389, r1
    4078:	10 92 88 03 	sts	0x0388, r1
if( !(P1&0b1000) )
    407c:	e6 e0       	ldi	r30, 0x06	; 6
    407e:	f1 e0       	ldi	r31, 0x01	; 1
    4080:	80 81       	ld	r24, Z
    4082:	88 2f       	mov	r24, r24
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	88 70       	andi	r24, 0x08	; 8
    4088:	90 70       	andi	r25, 0x00	; 0
    408a:	00 97       	sbiw	r24, 0x00	; 0
    408c:	31 f4       	brne	.+12     	; 0x409a <line+0x1822>
dan=4;
    408e:	84 e0       	ldi	r24, 0x04	; 4
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	90 93 89 03 	sts	0x0389, r25
    4096:	80 93 88 03 	sts	0x0388, r24


 if(!(P1&0b10000))
    409a:	e6 e0       	ldi	r30, 0x06	; 6
    409c:	f1 e0       	ldi	r31, 0x01	; 1
    409e:	80 81       	ld	r24, Z
    40a0:	88 2f       	mov	r24, r24
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	80 71       	andi	r24, 0x10	; 16
    40a6:	90 70       	andi	r25, 0x00	; 0
    40a8:	00 97       	sbiw	r24, 0x00	; 0
    40aa:	31 f4       	brne	.+12     	; 0x40b8 <line+0x1840>
dan=4;
    40ac:	84 e0       	ldi	r24, 0x04	; 4
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	90 93 89 03 	sts	0x0389, r25
    40b4:	80 93 88 03 	sts	0x0388, r24

cas=8;
    40b8:	88 e0       	ldi	r24, 0x08	; 8
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	90 93 09 03 	sts	0x0309, r25
    40c0:	80 93 08 03 	sts	0x0308, r24
if(P2&0b10000)
    40c4:	e2 e3       	ldi	r30, 0x32	; 50
    40c6:	f0 e0       	ldi	r31, 0x00	; 0
    40c8:	80 81       	ld	r24, Z
    40ca:	88 2f       	mov	r24, r24
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	80 71       	andi	r24, 0x10	; 16
    40d0:	90 70       	andi	r25, 0x00	; 0
    40d2:	00 97       	sbiw	r24, 0x00	; 0
    40d4:	31 f0       	breq	.+12     	; 0x40e2 <line+0x186a>
cas=2;
    40d6:	82 e0       	ldi	r24, 0x02	; 2
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	90 93 09 03 	sts	0x0309, r25
    40de:	80 93 08 03 	sts	0x0308, r24

if(P2&0b100000)
    40e2:	e2 e3       	ldi	r30, 0x32	; 50
    40e4:	f0 e0       	ldi	r31, 0x00	; 0
    40e6:	80 81       	ld	r24, Z
    40e8:	88 2f       	mov	r24, r24
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	80 72       	andi	r24, 0x20	; 32
    40ee:	90 70       	andi	r25, 0x00	; 0
    40f0:	00 97       	sbiw	r24, 0x00	; 0
    40f2:	31 f0       	breq	.+12     	; 0x4100 <line+0x1888>
cas=3;
    40f4:	83 e0       	ldi	r24, 0x03	; 3
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	90 93 09 03 	sts	0x0309, r25
    40fc:	80 93 08 03 	sts	0x0308, r24


//_delay_ms(60);

if(P2&0b100)
    4100:	e2 e3       	ldi	r30, 0x32	; 50
    4102:	f0 e0       	ldi	r31, 0x00	; 0
    4104:	80 81       	ld	r24, Z
    4106:	88 2f       	mov	r24, r24
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	84 70       	andi	r24, 0x04	; 4
    410c:	90 70       	andi	r25, 0x00	; 0
    410e:	00 97       	sbiw	r24, 0x00	; 0
    4110:	31 f0       	breq	.+12     	; 0x411e <line+0x18a6>
cas=1;
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	90 93 09 03 	sts	0x0309, r25
    411a:	80 93 08 03 	sts	0x0308, r24

if(P2&0b1000)
    411e:	e2 e3       	ldi	r30, 0x32	; 50
    4120:	f0 e0       	ldi	r31, 0x00	; 0
    4122:	80 81       	ld	r24, Z
    4124:	88 2f       	mov	r24, r24
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	88 70       	andi	r24, 0x08	; 8
    412a:	90 70       	andi	r25, 0x00	; 0
    412c:	00 97       	sbiw	r24, 0x00	; 0
    412e:	21 f0       	breq	.+8      	; 0x4138 <line+0x18c0>
cas=0;
    4130:	10 92 09 03 	sts	0x0309, r1
    4134:	10 92 08 03 	sts	0x0308, r1


stop();
    4138:	0e 94 11 14 	call	0x2822	; 0x2822 <stop>
}
    413c:	28 96       	adiw	r28, 0x08	; 8
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
    4148:	cf 91       	pop	r28
    414a:	df 91       	pop	r29
    414c:	08 95       	ret

0000414e <__vector_2>:


ISR(INT1_vect)
{
    414e:	1f 92       	push	r1
    4150:	0f 92       	push	r0
    4152:	0f b6       	in	r0, 0x3f	; 63
    4154:	0f 92       	push	r0
    4156:	11 24       	eor	r1, r1
    4158:	8f 93       	push	r24
    415a:	9f 93       	push	r25
    415c:	df 93       	push	r29
    415e:	cf 93       	push	r28
    4160:	cd b7       	in	r28, 0x3d	; 61
    4162:	de b7       	in	r29, 0x3e	; 62

count++;
    4164:	80 91 0e 03 	lds	r24, 0x030E
    4168:	90 91 0f 03 	lds	r25, 0x030F
    416c:	01 96       	adiw	r24, 0x01	; 1
    416e:	90 93 0f 03 	sts	0x030F, r25
    4172:	80 93 0e 03 	sts	0x030E, r24
		
	//	lcd_string("N");
}
    4176:	cf 91       	pop	r28
    4178:	df 91       	pop	r29
    417a:	9f 91       	pop	r25
    417c:	8f 91       	pop	r24
    417e:	0f 90       	pop	r0
    4180:	0f be       	out	0x3f, r0	; 63
    4182:	0f 90       	pop	r0
    4184:	1f 90       	pop	r1
    4186:	18 95       	reti

00004188 <enable>:
void enable()
{
    4188:	df 93       	push	r29
    418a:	cf 93       	push	r28
    418c:	cd b7       	in	r28, 0x3d	; 61
    418e:	de b7       	in	r29, 0x3e	; 62
DDRD  = DDRD & 0b11111101;  
    4190:	aa e2       	ldi	r26, 0x2A	; 42
    4192:	b0 e0       	ldi	r27, 0x00	; 0
    4194:	ea e2       	ldi	r30, 0x2A	; 42
    4196:	f0 e0       	ldi	r31, 0x00	; 0
    4198:	80 81       	ld	r24, Z
    419a:	8d 7f       	andi	r24, 0xFD	; 253
    419c:	8c 93       	st	X, r24
 PORTD = PORTD | 0b00000010;
    419e:	ab e2       	ldi	r26, 0x2B	; 43
    41a0:	b0 e0       	ldi	r27, 0x00	; 0
    41a2:	eb e2       	ldi	r30, 0x2B	; 43
    41a4:	f0 e0       	ldi	r31, 0x00	; 0
    41a6:	80 81       	ld	r24, Z
    41a8:	82 60       	ori	r24, 0x02	; 2
    41aa:	8c 93       	st	X, r24

 //cli();  
 EIMSK |= (1<<INT1);            
    41ac:	ad e3       	ldi	r26, 0x3D	; 61
    41ae:	b0 e0       	ldi	r27, 0x00	; 0
    41b0:	ed e3       	ldi	r30, 0x3D	; 61
    41b2:	f0 e0       	ldi	r31, 0x00	; 0
    41b4:	80 81       	ld	r24, Z
    41b6:	82 60       	ori	r24, 0x02	; 2
    41b8:	8c 93       	st	X, r24
	// EICRA &= ~(1<<ISC10);  EICRA &= ~(1<<ISC11); //low level
    
	 EICRA &= ~(1<<ISC10);  EICRA |= (1<<ISC11);//falling edge
    41ba:	a9 e6       	ldi	r26, 0x69	; 105
    41bc:	b0 e0       	ldi	r27, 0x00	; 0
    41be:	e9 e6       	ldi	r30, 0x69	; 105
    41c0:	f0 e0       	ldi	r31, 0x00	; 0
    41c2:	80 81       	ld	r24, Z
    41c4:	8b 7f       	andi	r24, 0xFB	; 251
    41c6:	8c 93       	st	X, r24
    41c8:	a9 e6       	ldi	r26, 0x69	; 105
    41ca:	b0 e0       	ldi	r27, 0x00	; 0
    41cc:	e9 e6       	ldi	r30, 0x69	; 105
    41ce:	f0 e0       	ldi	r31, 0x00	; 0
    41d0:	80 81       	ld	r24, Z
    41d2:	88 60       	ori	r24, 0x08	; 8
    41d4:	8c 93       	st	X, r24
//MCUCR = MCUCR | 0x08;
 
 //ICR = GICR | 0x80;   
	
		 //to Rx data from PC to MCU through serial comm
 sei();              //re-enable interrupts
    41d6:	78 94       	sei
 //all peripherals are now initialized

}
    41d8:	cf 91       	pop	r28
    41da:	df 91       	pop	r29
    41dc:	08 95       	ret

000041de <turnleft>:
void turnleft(int a)

{
    41de:	df 93       	push	r29
    41e0:	cf 93       	push	r28
    41e2:	00 d0       	rcall	.+0      	; 0x41e4 <turnleft+0x6>
    41e4:	cd b7       	in	r28, 0x3d	; 61
    41e6:	de b7       	in	r29, 0x3e	; 62
    41e8:	9a 83       	std	Y+2, r25	; 0x02
    41ea:	89 83       	std	Y+1, r24	; 0x01
//cli();
count=0;
    41ec:	10 92 0f 03 	sts	0x030F, r1
    41f0:	10 92 0e 03 	sts	0x030E, r1
sei();
    41f4:	78 94       	sei
line(fcount);
    41f6:	80 91 24 02 	lds	r24, 0x0224
    41fa:	90 91 25 02 	lds	r25, 0x0225
    41fe:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
set_PWM_value(MID);
    4202:	80 91 8a 03 	lds	r24, 0x038A
    4206:	90 91 8b 03 	lds	r25, 0x038B
    420a:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
left();count=0;
    420e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <left>
    4212:	10 92 0f 03 	sts	0x030F, r1
    4216:	10 92 0e 03 	sts	0x030E, r1



while(1 )
{
if(count > a && (P1&0b1000 || P1&0b10000 || P1&0b100000 || P1&0b100))
    421a:	20 91 0e 03 	lds	r18, 0x030E
    421e:	30 91 0f 03 	lds	r19, 0x030F
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	9a 81       	ldd	r25, Y+2	; 0x02
    4226:	82 17       	cp	r24, r18
    4228:	93 07       	cpc	r25, r19
    422a:	bc f7       	brge	.-18     	; 0x421a <turnleft+0x3c>
    422c:	e6 e0       	ldi	r30, 0x06	; 6
    422e:	f1 e0       	ldi	r31, 0x01	; 1
    4230:	80 81       	ld	r24, Z
    4232:	88 2f       	mov	r24, r24
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	88 70       	andi	r24, 0x08	; 8
    4238:	90 70       	andi	r25, 0x00	; 0
    423a:	00 97       	sbiw	r24, 0x00	; 0
    423c:	d9 f4       	brne	.+54     	; 0x4274 <turnleft+0x96>
    423e:	e6 e0       	ldi	r30, 0x06	; 6
    4240:	f1 e0       	ldi	r31, 0x01	; 1
    4242:	80 81       	ld	r24, Z
    4244:	88 2f       	mov	r24, r24
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	80 71       	andi	r24, 0x10	; 16
    424a:	90 70       	andi	r25, 0x00	; 0
    424c:	00 97       	sbiw	r24, 0x00	; 0
    424e:	91 f4       	brne	.+36     	; 0x4274 <turnleft+0x96>
    4250:	e6 e0       	ldi	r30, 0x06	; 6
    4252:	f1 e0       	ldi	r31, 0x01	; 1
    4254:	80 81       	ld	r24, Z
    4256:	88 2f       	mov	r24, r24
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	80 72       	andi	r24, 0x20	; 32
    425c:	90 70       	andi	r25, 0x00	; 0
    425e:	00 97       	sbiw	r24, 0x00	; 0
    4260:	49 f4       	brne	.+18     	; 0x4274 <turnleft+0x96>
    4262:	e6 e0       	ldi	r30, 0x06	; 6
    4264:	f1 e0       	ldi	r31, 0x01	; 1
    4266:	80 81       	ld	r24, Z
    4268:	88 2f       	mov	r24, r24
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	84 70       	andi	r24, 0x04	; 4
    426e:	90 70       	andi	r25, 0x00	; 0
    4270:	00 97       	sbiw	r24, 0x00	; 0
    4272:	99 f2       	breq	.-90     	; 0x421a <turnleft+0x3c>
break;
}
stop();
    4274:	0e 94 11 14 	call	0x2822	; 0x2822 <stop>
}
    4278:	0f 90       	pop	r0
    427a:	0f 90       	pop	r0
    427c:	cf 91       	pop	r28
    427e:	df 91       	pop	r29
    4280:	08 95       	ret

00004282 <turnback>:
void turnback(int a , int b )
{
    4282:	df 93       	push	r29
    4284:	cf 93       	push	r28
    4286:	cd b7       	in	r28, 0x3d	; 61
    4288:	de b7       	in	r29, 0x3e	; 62
    428a:	ec 97       	sbiw	r28, 0x3c	; 60
    428c:	0f b6       	in	r0, 0x3f	; 63
    428e:	f8 94       	cli
    4290:	de bf       	out	0x3e, r29	; 62
    4292:	0f be       	out	0x3f, r0	; 63
    4294:	cd bf       	out	0x3d, r28	; 61
    4296:	9a af       	std	Y+58, r25	; 0x3a
    4298:	89 af       	std	Y+57, r24	; 0x39
    429a:	7c af       	std	Y+60, r23	; 0x3c
    429c:	6b af       	std	Y+59, r22	; 0x3b
count=0;
    429e:	10 92 0f 03 	sts	0x030F, r1
    42a2:	10 92 0e 03 	sts	0x030E, r1
sei();
    42a6:	78 94       	sei
line(fcount);
    42a8:	80 91 24 02 	lds	r24, 0x0224
    42ac:	90 91 25 02 	lds	r25, 0x0225
    42b0:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
if(b==10)
    42b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    42b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    42b8:	8a 30       	cpi	r24, 0x0A	; 10
    42ba:	91 05       	cpc	r25, r1
    42bc:	09 f0       	breq	.+2      	; 0x42c0 <turnback+0x3e>
    42be:	fd c0       	rjmp	.+506    	; 0x44ba <turnback+0x238>
{
down();
    42c0:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <down>
    42c4:	80 e0       	ldi	r24, 0x00	; 0
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	a8 e4       	ldi	r26, 0x48	; 72
    42ca:	b3 e4       	ldi	r27, 0x43	; 67
    42cc:	8d ab       	std	Y+53, r24	; 0x35
    42ce:	9e ab       	std	Y+54, r25	; 0x36
    42d0:	af ab       	std	Y+55, r26	; 0x37
    42d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42d4:	6d a9       	ldd	r22, Y+53	; 0x35
    42d6:	7e a9       	ldd	r23, Y+54	; 0x36
    42d8:	8f a9       	ldd	r24, Y+55	; 0x37
    42da:	98 ad       	ldd	r25, Y+56	; 0x38
    42dc:	26 e6       	ldi	r18, 0x66	; 102
    42de:	36 e6       	ldi	r19, 0x66	; 102
    42e0:	46 e6       	ldi	r20, 0x66	; 102
    42e2:	55 e4       	ldi	r21, 0x45	; 69
    42e4:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	89 ab       	std	Y+49, r24	; 0x31
    42ee:	9a ab       	std	Y+50, r25	; 0x32
    42f0:	ab ab       	std	Y+51, r26	; 0x33
    42f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    42f4:	69 a9       	ldd	r22, Y+49	; 0x31
    42f6:	7a a9       	ldd	r23, Y+50	; 0x32
    42f8:	8b a9       	ldd	r24, Y+51	; 0x33
    42fa:	9c a9       	ldd	r25, Y+52	; 0x34
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	40 e8       	ldi	r20, 0x80	; 128
    4302:	5f e3       	ldi	r21, 0x3F	; 63
    4304:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    4308:	88 23       	and	r24, r24
    430a:	2c f4       	brge	.+10     	; 0x4316 <turnback+0x94>
		__ticks = 1;
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	98 ab       	std	Y+48, r25	; 0x30
    4312:	8f a7       	std	Y+47, r24	; 0x2f
    4314:	3f c0       	rjmp	.+126    	; 0x4394 <turnback+0x112>
	else if (__tmp > 65535)
    4316:	69 a9       	ldd	r22, Y+49	; 0x31
    4318:	7a a9       	ldd	r23, Y+50	; 0x32
    431a:	8b a9       	ldd	r24, Y+51	; 0x33
    431c:	9c a9       	ldd	r25, Y+52	; 0x34
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	3f ef       	ldi	r19, 0xFF	; 255
    4322:	4f e7       	ldi	r20, 0x7F	; 127
    4324:	57 e4       	ldi	r21, 0x47	; 71
    4326:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    432a:	18 16       	cp	r1, r24
    432c:	4c f5       	brge	.+82     	; 0x4380 <turnback+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    432e:	6d a9       	ldd	r22, Y+53	; 0x35
    4330:	7e a9       	ldd	r23, Y+54	; 0x36
    4332:	8f a9       	ldd	r24, Y+55	; 0x37
    4334:	98 ad       	ldd	r25, Y+56	; 0x38
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	40 e2       	ldi	r20, 0x20	; 32
    433c:	51 e4       	ldi	r21, 0x41	; 65
    433e:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	bc 01       	movw	r22, r24
    4348:	cd 01       	movw	r24, r26
    434a:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	98 ab       	std	Y+48, r25	; 0x30
    4354:	8f a7       	std	Y+47, r24	; 0x2f
    4356:	0f c0       	rjmp	.+30     	; 0x4376 <turnback+0xf4>
    4358:	80 e7       	ldi	r24, 0x70	; 112
    435a:	91 e0       	ldi	r25, 0x01	; 1
    435c:	9e a7       	std	Y+46, r25	; 0x2e
    435e:	8d a7       	std	Y+45, r24	; 0x2d
    4360:	8d a5       	ldd	r24, Y+45	; 0x2d
    4362:	9e a5       	ldd	r25, Y+46	; 0x2e
    4364:	01 97       	sbiw	r24, 0x01	; 1
    4366:	f1 f7       	brne	.-4      	; 0x4364 <turnback+0xe2>
    4368:	9e a7       	std	Y+46, r25	; 0x2e
    436a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    436c:	8f a5       	ldd	r24, Y+47	; 0x2f
    436e:	98 a9       	ldd	r25, Y+48	; 0x30
    4370:	01 97       	sbiw	r24, 0x01	; 1
    4372:	98 ab       	std	Y+48, r25	; 0x30
    4374:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4376:	8f a5       	ldd	r24, Y+47	; 0x2f
    4378:	98 a9       	ldd	r25, Y+48	; 0x30
    437a:	00 97       	sbiw	r24, 0x00	; 0
    437c:	69 f7       	brne	.-38     	; 0x4358 <turnback+0xd6>
    437e:	14 c0       	rjmp	.+40     	; 0x43a8 <turnback+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4380:	69 a9       	ldd	r22, Y+49	; 0x31
    4382:	7a a9       	ldd	r23, Y+50	; 0x32
    4384:	8b a9       	ldd	r24, Y+51	; 0x33
    4386:	9c a9       	ldd	r25, Y+52	; 0x34
    4388:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	98 ab       	std	Y+48, r25	; 0x30
    4392:	8f a7       	std	Y+47, r24	; 0x2f
    4394:	8f a5       	ldd	r24, Y+47	; 0x2f
    4396:	98 a9       	ldd	r25, Y+48	; 0x30
    4398:	9c a7       	std	Y+44, r25	; 0x2c
    439a:	8b a7       	std	Y+43, r24	; 0x2b
    439c:	8b a5       	ldd	r24, Y+43	; 0x2b
    439e:	9c a5       	ldd	r25, Y+44	; 0x2c
    43a0:	01 97       	sbiw	r24, 0x01	; 1
    43a2:	f1 f7       	brne	.-4      	; 0x43a0 <turnback+0x11e>
    43a4:	9c a7       	std	Y+44, r25	; 0x2c
    43a6:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(200);
release();
    43a8:	0e 94 12 13 	call	0x2624	; 0x2624 <release>
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	a8 e4       	ldi	r26, 0x48	; 72
    43b2:	b3 e4       	ldi	r27, 0x43	; 67
    43b4:	8f a3       	std	Y+39, r24	; 0x27
    43b6:	98 a7       	std	Y+40, r25	; 0x28
    43b8:	a9 a7       	std	Y+41, r26	; 0x29
    43ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43bc:	6f a1       	ldd	r22, Y+39	; 0x27
    43be:	78 a5       	ldd	r23, Y+40	; 0x28
    43c0:	89 a5       	ldd	r24, Y+41	; 0x29
    43c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    43c4:	26 e6       	ldi	r18, 0x66	; 102
    43c6:	36 e6       	ldi	r19, 0x66	; 102
    43c8:	46 e6       	ldi	r20, 0x66	; 102
    43ca:	55 e4       	ldi	r21, 0x45	; 69
    43cc:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    43d0:	dc 01       	movw	r26, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	8b a3       	std	Y+35, r24	; 0x23
    43d6:	9c a3       	std	Y+36, r25	; 0x24
    43d8:	ad a3       	std	Y+37, r26	; 0x25
    43da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    43dc:	6b a1       	ldd	r22, Y+35	; 0x23
    43de:	7c a1       	ldd	r23, Y+36	; 0x24
    43e0:	8d a1       	ldd	r24, Y+37	; 0x25
    43e2:	9e a1       	ldd	r25, Y+38	; 0x26
    43e4:	20 e0       	ldi	r18, 0x00	; 0
    43e6:	30 e0       	ldi	r19, 0x00	; 0
    43e8:	40 e8       	ldi	r20, 0x80	; 128
    43ea:	5f e3       	ldi	r21, 0x3F	; 63
    43ec:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    43f0:	88 23       	and	r24, r24
    43f2:	2c f4       	brge	.+10     	; 0x43fe <turnback+0x17c>
		__ticks = 1;
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	9a a3       	std	Y+34, r25	; 0x22
    43fa:	89 a3       	std	Y+33, r24	; 0x21
    43fc:	3f c0       	rjmp	.+126    	; 0x447c <turnback+0x1fa>
	else if (__tmp > 65535)
    43fe:	6b a1       	ldd	r22, Y+35	; 0x23
    4400:	7c a1       	ldd	r23, Y+36	; 0x24
    4402:	8d a1       	ldd	r24, Y+37	; 0x25
    4404:	9e a1       	ldd	r25, Y+38	; 0x26
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	3f ef       	ldi	r19, 0xFF	; 255
    440a:	4f e7       	ldi	r20, 0x7F	; 127
    440c:	57 e4       	ldi	r21, 0x47	; 71
    440e:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    4412:	18 16       	cp	r1, r24
    4414:	4c f5       	brge	.+82     	; 0x4468 <turnback+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4416:	6f a1       	ldd	r22, Y+39	; 0x27
    4418:	78 a5       	ldd	r23, Y+40	; 0x28
    441a:	89 a5       	ldd	r24, Y+41	; 0x29
    441c:	9a a5       	ldd	r25, Y+42	; 0x2a
    441e:	20 e0       	ldi	r18, 0x00	; 0
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	40 e2       	ldi	r20, 0x20	; 32
    4424:	51 e4       	ldi	r21, 0x41	; 65
    4426:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	bc 01       	movw	r22, r24
    4430:	cd 01       	movw	r24, r26
    4432:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	9a a3       	std	Y+34, r25	; 0x22
    443c:	89 a3       	std	Y+33, r24	; 0x21
    443e:	0f c0       	rjmp	.+30     	; 0x445e <turnback+0x1dc>
    4440:	80 e7       	ldi	r24, 0x70	; 112
    4442:	91 e0       	ldi	r25, 0x01	; 1
    4444:	98 a3       	std	Y+32, r25	; 0x20
    4446:	8f 8f       	std	Y+31, r24	; 0x1f
    4448:	8f 8d       	ldd	r24, Y+31	; 0x1f
    444a:	98 a1       	ldd	r25, Y+32	; 0x20
    444c:	01 97       	sbiw	r24, 0x01	; 1
    444e:	f1 f7       	brne	.-4      	; 0x444c <turnback+0x1ca>
    4450:	98 a3       	std	Y+32, r25	; 0x20
    4452:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4454:	89 a1       	ldd	r24, Y+33	; 0x21
    4456:	9a a1       	ldd	r25, Y+34	; 0x22
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	9a a3       	std	Y+34, r25	; 0x22
    445c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    445e:	89 a1       	ldd	r24, Y+33	; 0x21
    4460:	9a a1       	ldd	r25, Y+34	; 0x22
    4462:	00 97       	sbiw	r24, 0x00	; 0
    4464:	69 f7       	brne	.-38     	; 0x4440 <turnback+0x1be>
    4466:	14 c0       	rjmp	.+40     	; 0x4490 <turnback+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4468:	6b a1       	ldd	r22, Y+35	; 0x23
    446a:	7c a1       	ldd	r23, Y+36	; 0x24
    446c:	8d a1       	ldd	r24, Y+37	; 0x25
    446e:	9e a1       	ldd	r25, Y+38	; 0x26
    4470:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	9a a3       	std	Y+34, r25	; 0x22
    447a:	89 a3       	std	Y+33, r24	; 0x21
    447c:	89 a1       	ldd	r24, Y+33	; 0x21
    447e:	9a a1       	ldd	r25, Y+34	; 0x22
    4480:	9e 8f       	std	Y+30, r25	; 0x1e
    4482:	8d 8f       	std	Y+29, r24	; 0x1d
    4484:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4486:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4488:	01 97       	sbiw	r24, 0x01	; 1
    448a:	f1 f7       	brne	.-4      	; 0x4488 <turnback+0x206>
    448c:	9e 8f       	std	Y+30, r25	; 0x1e
    448e:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(200);
set_PWM_value(MID);
    4490:	80 91 8a 03 	lds	r24, 0x038A
    4494:	90 91 8b 03 	lds	r25, 0x038B
    4498:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
if(dir==0)
    449c:	80 91 0c 03 	lds	r24, 0x030C
    44a0:	90 91 0d 03 	lds	r25, 0x030D
    44a4:	00 97       	sbiw	r24, 0x00	; 0
    44a6:	19 f4       	brne	.+6      	; 0x44ae <turnback+0x22c>
left();
    44a8:	0e 94 d5 13 	call	0x27aa	; 0x27aa <left>
    44ac:	02 c0       	rjmp	.+4      	; 0x44b2 <turnback+0x230>
else 
right();
    44ae:	0e 94 df 13 	call	0x27be	; 0x27be <right>
count=0;
    44b2:	10 92 0f 03 	sts	0x030F, r1
    44b6:	10 92 0e 03 	sts	0x030E, r1
}
if(b==11)
    44ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    44bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    44be:	8b 30       	cpi	r24, 0x0B	; 11
    44c0:	91 05       	cpc	r25, r1
    44c2:	09 f0       	breq	.+2      	; 0x44c6 <turnback+0x244>
    44c4:	fe c0       	rjmp	.+508    	; 0x46c2 <turnback+0x440>
{
down();
    44c6:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <down>
    44ca:	80 e0       	ldi	r24, 0x00	; 0
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	a8 e4       	ldi	r26, 0x48	; 72
    44d0:	b3 e4       	ldi	r27, 0x43	; 67
    44d2:	89 8f       	std	Y+25, r24	; 0x19
    44d4:	9a 8f       	std	Y+26, r25	; 0x1a
    44d6:	ab 8f       	std	Y+27, r26	; 0x1b
    44d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44da:	69 8d       	ldd	r22, Y+25	; 0x19
    44dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44e2:	26 e6       	ldi	r18, 0x66	; 102
    44e4:	36 e6       	ldi	r19, 0x66	; 102
    44e6:	46 e6       	ldi	r20, 0x66	; 102
    44e8:	55 e4       	ldi	r21, 0x45	; 69
    44ea:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    44ee:	dc 01       	movw	r26, r24
    44f0:	cb 01       	movw	r24, r22
    44f2:	8d 8b       	std	Y+21, r24	; 0x15
    44f4:	9e 8b       	std	Y+22, r25	; 0x16
    44f6:	af 8b       	std	Y+23, r26	; 0x17
    44f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44fa:	6d 89       	ldd	r22, Y+21	; 0x15
    44fc:	7e 89       	ldd	r23, Y+22	; 0x16
    44fe:	8f 89       	ldd	r24, Y+23	; 0x17
    4500:	98 8d       	ldd	r25, Y+24	; 0x18
    4502:	20 e0       	ldi	r18, 0x00	; 0
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	40 e8       	ldi	r20, 0x80	; 128
    4508:	5f e3       	ldi	r21, 0x3F	; 63
    450a:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    450e:	88 23       	and	r24, r24
    4510:	2c f4       	brge	.+10     	; 0x451c <turnback+0x29a>
		__ticks = 1;
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	9c 8b       	std	Y+20, r25	; 0x14
    4518:	8b 8b       	std	Y+19, r24	; 0x13
    451a:	3f c0       	rjmp	.+126    	; 0x459a <turnback+0x318>
	else if (__tmp > 65535)
    451c:	6d 89       	ldd	r22, Y+21	; 0x15
    451e:	7e 89       	ldd	r23, Y+22	; 0x16
    4520:	8f 89       	ldd	r24, Y+23	; 0x17
    4522:	98 8d       	ldd	r25, Y+24	; 0x18
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	3f ef       	ldi	r19, 0xFF	; 255
    4528:	4f e7       	ldi	r20, 0x7F	; 127
    452a:	57 e4       	ldi	r21, 0x47	; 71
    452c:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    4530:	18 16       	cp	r1, r24
    4532:	4c f5       	brge	.+82     	; 0x4586 <turnback+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4534:	69 8d       	ldd	r22, Y+25	; 0x19
    4536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    453a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    453c:	20 e0       	ldi	r18, 0x00	; 0
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	40 e2       	ldi	r20, 0x20	; 32
    4542:	51 e4       	ldi	r21, 0x41	; 65
    4544:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    4548:	dc 01       	movw	r26, r24
    454a:	cb 01       	movw	r24, r22
    454c:	bc 01       	movw	r22, r24
    454e:	cd 01       	movw	r24, r26
    4550:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    4554:	dc 01       	movw	r26, r24
    4556:	cb 01       	movw	r24, r22
    4558:	9c 8b       	std	Y+20, r25	; 0x14
    455a:	8b 8b       	std	Y+19, r24	; 0x13
    455c:	0f c0       	rjmp	.+30     	; 0x457c <turnback+0x2fa>
    455e:	80 e7       	ldi	r24, 0x70	; 112
    4560:	91 e0       	ldi	r25, 0x01	; 1
    4562:	9a 8b       	std	Y+18, r25	; 0x12
    4564:	89 8b       	std	Y+17, r24	; 0x11
    4566:	89 89       	ldd	r24, Y+17	; 0x11
    4568:	9a 89       	ldd	r25, Y+18	; 0x12
    456a:	01 97       	sbiw	r24, 0x01	; 1
    456c:	f1 f7       	brne	.-4      	; 0x456a <turnback+0x2e8>
    456e:	9a 8b       	std	Y+18, r25	; 0x12
    4570:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4572:	8b 89       	ldd	r24, Y+19	; 0x13
    4574:	9c 89       	ldd	r25, Y+20	; 0x14
    4576:	01 97       	sbiw	r24, 0x01	; 1
    4578:	9c 8b       	std	Y+20, r25	; 0x14
    457a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    457c:	8b 89       	ldd	r24, Y+19	; 0x13
    457e:	9c 89       	ldd	r25, Y+20	; 0x14
    4580:	00 97       	sbiw	r24, 0x00	; 0
    4582:	69 f7       	brne	.-38     	; 0x455e <turnback+0x2dc>
    4584:	14 c0       	rjmp	.+40     	; 0x45ae <turnback+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4586:	6d 89       	ldd	r22, Y+21	; 0x15
    4588:	7e 89       	ldd	r23, Y+22	; 0x16
    458a:	8f 89       	ldd	r24, Y+23	; 0x17
    458c:	98 8d       	ldd	r25, Y+24	; 0x18
    458e:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	9c 8b       	std	Y+20, r25	; 0x14
    4598:	8b 8b       	std	Y+19, r24	; 0x13
    459a:	8b 89       	ldd	r24, Y+19	; 0x13
    459c:	9c 89       	ldd	r25, Y+20	; 0x14
    459e:	98 8b       	std	Y+16, r25	; 0x10
    45a0:	8f 87       	std	Y+15, r24	; 0x0f
    45a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    45a4:	98 89       	ldd	r25, Y+16	; 0x10
    45a6:	01 97       	sbiw	r24, 0x01	; 1
    45a8:	f1 f7       	brne	.-4      	; 0x45a6 <turnback+0x324>
    45aa:	98 8b       	std	Y+16, r25	; 0x10
    45ac:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(200);
release();
    45ae:	0e 94 12 13 	call	0x2624	; 0x2624 <release>
    45b2:	80 e0       	ldi	r24, 0x00	; 0
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	a8 e4       	ldi	r26, 0x48	; 72
    45b8:	b3 e4       	ldi	r27, 0x43	; 67
    45ba:	8b 87       	std	Y+11, r24	; 0x0b
    45bc:	9c 87       	std	Y+12, r25	; 0x0c
    45be:	ad 87       	std	Y+13, r26	; 0x0d
    45c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    45c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    45c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    45c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ca:	26 e6       	ldi	r18, 0x66	; 102
    45cc:	36 e6       	ldi	r19, 0x66	; 102
    45ce:	46 e6       	ldi	r20, 0x66	; 102
    45d0:	55 e4       	ldi	r21, 0x45	; 69
    45d2:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    45d6:	dc 01       	movw	r26, r24
    45d8:	cb 01       	movw	r24, r22
    45da:	8f 83       	std	Y+7, r24	; 0x07
    45dc:	98 87       	std	Y+8, r25	; 0x08
    45de:	a9 87       	std	Y+9, r26	; 0x09
    45e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45e2:	6f 81       	ldd	r22, Y+7	; 0x07
    45e4:	78 85       	ldd	r23, Y+8	; 0x08
    45e6:	89 85       	ldd	r24, Y+9	; 0x09
    45e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ea:	20 e0       	ldi	r18, 0x00	; 0
    45ec:	30 e0       	ldi	r19, 0x00	; 0
    45ee:	40 e8       	ldi	r20, 0x80	; 128
    45f0:	5f e3       	ldi	r21, 0x3F	; 63
    45f2:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    45f6:	88 23       	and	r24, r24
    45f8:	2c f4       	brge	.+10     	; 0x4604 <turnback+0x382>
		__ticks = 1;
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	9e 83       	std	Y+6, r25	; 0x06
    4600:	8d 83       	std	Y+5, r24	; 0x05
    4602:	3f c0       	rjmp	.+126    	; 0x4682 <turnback+0x400>
	else if (__tmp > 65535)
    4604:	6f 81       	ldd	r22, Y+7	; 0x07
    4606:	78 85       	ldd	r23, Y+8	; 0x08
    4608:	89 85       	ldd	r24, Y+9	; 0x09
    460a:	9a 85       	ldd	r25, Y+10	; 0x0a
    460c:	20 e0       	ldi	r18, 0x00	; 0
    460e:	3f ef       	ldi	r19, 0xFF	; 255
    4610:	4f e7       	ldi	r20, 0x7F	; 127
    4612:	57 e4       	ldi	r21, 0x47	; 71
    4614:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    4618:	18 16       	cp	r1, r24
    461a:	4c f5       	brge	.+82     	; 0x466e <turnback+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    461c:	6b 85       	ldd	r22, Y+11	; 0x0b
    461e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4620:	8d 85       	ldd	r24, Y+13	; 0x0d
    4622:	9e 85       	ldd	r25, Y+14	; 0x0e
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	40 e2       	ldi	r20, 0x20	; 32
    462a:	51 e4       	ldi	r21, 0x41	; 65
    462c:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	bc 01       	movw	r22, r24
    4636:	cd 01       	movw	r24, r26
    4638:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    463c:	dc 01       	movw	r26, r24
    463e:	cb 01       	movw	r24, r22
    4640:	9e 83       	std	Y+6, r25	; 0x06
    4642:	8d 83       	std	Y+5, r24	; 0x05
    4644:	0f c0       	rjmp	.+30     	; 0x4664 <turnback+0x3e2>
    4646:	80 e7       	ldi	r24, 0x70	; 112
    4648:	91 e0       	ldi	r25, 0x01	; 1
    464a:	9c 83       	std	Y+4, r25	; 0x04
    464c:	8b 83       	std	Y+3, r24	; 0x03
    464e:	8b 81       	ldd	r24, Y+3	; 0x03
    4650:	9c 81       	ldd	r25, Y+4	; 0x04
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	f1 f7       	brne	.-4      	; 0x4652 <turnback+0x3d0>
    4656:	9c 83       	std	Y+4, r25	; 0x04
    4658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465a:	8d 81       	ldd	r24, Y+5	; 0x05
    465c:	9e 81       	ldd	r25, Y+6	; 0x06
    465e:	01 97       	sbiw	r24, 0x01	; 1
    4660:	9e 83       	std	Y+6, r25	; 0x06
    4662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4664:	8d 81       	ldd	r24, Y+5	; 0x05
    4666:	9e 81       	ldd	r25, Y+6	; 0x06
    4668:	00 97       	sbiw	r24, 0x00	; 0
    466a:	69 f7       	brne	.-38     	; 0x4646 <turnback+0x3c4>
    466c:	14 c0       	rjmp	.+40     	; 0x4696 <turnback+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    466e:	6f 81       	ldd	r22, Y+7	; 0x07
    4670:	78 85       	ldd	r23, Y+8	; 0x08
    4672:	89 85       	ldd	r24, Y+9	; 0x09
    4674:	9a 85       	ldd	r25, Y+10	; 0x0a
    4676:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    467a:	dc 01       	movw	r26, r24
    467c:	cb 01       	movw	r24, r22
    467e:	9e 83       	std	Y+6, r25	; 0x06
    4680:	8d 83       	std	Y+5, r24	; 0x05
    4682:	8d 81       	ldd	r24, Y+5	; 0x05
    4684:	9e 81       	ldd	r25, Y+6	; 0x06
    4686:	9a 83       	std	Y+2, r25	; 0x02
    4688:	89 83       	std	Y+1, r24	; 0x01
    468a:	89 81       	ldd	r24, Y+1	; 0x01
    468c:	9a 81       	ldd	r25, Y+2	; 0x02
    468e:	01 97       	sbiw	r24, 0x01	; 1
    4690:	f1 f7       	brne	.-4      	; 0x468e <turnback+0x40c>
    4692:	9a 83       	std	Y+2, r25	; 0x02
    4694:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(200);
set_PWM_value(MID);
    4696:	80 91 8a 03 	lds	r24, 0x038A
    469a:	90 91 8b 03 	lds	r25, 0x038B
    469e:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
if(dir==1)
    46a2:	80 91 0c 03 	lds	r24, 0x030C
    46a6:	90 91 0d 03 	lds	r25, 0x030D
    46aa:	81 30       	cpi	r24, 0x01	; 1
    46ac:	91 05       	cpc	r25, r1
    46ae:	19 f4       	brne	.+6      	; 0x46b6 <turnback+0x434>
left();
    46b0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <left>
    46b4:	02 c0       	rjmp	.+4      	; 0x46ba <turnback+0x438>
else 
right();
    46b6:	0e 94 df 13 	call	0x27be	; 0x27be <right>
count=0;
    46ba:	10 92 0f 03 	sts	0x030F, r1
    46be:	10 92 0e 03 	sts	0x030E, r1
}
if(b==2)
    46c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    46c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    46c6:	82 30       	cpi	r24, 0x02	; 2
    46c8:	91 05       	cpc	r25, r1
    46ca:	31 f4       	brne	.+12     	; 0x46d8 <turnback+0x456>
{right();
    46cc:	0e 94 df 13 	call	0x27be	; 0x27be <right>
count=0;}
    46d0:	10 92 0f 03 	sts	0x030F, r1
    46d4:	10 92 0e 03 	sts	0x030E, r1



while( 1)
{
if(count > a && (P1&0b1000 || P1&0b10000 || P1&0b100000 || P1&0b100))
    46d8:	20 91 0e 03 	lds	r18, 0x030E
    46dc:	30 91 0f 03 	lds	r19, 0x030F
    46e0:	89 ad       	ldd	r24, Y+57	; 0x39
    46e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    46e4:	82 17       	cp	r24, r18
    46e6:	93 07       	cpc	r25, r19
    46e8:	bc f7       	brge	.-18     	; 0x46d8 <turnback+0x456>
    46ea:	e6 e0       	ldi	r30, 0x06	; 6
    46ec:	f1 e0       	ldi	r31, 0x01	; 1
    46ee:	80 81       	ld	r24, Z
    46f0:	88 2f       	mov	r24, r24
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	88 70       	andi	r24, 0x08	; 8
    46f6:	90 70       	andi	r25, 0x00	; 0
    46f8:	00 97       	sbiw	r24, 0x00	; 0
    46fa:	d9 f4       	brne	.+54     	; 0x4732 <turnback+0x4b0>
    46fc:	e6 e0       	ldi	r30, 0x06	; 6
    46fe:	f1 e0       	ldi	r31, 0x01	; 1
    4700:	80 81       	ld	r24, Z
    4702:	88 2f       	mov	r24, r24
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	80 71       	andi	r24, 0x10	; 16
    4708:	90 70       	andi	r25, 0x00	; 0
    470a:	00 97       	sbiw	r24, 0x00	; 0
    470c:	91 f4       	brne	.+36     	; 0x4732 <turnback+0x4b0>
    470e:	e6 e0       	ldi	r30, 0x06	; 6
    4710:	f1 e0       	ldi	r31, 0x01	; 1
    4712:	80 81       	ld	r24, Z
    4714:	88 2f       	mov	r24, r24
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	80 72       	andi	r24, 0x20	; 32
    471a:	90 70       	andi	r25, 0x00	; 0
    471c:	00 97       	sbiw	r24, 0x00	; 0
    471e:	49 f4       	brne	.+18     	; 0x4732 <turnback+0x4b0>
    4720:	e6 e0       	ldi	r30, 0x06	; 6
    4722:	f1 e0       	ldi	r31, 0x01	; 1
    4724:	80 81       	ld	r24, Z
    4726:	88 2f       	mov	r24, r24
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	84 70       	andi	r24, 0x04	; 4
    472c:	90 70       	andi	r25, 0x00	; 0
    472e:	00 97       	sbiw	r24, 0x00	; 0
    4730:	99 f2       	breq	.-90     	; 0x46d8 <turnback+0x456>
break;
}
stop();
    4732:	0e 94 11 14 	call	0x2822	; 0x2822 <stop>

}
    4736:	ec 96       	adiw	r28, 0x3c	; 60
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	f8 94       	cli
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	cd bf       	out	0x3d, r28	; 61
    4742:	cf 91       	pop	r28
    4744:	df 91       	pop	r29
    4746:	08 95       	ret

00004748 <turnright>:
void turnright(int a)

{
    4748:	df 93       	push	r29
    474a:	cf 93       	push	r28
    474c:	00 d0       	rcall	.+0      	; 0x474e <turnright+0x6>
    474e:	cd b7       	in	r28, 0x3d	; 61
    4750:	de b7       	in	r29, 0x3e	; 62
    4752:	9a 83       	std	Y+2, r25	; 0x02
    4754:	89 83       	std	Y+1, r24	; 0x01
//cli();
count=0;
    4756:	10 92 0f 03 	sts	0x030F, r1
    475a:	10 92 0e 03 	sts	0x030E, r1
sei();
    475e:	78 94       	sei
line(fcount);
    4760:	80 91 24 02 	lds	r24, 0x0224
    4764:	90 91 25 02 	lds	r25, 0x0225
    4768:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
set_PWM_value(MID);
    476c:	80 91 8a 03 	lds	r24, 0x038A
    4770:	90 91 8b 03 	lds	r25, 0x038B
    4774:	0e 94 8b 13 	call	0x2716	; 0x2716 <set_PWM_value>
right();count=0;
    4778:	0e 94 df 13 	call	0x27be	; 0x27be <right>
    477c:	10 92 0f 03 	sts	0x030F, r1
    4780:	10 92 0e 03 	sts	0x030E, r1


while( 1)
{
if(count > a && (P1&0b1000 || P1&0b10000 || P1&0b100000 || P1&0b100))
    4784:	20 91 0e 03 	lds	r18, 0x030E
    4788:	30 91 0f 03 	lds	r19, 0x030F
    478c:	89 81       	ldd	r24, Y+1	; 0x01
    478e:	9a 81       	ldd	r25, Y+2	; 0x02
    4790:	82 17       	cp	r24, r18
    4792:	93 07       	cpc	r25, r19
    4794:	bc f7       	brge	.-18     	; 0x4784 <turnright+0x3c>
    4796:	e6 e0       	ldi	r30, 0x06	; 6
    4798:	f1 e0       	ldi	r31, 0x01	; 1
    479a:	80 81       	ld	r24, Z
    479c:	88 2f       	mov	r24, r24
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	88 70       	andi	r24, 0x08	; 8
    47a2:	90 70       	andi	r25, 0x00	; 0
    47a4:	00 97       	sbiw	r24, 0x00	; 0
    47a6:	d9 f4       	brne	.+54     	; 0x47de <turnright+0x96>
    47a8:	e6 e0       	ldi	r30, 0x06	; 6
    47aa:	f1 e0       	ldi	r31, 0x01	; 1
    47ac:	80 81       	ld	r24, Z
    47ae:	88 2f       	mov	r24, r24
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	80 71       	andi	r24, 0x10	; 16
    47b4:	90 70       	andi	r25, 0x00	; 0
    47b6:	00 97       	sbiw	r24, 0x00	; 0
    47b8:	91 f4       	brne	.+36     	; 0x47de <turnright+0x96>
    47ba:	e6 e0       	ldi	r30, 0x06	; 6
    47bc:	f1 e0       	ldi	r31, 0x01	; 1
    47be:	80 81       	ld	r24, Z
    47c0:	88 2f       	mov	r24, r24
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	80 72       	andi	r24, 0x20	; 32
    47c6:	90 70       	andi	r25, 0x00	; 0
    47c8:	00 97       	sbiw	r24, 0x00	; 0
    47ca:	49 f4       	brne	.+18     	; 0x47de <turnright+0x96>
    47cc:	e6 e0       	ldi	r30, 0x06	; 6
    47ce:	f1 e0       	ldi	r31, 0x01	; 1
    47d0:	80 81       	ld	r24, Z
    47d2:	88 2f       	mov	r24, r24
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	84 70       	andi	r24, 0x04	; 4
    47d8:	90 70       	andi	r25, 0x00	; 0
    47da:	00 97       	sbiw	r24, 0x00	; 0
    47dc:	99 f2       	breq	.-90     	; 0x4784 <turnright+0x3c>
break;
}
stop();
    47de:	0e 94 11 14 	call	0x2822	; 0x2822 <stop>

}
    47e2:	0f 90       	pop	r0
    47e4:	0f 90       	pop	r0
    47e6:	cf 91       	pop	r28
    47e8:	df 91       	pop	r29
    47ea:	08 95       	ret

000047ec <takediss2>:
void takediss2(int dest,int curr)
{
    47ec:	df 93       	push	r29
    47ee:	cf 93       	push	r28
    47f0:	00 d0       	rcall	.+0      	; 0x47f2 <takediss2+0x6>
    47f2:	00 d0       	rcall	.+0      	; 0x47f4 <takediss2+0x8>
    47f4:	cd b7       	in	r28, 0x3d	; 61
    47f6:	de b7       	in	r29, 0x3e	; 62
    47f8:	9a 83       	std	Y+2, r25	; 0x02
    47fa:	89 83       	std	Y+1, r24	; 0x01
    47fc:	7c 83       	std	Y+4, r23	; 0x04
    47fe:	6b 83       	std	Y+3, r22	; 0x03
 if((dest - curr)==7)
    4800:	89 81       	ldd	r24, Y+1	; 0x01
    4802:	9a 81       	ldd	r25, Y+2	; 0x02
    4804:	2b 81       	ldd	r18, Y+3	; 0x03
    4806:	3c 81       	ldd	r19, Y+4	; 0x04
    4808:	82 1b       	sub	r24, r18
    480a:	93 0b       	sbc	r25, r19
    480c:	87 30       	cpi	r24, 0x07	; 7
    480e:	91 05       	cpc	r25, r1
    4810:	09 f0       	breq	.+2      	; 0x4814 <takediss2+0x28>
    4812:	f3 c0       	rjmp	.+486    	; 0x49fa <takediss2+0x20e>
 {
  if(dir==0)
    4814:	80 91 0c 03 	lds	r24, 0x030C
    4818:	90 91 0d 03 	lds	r25, 0x030D
    481c:	00 97       	sbiw	r24, 0x00	; 0
    481e:	09 f0       	breq	.+2      	; 0x4822 <takediss2+0x36>
    4820:	72 c0       	rjmp	.+228    	; 0x4906 <takediss2+0x11a>
   {
     if((arr[curr/6][curr%6+1]==2)||(arr[curr/6][curr%6+1]==6))
    4822:	8b 81       	ldd	r24, Y+3	; 0x03
    4824:	9c 81       	ldd	r25, Y+4	; 0x04
    4826:	26 e0       	ldi	r18, 0x06	; 6
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	b9 01       	movw	r22, r18
    482c:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4830:	cb 01       	movw	r24, r22
    4832:	fc 01       	movw	r30, r24
    4834:	8b 81       	ldd	r24, Y+3	; 0x03
    4836:	9c 81       	ldd	r25, Y+4	; 0x04
    4838:	26 e0       	ldi	r18, 0x06	; 6
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	b9 01       	movw	r22, r18
    483e:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4842:	9c 01       	movw	r18, r24
    4844:	2f 5f       	subi	r18, 0xFF	; 255
    4846:	3f 4f       	sbci	r19, 0xFF	; 255
    4848:	cf 01       	movw	r24, r30
    484a:	88 0f       	add	r24, r24
    484c:	99 1f       	adc	r25, r25
    484e:	8e 0f       	add	r24, r30
    4850:	9f 1f       	adc	r25, r31
    4852:	88 0f       	add	r24, r24
    4854:	99 1f       	adc	r25, r25
    4856:	82 0f       	add	r24, r18
    4858:	93 1f       	adc	r25, r19
    485a:	fc 01       	movw	r30, r24
    485c:	e8 5a       	subi	r30, 0xA8	; 168
    485e:	fc 4f       	sbci	r31, 0xFC	; 252
    4860:	80 81       	ld	r24, Z
    4862:	82 30       	cpi	r24, 0x02	; 2
    4864:	11 f1       	breq	.+68     	; 0x48aa <takediss2+0xbe>
    4866:	8b 81       	ldd	r24, Y+3	; 0x03
    4868:	9c 81       	ldd	r25, Y+4	; 0x04
    486a:	26 e0       	ldi	r18, 0x06	; 6
    486c:	30 e0       	ldi	r19, 0x00	; 0
    486e:	b9 01       	movw	r22, r18
    4870:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4874:	cb 01       	movw	r24, r22
    4876:	fc 01       	movw	r30, r24
    4878:	8b 81       	ldd	r24, Y+3	; 0x03
    487a:	9c 81       	ldd	r25, Y+4	; 0x04
    487c:	26 e0       	ldi	r18, 0x06	; 6
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	b9 01       	movw	r22, r18
    4882:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4886:	9c 01       	movw	r18, r24
    4888:	2f 5f       	subi	r18, 0xFF	; 255
    488a:	3f 4f       	sbci	r19, 0xFF	; 255
    488c:	cf 01       	movw	r24, r30
    488e:	88 0f       	add	r24, r24
    4890:	99 1f       	adc	r25, r25
    4892:	8e 0f       	add	r24, r30
    4894:	9f 1f       	adc	r25, r31
    4896:	88 0f       	add	r24, r24
    4898:	99 1f       	adc	r25, r25
    489a:	82 0f       	add	r24, r18
    489c:	93 1f       	adc	r25, r19
    489e:	fc 01       	movw	r30, r24
    48a0:	e8 5a       	subi	r30, 0xA8	; 168
    48a2:	fc 4f       	sbci	r31, 0xFC	; 252
    48a4:	80 81       	ld	r24, Z
    48a6:	86 30       	cpi	r24, 0x06	; 6
    48a8:	a9 f4       	brne	.+42     	; 0x48d4 <takediss2+0xe8>
	{
		//break at right
count=0;
    48aa:	10 92 0f 03 	sts	0x030F, r1
    48ae:	10 92 0e 03 	sts	0x030E, r1

line(3);
    48b2:	83 e0       	ldi	r24, 0x03	; 3
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
 fcount=8;
    48ba:	88 e0       	ldi	r24, 0x08	; 8
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	90 93 25 02 	sts	0x0225, r25
    48c2:	80 93 24 02 	sts	0x0224, r24
dir=1;
    48c6:	81 e0       	ldi	r24, 0x01	; 1
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	90 93 0d 03 	sts	0x030D, r25
    48ce:	80 93 0c 03 	sts	0x030C, r24
    48d2:	95 c3       	rjmp	.+1834   	; 0x4ffe <takediss2+0x812>
	}
     else 
	{
	    	//turn right and break at left
	     turnright(tcount);
    48d4:	80 e1       	ldi	r24, 0x10	; 16
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	0e 94 a4 23 	call	0x4748	; 0x4748 <turnright>
		 count=23;
    48dc:	87 e1       	ldi	r24, 0x17	; 23
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	90 93 0f 03 	sts	0x030F, r25
    48e4:	80 93 0e 03 	sts	0x030E, r24
		 line(4);
    48e8:	84 e0       	ldi	r24, 0x04	; 4
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
		 fcount=11;
    48f0:	8b e0       	ldi	r24, 0x0B	; 11
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	90 93 25 02 	sts	0x0225, r25
    48f8:	80 93 24 02 	sts	0x0224, r24
dir=0;
    48fc:	10 92 0d 03 	sts	0x030D, r1
    4900:	10 92 0c 03 	sts	0x030C, r1
    4904:	7c c3       	rjmp	.+1784   	; 0x4ffe <takediss2+0x812>
	}
   }
 
 else if(dir==1)
    4906:	80 91 0c 03 	lds	r24, 0x030C
    490a:	90 91 0d 03 	lds	r25, 0x030D
    490e:	81 30       	cpi	r24, 0x01	; 1
    4910:	91 05       	cpc	r25, r1
    4912:	09 f0       	breq	.+2      	; 0x4916 <takediss2+0x12a>
    4914:	74 c3       	rjmp	.+1768   	; 0x4ffe <takediss2+0x812>
   {
     if((arr[curr/6][curr%6+1]==2)||(arr[curr/6][curr%6+1]==6))
    4916:	8b 81       	ldd	r24, Y+3	; 0x03
    4918:	9c 81       	ldd	r25, Y+4	; 0x04
    491a:	26 e0       	ldi	r18, 0x06	; 6
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	b9 01       	movw	r22, r18
    4920:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4924:	cb 01       	movw	r24, r22
    4926:	fc 01       	movw	r30, r24
    4928:	8b 81       	ldd	r24, Y+3	; 0x03
    492a:	9c 81       	ldd	r25, Y+4	; 0x04
    492c:	26 e0       	ldi	r18, 0x06	; 6
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	b9 01       	movw	r22, r18
    4932:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4936:	9c 01       	movw	r18, r24
    4938:	2f 5f       	subi	r18, 0xFF	; 255
    493a:	3f 4f       	sbci	r19, 0xFF	; 255
    493c:	cf 01       	movw	r24, r30
    493e:	88 0f       	add	r24, r24
    4940:	99 1f       	adc	r25, r25
    4942:	8e 0f       	add	r24, r30
    4944:	9f 1f       	adc	r25, r31
    4946:	88 0f       	add	r24, r24
    4948:	99 1f       	adc	r25, r25
    494a:	82 0f       	add	r24, r18
    494c:	93 1f       	adc	r25, r19
    494e:	fc 01       	movw	r30, r24
    4950:	e8 5a       	subi	r30, 0xA8	; 168
    4952:	fc 4f       	sbci	r31, 0xFC	; 252
    4954:	80 81       	ld	r24, Z
    4956:	82 30       	cpi	r24, 0x02	; 2
    4958:	11 f1       	breq	.+68     	; 0x499e <takediss2+0x1b2>
    495a:	8b 81       	ldd	r24, Y+3	; 0x03
    495c:	9c 81       	ldd	r25, Y+4	; 0x04
    495e:	26 e0       	ldi	r18, 0x06	; 6
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	b9 01       	movw	r22, r18
    4964:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4968:	cb 01       	movw	r24, r22
    496a:	fc 01       	movw	r30, r24
    496c:	8b 81       	ldd	r24, Y+3	; 0x03
    496e:	9c 81       	ldd	r25, Y+4	; 0x04
    4970:	26 e0       	ldi	r18, 0x06	; 6
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	b9 01       	movw	r22, r18
    4976:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    497a:	9c 01       	movw	r18, r24
    497c:	2f 5f       	subi	r18, 0xFF	; 255
    497e:	3f 4f       	sbci	r19, 0xFF	; 255
    4980:	cf 01       	movw	r24, r30
    4982:	88 0f       	add	r24, r24
    4984:	99 1f       	adc	r25, r25
    4986:	8e 0f       	add	r24, r30
    4988:	9f 1f       	adc	r25, r31
    498a:	88 0f       	add	r24, r24
    498c:	99 1f       	adc	r25, r25
    498e:	82 0f       	add	r24, r18
    4990:	93 1f       	adc	r25, r19
    4992:	fc 01       	movw	r30, r24
    4994:	e8 5a       	subi	r30, 0xA8	; 168
    4996:	fc 4f       	sbci	r31, 0xFC	; 252
    4998:	80 81       	ld	r24, Z
    499a:	86 30       	cpi	r24, 0x06	; 6
    499c:	d9 f4       	brne	.+54     	; 0x49d4 <takediss2+0x1e8>
	{
		//turn left and break at right
		 turnleft(tcount);
    499e:	80 e1       	ldi	r24, 0x10	; 16
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	0e 94 ef 20 	call	0x41de	; 0x41de <turnleft>
		 count=23;
    49a6:	87 e1       	ldi	r24, 0x17	; 23
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	90 93 0f 03 	sts	0x030F, r25
    49ae:	80 93 0e 03 	sts	0x030E, r24
		
line(3);
    49b2:	83 e0       	ldi	r24, 0x03	; 3
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
 fcount=8;
    49ba:	88 e0       	ldi	r24, 0x08	; 8
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	90 93 25 02 	sts	0x0225, r25
    49c2:	80 93 24 02 	sts	0x0224, r24
dir=1;
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	90 93 0d 03 	sts	0x030D, r25
    49ce:	80 93 0c 03 	sts	0x030C, r24
    49d2:	15 c3       	rjmp	.+1578   	; 0x4ffe <takediss2+0x812>
	}
     else 
	{
		//break at left 
		count=0;
    49d4:	10 92 0f 03 	sts	0x030F, r1
    49d8:	10 92 0e 03 	sts	0x030E, r1

line(4);
    49dc:	84 e0       	ldi	r24, 0x04	; 4
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
fcount=11;
    49e4:	8b e0       	ldi	r24, 0x0B	; 11
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	90 93 25 02 	sts	0x0225, r25
    49ec:	80 93 24 02 	sts	0x0224, r24
dir=0;
    49f0:	10 92 0d 03 	sts	0x030D, r1
    49f4:	10 92 0c 03 	sts	0x030C, r1
    49f8:	02 c3       	rjmp	.+1540   	; 0x4ffe <takediss2+0x812>
   }

 }


 else if((dest - curr)== -5)
    49fa:	89 81       	ldd	r24, Y+1	; 0x01
    49fc:	9a 81       	ldd	r25, Y+2	; 0x02
    49fe:	2b 81       	ldd	r18, Y+3	; 0x03
    4a00:	3c 81       	ldd	r19, Y+4	; 0x04
    4a02:	82 1b       	sub	r24, r18
    4a04:	93 0b       	sbc	r25, r19
    4a06:	2f ef       	ldi	r18, 0xFF	; 255
    4a08:	8b 3f       	cpi	r24, 0xFB	; 251
    4a0a:	92 07       	cpc	r25, r18
    4a0c:	09 f0       	breq	.+2      	; 0x4a10 <takediss2+0x224>
    4a0e:	f3 c0       	rjmp	.+486    	; 0x4bf6 <takediss2+0x40a>
 {
  if(dir==0)
    4a10:	80 91 0c 03 	lds	r24, 0x030C
    4a14:	90 91 0d 03 	lds	r25, 0x030D
    4a18:	00 97       	sbiw	r24, 0x00	; 0
    4a1a:	09 f0       	breq	.+2      	; 0x4a1e <takediss2+0x232>
    4a1c:	72 c0       	rjmp	.+228    	; 0x4b02 <takediss2+0x316>
   {
     if((arr[curr/6][curr%6+1]==3)||(arr[curr/6][curr%6+1]==7))
    4a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a20:	9c 81       	ldd	r25, Y+4	; 0x04
    4a22:	26 e0       	ldi	r18, 0x06	; 6
    4a24:	30 e0       	ldi	r19, 0x00	; 0
    4a26:	b9 01       	movw	r22, r18
    4a28:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4a2c:	cb 01       	movw	r24, r22
    4a2e:	fc 01       	movw	r30, r24
    4a30:	8b 81       	ldd	r24, Y+3	; 0x03
    4a32:	9c 81       	ldd	r25, Y+4	; 0x04
    4a34:	26 e0       	ldi	r18, 0x06	; 6
    4a36:	30 e0       	ldi	r19, 0x00	; 0
    4a38:	b9 01       	movw	r22, r18
    4a3a:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4a3e:	9c 01       	movw	r18, r24
    4a40:	2f 5f       	subi	r18, 0xFF	; 255
    4a42:	3f 4f       	sbci	r19, 0xFF	; 255
    4a44:	cf 01       	movw	r24, r30
    4a46:	88 0f       	add	r24, r24
    4a48:	99 1f       	adc	r25, r25
    4a4a:	8e 0f       	add	r24, r30
    4a4c:	9f 1f       	adc	r25, r31
    4a4e:	88 0f       	add	r24, r24
    4a50:	99 1f       	adc	r25, r25
    4a52:	82 0f       	add	r24, r18
    4a54:	93 1f       	adc	r25, r19
    4a56:	fc 01       	movw	r30, r24
    4a58:	e8 5a       	subi	r30, 0xA8	; 168
    4a5a:	fc 4f       	sbci	r31, 0xFC	; 252
    4a5c:	80 81       	ld	r24, Z
    4a5e:	83 30       	cpi	r24, 0x03	; 3
    4a60:	11 f1       	breq	.+68     	; 0x4aa6 <takediss2+0x2ba>
    4a62:	8b 81       	ldd	r24, Y+3	; 0x03
    4a64:	9c 81       	ldd	r25, Y+4	; 0x04
    4a66:	26 e0       	ldi	r18, 0x06	; 6
    4a68:	30 e0       	ldi	r19, 0x00	; 0
    4a6a:	b9 01       	movw	r22, r18
    4a6c:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4a70:	cb 01       	movw	r24, r22
    4a72:	fc 01       	movw	r30, r24
    4a74:	8b 81       	ldd	r24, Y+3	; 0x03
    4a76:	9c 81       	ldd	r25, Y+4	; 0x04
    4a78:	26 e0       	ldi	r18, 0x06	; 6
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	b9 01       	movw	r22, r18
    4a7e:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4a82:	9c 01       	movw	r18, r24
    4a84:	2f 5f       	subi	r18, 0xFF	; 255
    4a86:	3f 4f       	sbci	r19, 0xFF	; 255
    4a88:	cf 01       	movw	r24, r30
    4a8a:	88 0f       	add	r24, r24
    4a8c:	99 1f       	adc	r25, r25
    4a8e:	8e 0f       	add	r24, r30
    4a90:	9f 1f       	adc	r25, r31
    4a92:	88 0f       	add	r24, r24
    4a94:	99 1f       	adc	r25, r25
    4a96:	82 0f       	add	r24, r18
    4a98:	93 1f       	adc	r25, r19
    4a9a:	fc 01       	movw	r30, r24
    4a9c:	e8 5a       	subi	r30, 0xA8	; 168
    4a9e:	fc 4f       	sbci	r31, 0xFC	; 252
    4aa0:	80 81       	ld	r24, Z
    4aa2:	87 30       	cpi	r24, 0x07	; 7
    4aa4:	a9 f4       	brne	.+42     	; 0x4ad0 <takediss2+0x2e4>
	{
		//break at left
			count=0;
    4aa6:	10 92 0f 03 	sts	0x030F, r1
    4aaa:	10 92 0e 03 	sts	0x030E, r1

line(4);
    4aae:	84 e0       	ldi	r24, 0x04	; 4
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
fcount=11;
    4ab6:	8b e0       	ldi	r24, 0x0B	; 11
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	90 93 25 02 	sts	0x0225, r25
    4abe:	80 93 24 02 	sts	0x0224, r24
dir=3;
    4ac2:	83 e0       	ldi	r24, 0x03	; 3
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	90 93 0d 03 	sts	0x030D, r25
    4aca:	80 93 0c 03 	sts	0x030C, r24
    4ace:	97 c2       	rjmp	.+1326   	; 0x4ffe <takediss2+0x812>
	}
     else 
	{
		//turn left and break at right
		turnleft(tcount);
    4ad0:	80 e1       	ldi	r24, 0x10	; 16
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	0e 94 ef 20 	call	0x41de	; 0x41de <turnleft>
		 count=23;
    4ad8:	87 e1       	ldi	r24, 0x17	; 23
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	90 93 0f 03 	sts	0x030F, r25
    4ae0:	80 93 0e 03 	sts	0x030E, r24
		
line(3);
    4ae4:	83 e0       	ldi	r24, 0x03	; 3
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
fcount=8;
    4aec:	88 e0       	ldi	r24, 0x08	; 8
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	90 93 25 02 	sts	0x0225, r25
    4af4:	80 93 24 02 	sts	0x0224, r24
dir=0;
    4af8:	10 92 0d 03 	sts	0x030D, r1
    4afc:	10 92 0c 03 	sts	0x030C, r1
    4b00:	7e c2       	rjmp	.+1276   	; 0x4ffe <takediss2+0x812>
	}
   }
 
 else if(dir==3)
    4b02:	80 91 0c 03 	lds	r24, 0x030C
    4b06:	90 91 0d 03 	lds	r25, 0x030D
    4b0a:	83 30       	cpi	r24, 0x03	; 3
    4b0c:	91 05       	cpc	r25, r1
    4b0e:	09 f0       	breq	.+2      	; 0x4b12 <takediss2+0x326>
    4b10:	76 c2       	rjmp	.+1260   	; 0x4ffe <takediss2+0x812>
   {
     if((arr[curr/6][curr%6+1]==3)||(arr[curr/6][curr%6+1]==7))
    4b12:	8b 81       	ldd	r24, Y+3	; 0x03
    4b14:	9c 81       	ldd	r25, Y+4	; 0x04
    4b16:	26 e0       	ldi	r18, 0x06	; 6
    4b18:	30 e0       	ldi	r19, 0x00	; 0
    4b1a:	b9 01       	movw	r22, r18
    4b1c:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4b20:	cb 01       	movw	r24, r22
    4b22:	fc 01       	movw	r30, r24
    4b24:	8b 81       	ldd	r24, Y+3	; 0x03
    4b26:	9c 81       	ldd	r25, Y+4	; 0x04
    4b28:	26 e0       	ldi	r18, 0x06	; 6
    4b2a:	30 e0       	ldi	r19, 0x00	; 0
    4b2c:	b9 01       	movw	r22, r18
    4b2e:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4b32:	9c 01       	movw	r18, r24
    4b34:	2f 5f       	subi	r18, 0xFF	; 255
    4b36:	3f 4f       	sbci	r19, 0xFF	; 255
    4b38:	cf 01       	movw	r24, r30
    4b3a:	88 0f       	add	r24, r24
    4b3c:	99 1f       	adc	r25, r25
    4b3e:	8e 0f       	add	r24, r30
    4b40:	9f 1f       	adc	r25, r31
    4b42:	88 0f       	add	r24, r24
    4b44:	99 1f       	adc	r25, r25
    4b46:	82 0f       	add	r24, r18
    4b48:	93 1f       	adc	r25, r19
    4b4a:	fc 01       	movw	r30, r24
    4b4c:	e8 5a       	subi	r30, 0xA8	; 168
    4b4e:	fc 4f       	sbci	r31, 0xFC	; 252
    4b50:	80 81       	ld	r24, Z
    4b52:	83 30       	cpi	r24, 0x03	; 3
    4b54:	11 f1       	breq	.+68     	; 0x4b9a <takediss2+0x3ae>
    4b56:	8b 81       	ldd	r24, Y+3	; 0x03
    4b58:	9c 81       	ldd	r25, Y+4	; 0x04
    4b5a:	26 e0       	ldi	r18, 0x06	; 6
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	b9 01       	movw	r22, r18
    4b60:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4b64:	cb 01       	movw	r24, r22
    4b66:	fc 01       	movw	r30, r24
    4b68:	8b 81       	ldd	r24, Y+3	; 0x03
    4b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b6c:	26 e0       	ldi	r18, 0x06	; 6
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	b9 01       	movw	r22, r18
    4b72:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4b76:	9c 01       	movw	r18, r24
    4b78:	2f 5f       	subi	r18, 0xFF	; 255
    4b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b7c:	cf 01       	movw	r24, r30
    4b7e:	88 0f       	add	r24, r24
    4b80:	99 1f       	adc	r25, r25
    4b82:	8e 0f       	add	r24, r30
    4b84:	9f 1f       	adc	r25, r31
    4b86:	88 0f       	add	r24, r24
    4b88:	99 1f       	adc	r25, r25
    4b8a:	82 0f       	add	r24, r18
    4b8c:	93 1f       	adc	r25, r19
    4b8e:	fc 01       	movw	r30, r24
    4b90:	e8 5a       	subi	r30, 0xA8	; 168
    4b92:	fc 4f       	sbci	r31, 0xFC	; 252
    4b94:	80 81       	ld	r24, Z
    4b96:	87 30       	cpi	r24, 0x07	; 7
    4b98:	d9 f4       	brne	.+54     	; 0x4bd0 <takediss2+0x3e4>
	{
		//turn right break at left
		 turnright(tcount);
    4b9a:	80 e1       	ldi	r24, 0x10	; 16
    4b9c:	90 e0       	ldi	r25, 0x00	; 0
    4b9e:	0e 94 a4 23 	call	0x4748	; 0x4748 <turnright>
		 count=23;
    4ba2:	87 e1       	ldi	r24, 0x17	; 23
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	90 93 0f 03 	sts	0x030F, r25
    4baa:	80 93 0e 03 	sts	0x030E, r24
		 
line(4);
    4bae:	84 e0       	ldi	r24, 0x04	; 4
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
fcount=11;
    4bb6:	8b e0       	ldi	r24, 0x0B	; 11
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	90 93 25 02 	sts	0x0225, r25
    4bbe:	80 93 24 02 	sts	0x0224, r24
dir=3;
    4bc2:	83 e0       	ldi	r24, 0x03	; 3
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	90 93 0d 03 	sts	0x030D, r25
    4bca:	80 93 0c 03 	sts	0x030C, r24
    4bce:	17 c2       	rjmp	.+1070   	; 0x4ffe <takediss2+0x812>
	}
     else 
	{
		//break at right
		count=0;
    4bd0:	10 92 0f 03 	sts	0x030F, r1
    4bd4:	10 92 0e 03 	sts	0x030E, r1

line(3);
    4bd8:	83 e0       	ldi	r24, 0x03	; 3
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
fcount=8;
    4be0:	88 e0       	ldi	r24, 0x08	; 8
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	90 93 25 02 	sts	0x0225, r25
    4be8:	80 93 24 02 	sts	0x0224, r24
dir=0;
    4bec:	10 92 0d 03 	sts	0x030D, r1
    4bf0:	10 92 0c 03 	sts	0x030C, r1
    4bf4:	04 c2       	rjmp	.+1032   	; 0x4ffe <takediss2+0x812>
   }

 }


 else if((dest - curr)== -7)
    4bf6:	89 81       	ldd	r24, Y+1	; 0x01
    4bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    4bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    4bfe:	82 1b       	sub	r24, r18
    4c00:	93 0b       	sbc	r25, r19
    4c02:	2f ef       	ldi	r18, 0xFF	; 255
    4c04:	89 3f       	cpi	r24, 0xF9	; 249
    4c06:	92 07       	cpc	r25, r18
    4c08:	09 f0       	breq	.+2      	; 0x4c0c <takediss2+0x420>
    4c0a:	f8 c0       	rjmp	.+496    	; 0x4dfc <takediss2+0x610>
 {
  if(dir==2)
    4c0c:	80 91 0c 03 	lds	r24, 0x030C
    4c10:	90 91 0d 03 	lds	r25, 0x030D
    4c14:	82 30       	cpi	r24, 0x02	; 2
    4c16:	91 05       	cpc	r25, r1
    4c18:	09 f0       	breq	.+2      	; 0x4c1c <takediss2+0x430>
    4c1a:	74 c0       	rjmp	.+232    	; 0x4d04 <takediss2+0x518>
   {
     if((arr[curr/6][curr%6-1]==0)||(arr[curr/6][curr%6-1]==4))
    4c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    4c20:	26 e0       	ldi	r18, 0x06	; 6
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	b9 01       	movw	r22, r18
    4c26:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4c2a:	cb 01       	movw	r24, r22
    4c2c:	fc 01       	movw	r30, r24
    4c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c30:	9c 81       	ldd	r25, Y+4	; 0x04
    4c32:	26 e0       	ldi	r18, 0x06	; 6
    4c34:	30 e0       	ldi	r19, 0x00	; 0
    4c36:	b9 01       	movw	r22, r18
    4c38:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4c3c:	9c 01       	movw	r18, r24
    4c3e:	21 50       	subi	r18, 0x01	; 1
    4c40:	30 40       	sbci	r19, 0x00	; 0
    4c42:	cf 01       	movw	r24, r30
    4c44:	88 0f       	add	r24, r24
    4c46:	99 1f       	adc	r25, r25
    4c48:	8e 0f       	add	r24, r30
    4c4a:	9f 1f       	adc	r25, r31
    4c4c:	88 0f       	add	r24, r24
    4c4e:	99 1f       	adc	r25, r25
    4c50:	82 0f       	add	r24, r18
    4c52:	93 1f       	adc	r25, r19
    4c54:	fc 01       	movw	r30, r24
    4c56:	e8 5a       	subi	r30, 0xA8	; 168
    4c58:	fc 4f       	sbci	r31, 0xFC	; 252
    4c5a:	80 81       	ld	r24, Z
    4c5c:	88 23       	and	r24, r24
    4c5e:	11 f1       	breq	.+68     	; 0x4ca4 <takediss2+0x4b8>
    4c60:	8b 81       	ldd	r24, Y+3	; 0x03
    4c62:	9c 81       	ldd	r25, Y+4	; 0x04
    4c64:	26 e0       	ldi	r18, 0x06	; 6
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	b9 01       	movw	r22, r18
    4c6a:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4c6e:	cb 01       	movw	r24, r22
    4c70:	fc 01       	movw	r30, r24
    4c72:	8b 81       	ldd	r24, Y+3	; 0x03
    4c74:	9c 81       	ldd	r25, Y+4	; 0x04
    4c76:	26 e0       	ldi	r18, 0x06	; 6
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	b9 01       	movw	r22, r18
    4c7c:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4c80:	9c 01       	movw	r18, r24
    4c82:	21 50       	subi	r18, 0x01	; 1
    4c84:	30 40       	sbci	r19, 0x00	; 0
    4c86:	cf 01       	movw	r24, r30
    4c88:	88 0f       	add	r24, r24
    4c8a:	99 1f       	adc	r25, r25
    4c8c:	8e 0f       	add	r24, r30
    4c8e:	9f 1f       	adc	r25, r31
    4c90:	88 0f       	add	r24, r24
    4c92:	99 1f       	adc	r25, r25
    4c94:	82 0f       	add	r24, r18
    4c96:	93 1f       	adc	r25, r19
    4c98:	fc 01       	movw	r30, r24
    4c9a:	e8 5a       	subi	r30, 0xA8	; 168
    4c9c:	fc 4f       	sbci	r31, 0xFC	; 252
    4c9e:	80 81       	ld	r24, Z
    4ca0:	84 30       	cpi	r24, 0x04	; 4
    4ca2:	a9 f4       	brne	.+42     	; 0x4cce <takediss2+0x4e2>
	{
		//break at right
		count=0;
    4ca4:	10 92 0f 03 	sts	0x030F, r1
    4ca8:	10 92 0e 03 	sts	0x030E, r1

line(3);
    4cac:	83 e0       	ldi	r24, 0x03	; 3
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
fcount=8;
    4cb4:	88 e0       	ldi	r24, 0x08	; 8
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	90 93 25 02 	sts	0x0225, r25
    4cbc:	80 93 24 02 	sts	0x0224, r24
dir=3;
    4cc0:	83 e0       	ldi	r24, 0x03	; 3
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	90 93 0d 03 	sts	0x030D, r25
    4cc8:	80 93 0c 03 	sts	0x030C, r24
    4ccc:	98 c1       	rjmp	.+816    	; 0x4ffe <takediss2+0x812>
	}
     else 
	{
		//turn right and break at left
		 turnright(tcount);
    4cce:	80 e1       	ldi	r24, 0x10	; 16
    4cd0:	90 e0       	ldi	r25, 0x00	; 0
    4cd2:	0e 94 a4 23 	call	0x4748	; 0x4748 <turnright>
		 count=23;
    4cd6:	87 e1       	ldi	r24, 0x17	; 23
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	90 93 0f 03 	sts	0x030F, r25
    4cde:	80 93 0e 03 	sts	0x030E, r24
		
line(4);
    4ce2:	84 e0       	ldi	r24, 0x04	; 4
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
fcount=11;
    4cea:	8b e0       	ldi	r24, 0x0B	; 11
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	90 93 25 02 	sts	0x0225, r25
    4cf2:	80 93 24 02 	sts	0x0224, r24
dir=2;
    4cf6:	82 e0       	ldi	r24, 0x02	; 2
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	90 93 0d 03 	sts	0x030D, r25
    4cfe:	80 93 0c 03 	sts	0x030C, r24
    4d02:	7d c1       	rjmp	.+762    	; 0x4ffe <takediss2+0x812>
	}
   }
 
 else if(dir==3)
    4d04:	80 91 0c 03 	lds	r24, 0x030C
    4d08:	90 91 0d 03 	lds	r25, 0x030D
    4d0c:	83 30       	cpi	r24, 0x03	; 3
    4d0e:	91 05       	cpc	r25, r1
    4d10:	09 f0       	breq	.+2      	; 0x4d14 <takediss2+0x528>
    4d12:	75 c1       	rjmp	.+746    	; 0x4ffe <takediss2+0x812>
   {
     if((arr[curr/6][curr%6-1]==0)||(arr[curr/6][curr%6-1]==4))
    4d14:	8b 81       	ldd	r24, Y+3	; 0x03
    4d16:	9c 81       	ldd	r25, Y+4	; 0x04
    4d18:	26 e0       	ldi	r18, 0x06	; 6
    4d1a:	30 e0       	ldi	r19, 0x00	; 0
    4d1c:	b9 01       	movw	r22, r18
    4d1e:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4d22:	cb 01       	movw	r24, r22
    4d24:	fc 01       	movw	r30, r24
    4d26:	8b 81       	ldd	r24, Y+3	; 0x03
    4d28:	9c 81       	ldd	r25, Y+4	; 0x04
    4d2a:	26 e0       	ldi	r18, 0x06	; 6
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	b9 01       	movw	r22, r18
    4d30:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4d34:	9c 01       	movw	r18, r24
    4d36:	21 50       	subi	r18, 0x01	; 1
    4d38:	30 40       	sbci	r19, 0x00	; 0
    4d3a:	cf 01       	movw	r24, r30
    4d3c:	88 0f       	add	r24, r24
    4d3e:	99 1f       	adc	r25, r25
    4d40:	8e 0f       	add	r24, r30
    4d42:	9f 1f       	adc	r25, r31
    4d44:	88 0f       	add	r24, r24
    4d46:	99 1f       	adc	r25, r25
    4d48:	82 0f       	add	r24, r18
    4d4a:	93 1f       	adc	r25, r19
    4d4c:	fc 01       	movw	r30, r24
    4d4e:	e8 5a       	subi	r30, 0xA8	; 168
    4d50:	fc 4f       	sbci	r31, 0xFC	; 252
    4d52:	80 81       	ld	r24, Z
    4d54:	88 23       	and	r24, r24
    4d56:	11 f1       	breq	.+68     	; 0x4d9c <takediss2+0x5b0>
    4d58:	8b 81       	ldd	r24, Y+3	; 0x03
    4d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d5c:	26 e0       	ldi	r18, 0x06	; 6
    4d5e:	30 e0       	ldi	r19, 0x00	; 0
    4d60:	b9 01       	movw	r22, r18
    4d62:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4d66:	cb 01       	movw	r24, r22
    4d68:	fc 01       	movw	r30, r24
    4d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d6e:	26 e0       	ldi	r18, 0x06	; 6
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	b9 01       	movw	r22, r18
    4d74:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4d78:	9c 01       	movw	r18, r24
    4d7a:	21 50       	subi	r18, 0x01	; 1
    4d7c:	30 40       	sbci	r19, 0x00	; 0
    4d7e:	cf 01       	movw	r24, r30
    4d80:	88 0f       	add	r24, r24
    4d82:	99 1f       	adc	r25, r25
    4d84:	8e 0f       	add	r24, r30
    4d86:	9f 1f       	adc	r25, r31
    4d88:	88 0f       	add	r24, r24
    4d8a:	99 1f       	adc	r25, r25
    4d8c:	82 0f       	add	r24, r18
    4d8e:	93 1f       	adc	r25, r19
    4d90:	fc 01       	movw	r30, r24
    4d92:	e8 5a       	subi	r30, 0xA8	; 168
    4d94:	fc 4f       	sbci	r31, 0xFC	; 252
    4d96:	80 81       	ld	r24, Z
    4d98:	84 30       	cpi	r24, 0x04	; 4
    4d9a:	d9 f4       	brne	.+54     	; 0x4dd2 <takediss2+0x5e6>
	{
		//turn left and break at right
		turnleft(tcount);
    4d9c:	80 e1       	ldi	r24, 0x10	; 16
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	0e 94 ef 20 	call	0x41de	; 0x41de <turnleft>
		 count=23;
    4da4:	87 e1       	ldi	r24, 0x17	; 23
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	90 93 0f 03 	sts	0x030F, r25
    4dac:	80 93 0e 03 	sts	0x030E, r24
		
line(3);
    4db0:	83 e0       	ldi	r24, 0x03	; 3
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
fcount=8;
    4db8:	88 e0       	ldi	r24, 0x08	; 8
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	90 93 25 02 	sts	0x0225, r25
    4dc0:	80 93 24 02 	sts	0x0224, r24
dir=3;
    4dc4:	83 e0       	ldi	r24, 0x03	; 3
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	90 93 0d 03 	sts	0x030D, r25
    4dcc:	80 93 0c 03 	sts	0x030C, r24
    4dd0:	16 c1       	rjmp	.+556    	; 0x4ffe <takediss2+0x812>
	}
     else 
	{
		//break at left
			count=0;
    4dd2:	10 92 0f 03 	sts	0x030F, r1
    4dd6:	10 92 0e 03 	sts	0x030E, r1

line(4);
    4dda:	84 e0       	ldi	r24, 0x04	; 4
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
fcount=11;
    4de2:	8b e0       	ldi	r24, 0x0B	; 11
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	90 93 25 02 	sts	0x0225, r25
    4dea:	80 93 24 02 	sts	0x0224, r24
dir=2;
    4dee:	82 e0       	ldi	r24, 0x02	; 2
    4df0:	90 e0       	ldi	r25, 0x00	; 0
    4df2:	90 93 0d 03 	sts	0x030D, r25
    4df6:	80 93 0c 03 	sts	0x030C, r24
    4dfa:	01 c1       	rjmp	.+514    	; 0x4ffe <takediss2+0x812>
   }

 }


 else if((dest - curr)== 5)
    4dfc:	89 81       	ldd	r24, Y+1	; 0x01
    4dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    4e00:	2b 81       	ldd	r18, Y+3	; 0x03
    4e02:	3c 81       	ldd	r19, Y+4	; 0x04
    4e04:	82 1b       	sub	r24, r18
    4e06:	93 0b       	sbc	r25, r19
    4e08:	85 30       	cpi	r24, 0x05	; 5
    4e0a:	91 05       	cpc	r25, r1
    4e0c:	09 f0       	breq	.+2      	; 0x4e10 <takediss2+0x624>
    4e0e:	f7 c0       	rjmp	.+494    	; 0x4ffe <takediss2+0x812>
 {
  if(dir==2)
    4e10:	80 91 0c 03 	lds	r24, 0x030C
    4e14:	90 91 0d 03 	lds	r25, 0x030D
    4e18:	82 30       	cpi	r24, 0x02	; 2
    4e1a:	91 05       	cpc	r25, r1
    4e1c:	09 f0       	breq	.+2      	; 0x4e20 <takediss2+0x634>
    4e1e:	74 c0       	rjmp	.+232    	; 0x4f08 <takediss2+0x71c>
   {
     if((arr[curr/6][curr%6-1]==1)||(arr[curr/6][curr%6-1]==5))
    4e20:	8b 81       	ldd	r24, Y+3	; 0x03
    4e22:	9c 81       	ldd	r25, Y+4	; 0x04
    4e24:	26 e0       	ldi	r18, 0x06	; 6
    4e26:	30 e0       	ldi	r19, 0x00	; 0
    4e28:	b9 01       	movw	r22, r18
    4e2a:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4e2e:	cb 01       	movw	r24, r22
    4e30:	fc 01       	movw	r30, r24
    4e32:	8b 81       	ldd	r24, Y+3	; 0x03
    4e34:	9c 81       	ldd	r25, Y+4	; 0x04
    4e36:	26 e0       	ldi	r18, 0x06	; 6
    4e38:	30 e0       	ldi	r19, 0x00	; 0
    4e3a:	b9 01       	movw	r22, r18
    4e3c:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4e40:	9c 01       	movw	r18, r24
    4e42:	21 50       	subi	r18, 0x01	; 1
    4e44:	30 40       	sbci	r19, 0x00	; 0
    4e46:	cf 01       	movw	r24, r30
    4e48:	88 0f       	add	r24, r24
    4e4a:	99 1f       	adc	r25, r25
    4e4c:	8e 0f       	add	r24, r30
    4e4e:	9f 1f       	adc	r25, r31
    4e50:	88 0f       	add	r24, r24
    4e52:	99 1f       	adc	r25, r25
    4e54:	82 0f       	add	r24, r18
    4e56:	93 1f       	adc	r25, r19
    4e58:	fc 01       	movw	r30, r24
    4e5a:	e8 5a       	subi	r30, 0xA8	; 168
    4e5c:	fc 4f       	sbci	r31, 0xFC	; 252
    4e5e:	80 81       	ld	r24, Z
    4e60:	81 30       	cpi	r24, 0x01	; 1
    4e62:	11 f1       	breq	.+68     	; 0x4ea8 <takediss2+0x6bc>
    4e64:	8b 81       	ldd	r24, Y+3	; 0x03
    4e66:	9c 81       	ldd	r25, Y+4	; 0x04
    4e68:	26 e0       	ldi	r18, 0x06	; 6
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	b9 01       	movw	r22, r18
    4e6e:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4e72:	cb 01       	movw	r24, r22
    4e74:	fc 01       	movw	r30, r24
    4e76:	8b 81       	ldd	r24, Y+3	; 0x03
    4e78:	9c 81       	ldd	r25, Y+4	; 0x04
    4e7a:	26 e0       	ldi	r18, 0x06	; 6
    4e7c:	30 e0       	ldi	r19, 0x00	; 0
    4e7e:	b9 01       	movw	r22, r18
    4e80:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4e84:	9c 01       	movw	r18, r24
    4e86:	21 50       	subi	r18, 0x01	; 1
    4e88:	30 40       	sbci	r19, 0x00	; 0
    4e8a:	cf 01       	movw	r24, r30
    4e8c:	88 0f       	add	r24, r24
    4e8e:	99 1f       	adc	r25, r25
    4e90:	8e 0f       	add	r24, r30
    4e92:	9f 1f       	adc	r25, r31
    4e94:	88 0f       	add	r24, r24
    4e96:	99 1f       	adc	r25, r25
    4e98:	82 0f       	add	r24, r18
    4e9a:	93 1f       	adc	r25, r19
    4e9c:	fc 01       	movw	r30, r24
    4e9e:	e8 5a       	subi	r30, 0xA8	; 168
    4ea0:	fc 4f       	sbci	r31, 0xFC	; 252
    4ea2:	80 81       	ld	r24, Z
    4ea4:	85 30       	cpi	r24, 0x05	; 5
    4ea6:	a9 f4       	brne	.+42     	; 0x4ed2 <takediss2+0x6e6>
	{
		//break at left
			count=0;
    4ea8:	10 92 0f 03 	sts	0x030F, r1
    4eac:	10 92 0e 03 	sts	0x030E, r1

line(4);
    4eb0:	84 e0       	ldi	r24, 0x04	; 4
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
fcount=11;
    4eb8:	8b e0       	ldi	r24, 0x0B	; 11
    4eba:	90 e0       	ldi	r25, 0x00	; 0
    4ebc:	90 93 25 02 	sts	0x0225, r25
    4ec0:	80 93 24 02 	sts	0x0224, r24
dir=1;
    4ec4:	81 e0       	ldi	r24, 0x01	; 1
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	90 93 0d 03 	sts	0x030D, r25
    4ecc:	80 93 0c 03 	sts	0x030C, r24
    4ed0:	96 c0       	rjmp	.+300    	; 0x4ffe <takediss2+0x812>
	}
     else 
	{
		//turn left and break at right
		turnleft(tcount);
    4ed2:	80 e1       	ldi	r24, 0x10	; 16
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	0e 94 ef 20 	call	0x41de	; 0x41de <turnleft>
		 count=23;
    4eda:	87 e1       	ldi	r24, 0x17	; 23
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	90 93 0f 03 	sts	0x030F, r25
    4ee2:	80 93 0e 03 	sts	0x030E, r24
		
line(3);
    4ee6:	83 e0       	ldi	r24, 0x03	; 3
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
fcount=8;
    4eee:	88 e0       	ldi	r24, 0x08	; 8
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	90 93 25 02 	sts	0x0225, r25
    4ef6:	80 93 24 02 	sts	0x0224, r24
dir=2;
    4efa:	82 e0       	ldi	r24, 0x02	; 2
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	90 93 0d 03 	sts	0x030D, r25
    4f02:	80 93 0c 03 	sts	0x030C, r24
    4f06:	7b c0       	rjmp	.+246    	; 0x4ffe <takediss2+0x812>
	}
   }
 
 else if(dir==1)
    4f08:	80 91 0c 03 	lds	r24, 0x030C
    4f0c:	90 91 0d 03 	lds	r25, 0x030D
    4f10:	81 30       	cpi	r24, 0x01	; 1
    4f12:	91 05       	cpc	r25, r1
    4f14:	09 f0       	breq	.+2      	; 0x4f18 <takediss2+0x72c>
    4f16:	73 c0       	rjmp	.+230    	; 0x4ffe <takediss2+0x812>
   {
     if((arr[curr/6][curr%6-1]==1)||(arr[curr/6][curr%6-1]==5))
    4f18:	8b 81       	ldd	r24, Y+3	; 0x03
    4f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f1c:	26 e0       	ldi	r18, 0x06	; 6
    4f1e:	30 e0       	ldi	r19, 0x00	; 0
    4f20:	b9 01       	movw	r22, r18
    4f22:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4f26:	cb 01       	movw	r24, r22
    4f28:	fc 01       	movw	r30, r24
    4f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f2e:	26 e0       	ldi	r18, 0x06	; 6
    4f30:	30 e0       	ldi	r19, 0x00	; 0
    4f32:	b9 01       	movw	r22, r18
    4f34:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4f38:	9c 01       	movw	r18, r24
    4f3a:	21 50       	subi	r18, 0x01	; 1
    4f3c:	30 40       	sbci	r19, 0x00	; 0
    4f3e:	cf 01       	movw	r24, r30
    4f40:	88 0f       	add	r24, r24
    4f42:	99 1f       	adc	r25, r25
    4f44:	8e 0f       	add	r24, r30
    4f46:	9f 1f       	adc	r25, r31
    4f48:	88 0f       	add	r24, r24
    4f4a:	99 1f       	adc	r25, r25
    4f4c:	82 0f       	add	r24, r18
    4f4e:	93 1f       	adc	r25, r19
    4f50:	fc 01       	movw	r30, r24
    4f52:	e8 5a       	subi	r30, 0xA8	; 168
    4f54:	fc 4f       	sbci	r31, 0xFC	; 252
    4f56:	80 81       	ld	r24, Z
    4f58:	81 30       	cpi	r24, 0x01	; 1
    4f5a:	11 f1       	breq	.+68     	; 0x4fa0 <takediss2+0x7b4>
    4f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f60:	26 e0       	ldi	r18, 0x06	; 6
    4f62:	30 e0       	ldi	r19, 0x00	; 0
    4f64:	b9 01       	movw	r22, r18
    4f66:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4f6a:	cb 01       	movw	r24, r22
    4f6c:	fc 01       	movw	r30, r24
    4f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f70:	9c 81       	ldd	r25, Y+4	; 0x04
    4f72:	26 e0       	ldi	r18, 0x06	; 6
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	b9 01       	movw	r22, r18
    4f78:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    4f7c:	9c 01       	movw	r18, r24
    4f7e:	21 50       	subi	r18, 0x01	; 1
    4f80:	30 40       	sbci	r19, 0x00	; 0
    4f82:	cf 01       	movw	r24, r30
    4f84:	88 0f       	add	r24, r24
    4f86:	99 1f       	adc	r25, r25
    4f88:	8e 0f       	add	r24, r30
    4f8a:	9f 1f       	adc	r25, r31
    4f8c:	88 0f       	add	r24, r24
    4f8e:	99 1f       	adc	r25, r25
    4f90:	82 0f       	add	r24, r18
    4f92:	93 1f       	adc	r25, r19
    4f94:	fc 01       	movw	r30, r24
    4f96:	e8 5a       	subi	r30, 0xA8	; 168
    4f98:	fc 4f       	sbci	r31, 0xFC	; 252
    4f9a:	80 81       	ld	r24, Z
    4f9c:	85 30       	cpi	r24, 0x05	; 5
    4f9e:	d9 f4       	brne	.+54     	; 0x4fd6 <takediss2+0x7ea>
	{
		//turn right and break at left
		 turnright(tcount);
    4fa0:	80 e1       	ldi	r24, 0x10	; 16
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	0e 94 a4 23 	call	0x4748	; 0x4748 <turnright>
		 count=23;
    4fa8:	87 e1       	ldi	r24, 0x17	; 23
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	90 93 0f 03 	sts	0x030F, r25
    4fb0:	80 93 0e 03 	sts	0x030E, r24
		 
line(4);
    4fb4:	84 e0       	ldi	r24, 0x04	; 4
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
fcount=11;
    4fbc:	8b e0       	ldi	r24, 0x0B	; 11
    4fbe:	90 e0       	ldi	r25, 0x00	; 0
    4fc0:	90 93 25 02 	sts	0x0225, r25
    4fc4:	80 93 24 02 	sts	0x0224, r24
dir=1;
    4fc8:	81 e0       	ldi	r24, 0x01	; 1
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	90 93 0d 03 	sts	0x030D, r25
    4fd0:	80 93 0c 03 	sts	0x030C, r24
    4fd4:	14 c0       	rjmp	.+40     	; 0x4ffe <takediss2+0x812>
	}
     else 
	{
		//break at right
		count=0;
    4fd6:	10 92 0f 03 	sts	0x030F, r1
    4fda:	10 92 0e 03 	sts	0x030E, r1

line(3);
    4fde:	83 e0       	ldi	r24, 0x03	; 3
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
fcount=8;
    4fe6:	88 e0       	ldi	r24, 0x08	; 8
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	90 93 25 02 	sts	0x0225, r25
    4fee:	80 93 24 02 	sts	0x0224, r24
dir=2;
    4ff2:	82 e0       	ldi	r24, 0x02	; 2
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	90 93 0d 03 	sts	0x030D, r25
    4ffa:	80 93 0c 03 	sts	0x030C, r24

 }



}
    4ffe:	0f 90       	pop	r0
    5000:	0f 90       	pop	r0
    5002:	0f 90       	pop	r0
    5004:	0f 90       	pop	r0
    5006:	cf 91       	pop	r28
    5008:	df 91       	pop	r29
    500a:	08 95       	ret

0000500c <takediss>:

int takediss(int final,int current)
{
    500c:	df 93       	push	r29
    500e:	cf 93       	push	r28
    5010:	00 d0       	rcall	.+0      	; 0x5012 <takediss+0x6>
    5012:	00 d0       	rcall	.+0      	; 0x5014 <takediss+0x8>
    5014:	00 d0       	rcall	.+0      	; 0x5016 <takediss+0xa>
    5016:	cd b7       	in	r28, 0x3d	; 61
    5018:	de b7       	in	r29, 0x3e	; 62
    501a:	9a 83       	std	Y+2, r25	; 0x02
    501c:	89 83       	std	Y+1, r24	; 0x01
    501e:	7c 83       	std	Y+4, r23	; 0x04
    5020:	6b 83       	std	Y+3, r22	; 0x03
 if( final - current == 1 )  
    5022:	89 81       	ldd	r24, Y+1	; 0x01
    5024:	9a 81       	ldd	r25, Y+2	; 0x02
    5026:	2b 81       	ldd	r18, Y+3	; 0x03
    5028:	3c 81       	ldd	r19, Y+4	; 0x04
    502a:	82 1b       	sub	r24, r18
    502c:	93 0b       	sbc	r25, r19
    502e:	81 30       	cpi	r24, 0x01	; 1
    5030:	91 05       	cpc	r25, r1
    5032:	09 f0       	breq	.+2      	; 0x5036 <takediss+0x2a>
    5034:	4d c0       	rjmp	.+154    	; 0x50d0 <takediss+0xc4>
           {  if(dir==1)
    5036:	80 91 0c 03 	lds	r24, 0x030C
    503a:	90 91 0d 03 	lds	r25, 0x030D
    503e:	81 30       	cpi	r24, 0x01	; 1
    5040:	91 05       	cpc	r25, r1
    5042:	51 f4       	brne	.+20     	; 0x5058 <takediss+0x4c>
		       {  turnleft(tcount); count=23; }
    5044:	80 e1       	ldi	r24, 0x10	; 16
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	0e 94 ef 20 	call	0x41de	; 0x41de <turnleft>
    504c:	87 e1       	ldi	r24, 0x17	; 23
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	90 93 0f 03 	sts	0x030F, r25
    5054:	80 93 0e 03 	sts	0x030E, r24
			   if(dir==0)
    5058:	80 91 0c 03 	lds	r24, 0x030C
    505c:	90 91 0d 03 	lds	r25, 0x030D
    5060:	00 97       	sbiw	r24, 0x00	; 0
    5062:	21 f4       	brne	.+8      	; 0x506c <takediss+0x60>
			      count=0;
    5064:	10 92 0f 03 	sts	0x030F, r1
    5068:	10 92 0e 03 	sts	0x030E, r1
              if(dir==2)
    506c:	80 91 0c 03 	lds	r24, 0x030C
    5070:	90 91 0d 03 	lds	r25, 0x030D
    5074:	82 30       	cpi	r24, 0x02	; 2
    5076:	91 05       	cpc	r25, r1
    5078:	61 f4       	brne	.+24     	; 0x5092 <takediss+0x86>
			  { turnback(tcount*2 - 2,2); count=23;}
    507a:	8e e1       	ldi	r24, 0x1E	; 30
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	62 e0       	ldi	r22, 0x02	; 2
    5080:	70 e0       	ldi	r23, 0x00	; 0
    5082:	0e 94 41 21 	call	0x4282	; 0x4282 <turnback>
    5086:	87 e1       	ldi	r24, 0x17	; 23
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	90 93 0f 03 	sts	0x030F, r25
    508e:	80 93 0e 03 	sts	0x030E, r24
			  if(dir==3)
    5092:	80 91 0c 03 	lds	r24, 0x030C
    5096:	90 91 0d 03 	lds	r25, 0x030D
    509a:	83 30       	cpi	r24, 0x03	; 3
    509c:	91 05       	cpc	r25, r1
    509e:	51 f4       	brne	.+20     	; 0x50b4 <takediss+0xa8>
			  { turnright(tcount); count=23;}
    50a0:	80 e1       	ldi	r24, 0x10	; 16
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	0e 94 a4 23 	call	0x4748	; 0x4748 <turnright>
    50a8:	87 e1       	ldi	r24, 0x17	; 23
    50aa:	90 e0       	ldi	r25, 0x00	; 0
    50ac:	90 93 0f 03 	sts	0x030F, r25
    50b0:	80 93 0e 03 	sts	0x030E, r24
			  dir= 0;
    50b4:	10 92 0d 03 	sts	0x030D, r1
    50b8:	10 92 0c 03 	sts	0x030C, r1
			   line(1);
    50bc:	81 e0       	ldi	r24, 0x01	; 1
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
			   fcount=8;
    50c4:	88 e0       	ldi	r24, 0x08	; 8
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	90 93 25 02 	sts	0x0225, r25
    50cc:	80 93 24 02 	sts	0x0224, r24
		   }
		   if( final - current == -1 )  
    50d0:	89 81       	ldd	r24, Y+1	; 0x01
    50d2:	9a 81       	ldd	r25, Y+2	; 0x02
    50d4:	2b 81       	ldd	r18, Y+3	; 0x03
    50d6:	3c 81       	ldd	r19, Y+4	; 0x04
    50d8:	82 1b       	sub	r24, r18
    50da:	93 0b       	sbc	r25, r19
    50dc:	2f ef       	ldi	r18, 0xFF	; 255
    50de:	8f 3f       	cpi	r24, 0xFF	; 255
    50e0:	92 07       	cpc	r25, r18
    50e2:	09 f0       	breq	.+2      	; 0x50e6 <takediss+0xda>
    50e4:	4f c0       	rjmp	.+158    	; 0x5184 <takediss+0x178>
           {  if(dir==1)
    50e6:	80 91 0c 03 	lds	r24, 0x030C
    50ea:	90 91 0d 03 	lds	r25, 0x030D
    50ee:	81 30       	cpi	r24, 0x01	; 1
    50f0:	91 05       	cpc	r25, r1
    50f2:	51 f4       	brne	.+20     	; 0x5108 <takediss+0xfc>
		       {  turnright(tcount); count=23; }
    50f4:	80 e1       	ldi	r24, 0x10	; 16
    50f6:	90 e0       	ldi	r25, 0x00	; 0
    50f8:	0e 94 a4 23 	call	0x4748	; 0x4748 <turnright>
    50fc:	87 e1       	ldi	r24, 0x17	; 23
    50fe:	90 e0       	ldi	r25, 0x00	; 0
    5100:	90 93 0f 03 	sts	0x030F, r25
    5104:	80 93 0e 03 	sts	0x030E, r24
			   if(dir==0)
    5108:	80 91 0c 03 	lds	r24, 0x030C
    510c:	90 91 0d 03 	lds	r25, 0x030D
    5110:	00 97       	sbiw	r24, 0x00	; 0
    5112:	61 f4       	brne	.+24     	; 0x512c <takediss+0x120>
			      {  turnback(tcount*2 - 2,2); count=23; }
    5114:	8e e1       	ldi	r24, 0x1E	; 30
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	62 e0       	ldi	r22, 0x02	; 2
    511a:	70 e0       	ldi	r23, 0x00	; 0
    511c:	0e 94 41 21 	call	0x4282	; 0x4282 <turnback>
    5120:	87 e1       	ldi	r24, 0x17	; 23
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	90 93 0f 03 	sts	0x030F, r25
    5128:	80 93 0e 03 	sts	0x030E, r24
              if(dir==2)
    512c:	80 91 0c 03 	lds	r24, 0x030C
    5130:	90 91 0d 03 	lds	r25, 0x030D
    5134:	82 30       	cpi	r24, 0x02	; 2
    5136:	91 05       	cpc	r25, r1
    5138:	21 f4       	brne	.+8      	; 0x5142 <takediss+0x136>
			  { count=0;}
    513a:	10 92 0f 03 	sts	0x030F, r1
    513e:	10 92 0e 03 	sts	0x030E, r1
			  if(dir==3)
    5142:	80 91 0c 03 	lds	r24, 0x030C
    5146:	90 91 0d 03 	lds	r25, 0x030D
    514a:	83 30       	cpi	r24, 0x03	; 3
    514c:	91 05       	cpc	r25, r1
    514e:	51 f4       	brne	.+20     	; 0x5164 <takediss+0x158>
			  { turnleft(tcount); count=23;}
    5150:	80 e1       	ldi	r24, 0x10	; 16
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	0e 94 ef 20 	call	0x41de	; 0x41de <turnleft>
    5158:	87 e1       	ldi	r24, 0x17	; 23
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	90 93 0f 03 	sts	0x030F, r25
    5160:	80 93 0e 03 	sts	0x030E, r24
			    dir= 2;
    5164:	82 e0       	ldi	r24, 0x02	; 2
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	90 93 0d 03 	sts	0x030D, r25
    516c:	80 93 0c 03 	sts	0x030C, r24
				 line(1);
    5170:	81 e0       	ldi	r24, 0x01	; 1
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
				 fcount=8;
    5178:	88 e0       	ldi	r24, 0x08	; 8
    517a:	90 e0       	ldi	r25, 0x00	; 0
    517c:	90 93 25 02 	sts	0x0225, r25
    5180:	80 93 24 02 	sts	0x0224, r24
		   }
		    if( final - current == 6 )  
    5184:	89 81       	ldd	r24, Y+1	; 0x01
    5186:	9a 81       	ldd	r25, Y+2	; 0x02
    5188:	2b 81       	ldd	r18, Y+3	; 0x03
    518a:	3c 81       	ldd	r19, Y+4	; 0x04
    518c:	82 1b       	sub	r24, r18
    518e:	93 0b       	sbc	r25, r19
    5190:	86 30       	cpi	r24, 0x06	; 6
    5192:	91 05       	cpc	r25, r1
    5194:	09 f0       	breq	.+2      	; 0x5198 <takediss+0x18c>
    5196:	4f c0       	rjmp	.+158    	; 0x5236 <takediss+0x22a>
           {  if(dir==1)
    5198:	80 91 0c 03 	lds	r24, 0x030C
    519c:	90 91 0d 03 	lds	r25, 0x030D
    51a0:	81 30       	cpi	r24, 0x01	; 1
    51a2:	91 05       	cpc	r25, r1
    51a4:	21 f4       	brne	.+8      	; 0x51ae <takediss+0x1a2>
		       {  count=0; }
    51a6:	10 92 0f 03 	sts	0x030F, r1
    51aa:	10 92 0e 03 	sts	0x030E, r1
			   if(dir==0)
    51ae:	80 91 0c 03 	lds	r24, 0x030C
    51b2:	90 91 0d 03 	lds	r25, 0x030D
    51b6:	00 97       	sbiw	r24, 0x00	; 0
    51b8:	51 f4       	brne	.+20     	; 0x51ce <takediss+0x1c2>
			      { turnright(tcount); count=23; }
    51ba:	80 e1       	ldi	r24, 0x10	; 16
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	0e 94 a4 23 	call	0x4748	; 0x4748 <turnright>
    51c2:	87 e1       	ldi	r24, 0x17	; 23
    51c4:	90 e0       	ldi	r25, 0x00	; 0
    51c6:	90 93 0f 03 	sts	0x030F, r25
    51ca:	80 93 0e 03 	sts	0x030E, r24
              if(dir==2)
    51ce:	80 91 0c 03 	lds	r24, 0x030C
    51d2:	90 91 0d 03 	lds	r25, 0x030D
    51d6:	82 30       	cpi	r24, 0x02	; 2
    51d8:	91 05       	cpc	r25, r1
    51da:	51 f4       	brne	.+20     	; 0x51f0 <takediss+0x1e4>
			  { turnleft(tcount); count=23;}
    51dc:	80 e1       	ldi	r24, 0x10	; 16
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	0e 94 ef 20 	call	0x41de	; 0x41de <turnleft>
    51e4:	87 e1       	ldi	r24, 0x17	; 23
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	90 93 0f 03 	sts	0x030F, r25
    51ec:	80 93 0e 03 	sts	0x030E, r24
			  if(dir==3)
    51f0:	80 91 0c 03 	lds	r24, 0x030C
    51f4:	90 91 0d 03 	lds	r25, 0x030D
    51f8:	83 30       	cpi	r24, 0x03	; 3
    51fa:	91 05       	cpc	r25, r1
    51fc:	61 f4       	brne	.+24     	; 0x5216 <takediss+0x20a>
			  {  turnback(tcount*2 - 2,2); count=23; }
    51fe:	8e e1       	ldi	r24, 0x1E	; 30
    5200:	90 e0       	ldi	r25, 0x00	; 0
    5202:	62 e0       	ldi	r22, 0x02	; 2
    5204:	70 e0       	ldi	r23, 0x00	; 0
    5206:	0e 94 41 21 	call	0x4282	; 0x4282 <turnback>
    520a:	87 e1       	ldi	r24, 0x17	; 23
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	90 93 0f 03 	sts	0x030F, r25
    5212:	80 93 0e 03 	sts	0x030E, r24
			 
			    dir= 1;
    5216:	81 e0       	ldi	r24, 0x01	; 1
    5218:	90 e0       	ldi	r25, 0x00	; 0
    521a:	90 93 0d 03 	sts	0x030D, r25
    521e:	80 93 0c 03 	sts	0x030C, r24
				 line(1);
    5222:	81 e0       	ldi	r24, 0x01	; 1
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
				 fcount=8;
    522a:	88 e0       	ldi	r24, 0x08	; 8
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	90 93 25 02 	sts	0x0225, r25
    5232:	80 93 24 02 	sts	0x0224, r24
			  
		   }

            if( final - current == -6 )  
    5236:	89 81       	ldd	r24, Y+1	; 0x01
    5238:	9a 81       	ldd	r25, Y+2	; 0x02
    523a:	2b 81       	ldd	r18, Y+3	; 0x03
    523c:	3c 81       	ldd	r19, Y+4	; 0x04
    523e:	82 1b       	sub	r24, r18
    5240:	93 0b       	sbc	r25, r19
    5242:	2f ef       	ldi	r18, 0xFF	; 255
    5244:	8a 3f       	cpi	r24, 0xFA	; 250
    5246:	92 07       	cpc	r25, r18
    5248:	09 f0       	breq	.+2      	; 0x524c <takediss+0x240>
    524a:	4f c0       	rjmp	.+158    	; 0x52ea <takediss+0x2de>
           {  if(dir==1)
    524c:	80 91 0c 03 	lds	r24, 0x030C
    5250:	90 91 0d 03 	lds	r25, 0x030D
    5254:	81 30       	cpi	r24, 0x01	; 1
    5256:	91 05       	cpc	r25, r1
    5258:	61 f4       	brne	.+24     	; 0x5272 <takediss+0x266>
		       {   turnback(tcount*2 - 2,2); count=23; }
    525a:	8e e1       	ldi	r24, 0x1E	; 30
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	62 e0       	ldi	r22, 0x02	; 2
    5260:	70 e0       	ldi	r23, 0x00	; 0
    5262:	0e 94 41 21 	call	0x4282	; 0x4282 <turnback>
    5266:	87 e1       	ldi	r24, 0x17	; 23
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	90 93 0f 03 	sts	0x030F, r25
    526e:	80 93 0e 03 	sts	0x030E, r24
			   if(dir==0)
    5272:	80 91 0c 03 	lds	r24, 0x030C
    5276:	90 91 0d 03 	lds	r25, 0x030D
    527a:	00 97       	sbiw	r24, 0x00	; 0
    527c:	51 f4       	brne	.+20     	; 0x5292 <takediss+0x286>
			      { turnleft(tcount);count=23; }
    527e:	80 e1       	ldi	r24, 0x10	; 16
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	0e 94 ef 20 	call	0x41de	; 0x41de <turnleft>
    5286:	87 e1       	ldi	r24, 0x17	; 23
    5288:	90 e0       	ldi	r25, 0x00	; 0
    528a:	90 93 0f 03 	sts	0x030F, r25
    528e:	80 93 0e 03 	sts	0x030E, r24
              if(dir==2)
    5292:	80 91 0c 03 	lds	r24, 0x030C
    5296:	90 91 0d 03 	lds	r25, 0x030D
    529a:	82 30       	cpi	r24, 0x02	; 2
    529c:	91 05       	cpc	r25, r1
    529e:	51 f4       	brne	.+20     	; 0x52b4 <takediss+0x2a8>
			  { turnright(tcount); count=23;}
    52a0:	80 e1       	ldi	r24, 0x10	; 16
    52a2:	90 e0       	ldi	r25, 0x00	; 0
    52a4:	0e 94 a4 23 	call	0x4748	; 0x4748 <turnright>
    52a8:	87 e1       	ldi	r24, 0x17	; 23
    52aa:	90 e0       	ldi	r25, 0x00	; 0
    52ac:	90 93 0f 03 	sts	0x030F, r25
    52b0:	80 93 0e 03 	sts	0x030E, r24
			  if(dir==3)
    52b4:	80 91 0c 03 	lds	r24, 0x030C
    52b8:	90 91 0d 03 	lds	r25, 0x030D
    52bc:	83 30       	cpi	r24, 0x03	; 3
    52be:	91 05       	cpc	r25, r1
    52c0:	21 f4       	brne	.+8      	; 0x52ca <takediss+0x2be>
			  { count=0; }
    52c2:	10 92 0f 03 	sts	0x030F, r1
    52c6:	10 92 0e 03 	sts	0x030E, r1
			   dir= 3;
    52ca:	83 e0       	ldi	r24, 0x03	; 3
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	90 93 0d 03 	sts	0x030D, r25
    52d2:	80 93 0c 03 	sts	0x030C, r24
			    line(1);
    52d6:	81 e0       	ldi	r24, 0x01	; 1
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
				fcount=8;
    52de:	88 e0       	ldi	r24, 0x08	; 8
    52e0:	90 e0       	ldi	r25, 0x00	; 0
    52e2:	90 93 25 02 	sts	0x0225, r25
    52e6:	80 93 24 02 	sts	0x0224, r24
		   }  
  }
    52ea:	26 96       	adiw	r28, 0x06	; 6
    52ec:	0f b6       	in	r0, 0x3f	; 63
    52ee:	f8 94       	cli
    52f0:	de bf       	out	0x3e, r29	; 62
    52f2:	0f be       	out	0x3f, r0	; 63
    52f4:	cd bf       	out	0x3d, r28	; 61
    52f6:	cf 91       	pop	r28
    52f8:	df 91       	pop	r29
    52fa:	08 95       	ret

000052fc <readfromeeprom>:


void readfromeeprom()  //  READING FROM EEPROM
{
    52fc:	ef 92       	push	r14
    52fe:	ff 92       	push	r15
    5300:	0f 93       	push	r16
    5302:	1f 93       	push	r17
    5304:	df 93       	push	r29
    5306:	cf 93       	push	r28
    5308:	cd b7       	in	r28, 0x3d	; 61
    530a:	de b7       	in	r29, 0x3e	; 62
    530c:	66 97       	sbiw	r28, 0x16	; 22
    530e:	0f b6       	in	r0, 0x3f	; 63
    5310:	f8 94       	cli
    5312:	de bf       	out	0x3e, r29	; 62
    5314:	0f be       	out	0x3f, r0	; 63
    5316:	cd bf       	out	0x3d, r28	; 61
 for(int x=0;x<=5;x++)
    5318:	1e 8a       	std	Y+22, r1	; 0x16
    531a:	1d 8a       	std	Y+21, r1	; 0x15
    531c:	3b c0       	rjmp	.+118    	; 0x5394 <readfromeeprom+0x98>
   for(int y=0;y<=5;y++)
    531e:	1c 8a       	std	Y+20, r1	; 0x14
    5320:	1b 8a       	std	Y+19, r1	; 0x13
    5322:	2e c0       	rjmp	.+92     	; 0x5380 <readfromeeprom+0x84>
     arr[x][y] = (eeprom_read_byte(L_ADD+ 6*x+y) - 48);
    5324:	0d 89       	ldd	r16, Y+21	; 0x15
    5326:	1e 89       	ldd	r17, Y+22	; 0x16
    5328:	eb 88       	ldd	r14, Y+19	; 0x13
    532a:	fc 88       	ldd	r15, Y+20	; 0x14
    532c:	2d 89       	ldd	r18, Y+21	; 0x15
    532e:	3e 89       	ldd	r19, Y+22	; 0x16
    5330:	c9 01       	movw	r24, r18
    5332:	88 0f       	add	r24, r24
    5334:	99 1f       	adc	r25, r25
    5336:	82 0f       	add	r24, r18
    5338:	93 1f       	adc	r25, r19
    533a:	88 0f       	add	r24, r24
    533c:	99 1f       	adc	r25, r25
    533e:	9c 01       	movw	r18, r24
    5340:	80 91 22 02 	lds	r24, 0x0222
    5344:	90 91 23 02 	lds	r25, 0x0223
    5348:	28 0f       	add	r18, r24
    534a:	39 1f       	adc	r19, r25
    534c:	8b 89       	ldd	r24, Y+19	; 0x13
    534e:	9c 89       	ldd	r25, Y+20	; 0x14
    5350:	82 0f       	add	r24, r18
    5352:	93 1f       	adc	r25, r19
    5354:	0e 94 a5 2a 	call	0x554a	; 0x554a <eeprom_read_byte>
    5358:	28 2f       	mov	r18, r24
    535a:	20 53       	subi	r18, 0x30	; 48
    535c:	c8 01       	movw	r24, r16
    535e:	88 0f       	add	r24, r24
    5360:	99 1f       	adc	r25, r25
    5362:	80 0f       	add	r24, r16
    5364:	91 1f       	adc	r25, r17
    5366:	88 0f       	add	r24, r24
    5368:	99 1f       	adc	r25, r25
    536a:	8e 0d       	add	r24, r14
    536c:	9f 1d       	adc	r25, r15
    536e:	fc 01       	movw	r30, r24
    5370:	e8 5a       	subi	r30, 0xA8	; 168
    5372:	fc 4f       	sbci	r31, 0xFC	; 252
    5374:	20 83       	st	Z, r18


void readfromeeprom()  //  READING FROM EEPROM
{
 for(int x=0;x<=5;x++)
   for(int y=0;y<=5;y++)
    5376:	8b 89       	ldd	r24, Y+19	; 0x13
    5378:	9c 89       	ldd	r25, Y+20	; 0x14
    537a:	01 96       	adiw	r24, 0x01	; 1
    537c:	9c 8b       	std	Y+20, r25	; 0x14
    537e:	8b 8b       	std	Y+19, r24	; 0x13
    5380:	8b 89       	ldd	r24, Y+19	; 0x13
    5382:	9c 89       	ldd	r25, Y+20	; 0x14
    5384:	86 30       	cpi	r24, 0x06	; 6
    5386:	91 05       	cpc	r25, r1
    5388:	6c f2       	brlt	.-102    	; 0x5324 <readfromeeprom+0x28>
  }


void readfromeeprom()  //  READING FROM EEPROM
{
 for(int x=0;x<=5;x++)
    538a:	8d 89       	ldd	r24, Y+21	; 0x15
    538c:	9e 89       	ldd	r25, Y+22	; 0x16
    538e:	01 96       	adiw	r24, 0x01	; 1
    5390:	9e 8b       	std	Y+22, r25	; 0x16
    5392:	8d 8b       	std	Y+21, r24	; 0x15
    5394:	8d 89       	ldd	r24, Y+21	; 0x15
    5396:	9e 89       	ldd	r25, Y+22	; 0x16
    5398:	86 30       	cpi	r24, 0x06	; 6
    539a:	91 05       	cpc	r25, r1
    539c:	0c f4       	brge	.+2      	; 0x53a0 <readfromeeprom+0xa4>
    539e:	bf cf       	rjmp	.-130    	; 0x531e <readfromeeprom+0x22>
   for(int y=0;y<=5;y++)
     arr[x][y] = (eeprom_read_byte(L_ADD+ 6*x+y) - 48);
clear();
    53a0:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <clear>
lcd_string("DATA RETved FROM");
    53a4:	86 e2       	ldi	r24, 0x26	; 38
    53a6:	92 e0       	ldi	r25, 0x02	; 2
    53a8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>
lcd_cursor(2,1);lcd_string("EEPROM");
    53ac:	82 e0       	ldi	r24, 0x02	; 2
    53ae:	61 e0       	ldi	r22, 0x01	; 1
    53b0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <lcd_cursor>
    53b4:	87 e3       	ldi	r24, 0x37	; 55
    53b6:	92 e0       	ldi	r25, 0x02	; 2
    53b8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>
    53bc:	80 e0       	ldi	r24, 0x00	; 0
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	aa e7       	ldi	r26, 0x7A	; 122
    53c2:	b4 e4       	ldi	r27, 0x44	; 68
    53c4:	8b 87       	std	Y+11, r24	; 0x0b
    53c6:	9c 87       	std	Y+12, r25	; 0x0c
    53c8:	ad 87       	std	Y+13, r26	; 0x0d
    53ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    53ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    53d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    53d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    53d4:	26 e6       	ldi	r18, 0x66	; 102
    53d6:	36 e6       	ldi	r19, 0x66	; 102
    53d8:	46 e6       	ldi	r20, 0x66	; 102
    53da:	55 e4       	ldi	r21, 0x45	; 69
    53dc:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    53e0:	dc 01       	movw	r26, r24
    53e2:	cb 01       	movw	r24, r22
    53e4:	8f 83       	std	Y+7, r24	; 0x07
    53e6:	98 87       	std	Y+8, r25	; 0x08
    53e8:	a9 87       	std	Y+9, r26	; 0x09
    53ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53ec:	6f 81       	ldd	r22, Y+7	; 0x07
    53ee:	78 85       	ldd	r23, Y+8	; 0x08
    53f0:	89 85       	ldd	r24, Y+9	; 0x09
    53f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    53f4:	20 e0       	ldi	r18, 0x00	; 0
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	40 e8       	ldi	r20, 0x80	; 128
    53fa:	5f e3       	ldi	r21, 0x3F	; 63
    53fc:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    5400:	88 23       	and	r24, r24
    5402:	2c f4       	brge	.+10     	; 0x540e <readfromeeprom+0x112>
		__ticks = 1;
    5404:	81 e0       	ldi	r24, 0x01	; 1
    5406:	90 e0       	ldi	r25, 0x00	; 0
    5408:	9e 83       	std	Y+6, r25	; 0x06
    540a:	8d 83       	std	Y+5, r24	; 0x05
    540c:	3f c0       	rjmp	.+126    	; 0x548c <readfromeeprom+0x190>
	else if (__tmp > 65535)
    540e:	6f 81       	ldd	r22, Y+7	; 0x07
    5410:	78 85       	ldd	r23, Y+8	; 0x08
    5412:	89 85       	ldd	r24, Y+9	; 0x09
    5414:	9a 85       	ldd	r25, Y+10	; 0x0a
    5416:	20 e0       	ldi	r18, 0x00	; 0
    5418:	3f ef       	ldi	r19, 0xFF	; 255
    541a:	4f e7       	ldi	r20, 0x7F	; 127
    541c:	57 e4       	ldi	r21, 0x47	; 71
    541e:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    5422:	18 16       	cp	r1, r24
    5424:	4c f5       	brge	.+82     	; 0x5478 <readfromeeprom+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5426:	6b 85       	ldd	r22, Y+11	; 0x0b
    5428:	7c 85       	ldd	r23, Y+12	; 0x0c
    542a:	8d 85       	ldd	r24, Y+13	; 0x0d
    542c:	9e 85       	ldd	r25, Y+14	; 0x0e
    542e:	20 e0       	ldi	r18, 0x00	; 0
    5430:	30 e0       	ldi	r19, 0x00	; 0
    5432:	40 e2       	ldi	r20, 0x20	; 32
    5434:	51 e4       	ldi	r21, 0x41	; 65
    5436:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    543a:	dc 01       	movw	r26, r24
    543c:	cb 01       	movw	r24, r22
    543e:	bc 01       	movw	r22, r24
    5440:	cd 01       	movw	r24, r26
    5442:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    5446:	dc 01       	movw	r26, r24
    5448:	cb 01       	movw	r24, r22
    544a:	9e 83       	std	Y+6, r25	; 0x06
    544c:	8d 83       	std	Y+5, r24	; 0x05
    544e:	0f c0       	rjmp	.+30     	; 0x546e <readfromeeprom+0x172>
    5450:	80 e7       	ldi	r24, 0x70	; 112
    5452:	91 e0       	ldi	r25, 0x01	; 1
    5454:	9c 83       	std	Y+4, r25	; 0x04
    5456:	8b 83       	std	Y+3, r24	; 0x03
    5458:	8b 81       	ldd	r24, Y+3	; 0x03
    545a:	9c 81       	ldd	r25, Y+4	; 0x04
    545c:	01 97       	sbiw	r24, 0x01	; 1
    545e:	f1 f7       	brne	.-4      	; 0x545c <readfromeeprom+0x160>
    5460:	9c 83       	std	Y+4, r25	; 0x04
    5462:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5464:	8d 81       	ldd	r24, Y+5	; 0x05
    5466:	9e 81       	ldd	r25, Y+6	; 0x06
    5468:	01 97       	sbiw	r24, 0x01	; 1
    546a:	9e 83       	std	Y+6, r25	; 0x06
    546c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    546e:	8d 81       	ldd	r24, Y+5	; 0x05
    5470:	9e 81       	ldd	r25, Y+6	; 0x06
    5472:	00 97       	sbiw	r24, 0x00	; 0
    5474:	69 f7       	brne	.-38     	; 0x5450 <readfromeeprom+0x154>
    5476:	14 c0       	rjmp	.+40     	; 0x54a0 <readfromeeprom+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5478:	6f 81       	ldd	r22, Y+7	; 0x07
    547a:	78 85       	ldd	r23, Y+8	; 0x08
    547c:	89 85       	ldd	r24, Y+9	; 0x09
    547e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5480:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    5484:	dc 01       	movw	r26, r24
    5486:	cb 01       	movw	r24, r22
    5488:	9e 83       	std	Y+6, r25	; 0x06
    548a:	8d 83       	std	Y+5, r24	; 0x05
    548c:	8d 81       	ldd	r24, Y+5	; 0x05
    548e:	9e 81       	ldd	r25, Y+6	; 0x06
    5490:	9a 83       	std	Y+2, r25	; 0x02
    5492:	89 83       	std	Y+1, r24	; 0x01
    5494:	89 81       	ldd	r24, Y+1	; 0x01
    5496:	9a 81       	ldd	r25, Y+2	; 0x02
    5498:	01 97       	sbiw	r24, 0x01	; 1
    549a:	f1 f7       	brne	.-4      	; 0x5498 <readfromeeprom+0x19c>
    549c:	9a 83       	std	Y+2, r25	; 0x02
    549e:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1000);
lcd_cursor(1,1); 
    54a0:	81 e0       	ldi	r24, 0x01	; 1
    54a2:	61 e0       	ldi	r22, 0x01	; 1
    54a4:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <lcd_cursor>
for(int x=0;x<=5;x++)
    54a8:	1a 8a       	std	Y+18, r1	; 0x12
    54aa:	19 8a       	std	Y+17, r1	; 0x11
    54ac:	3b c0       	rjmp	.+118    	; 0x5524 <readfromeeprom+0x228>
   for(int y=0;y<=5;y++)
    54ae:	18 8a       	std	Y+16, r1	; 0x10
    54b0:	1f 86       	std	Y+15, r1	; 0x0f
    54b2:	2e c0       	rjmp	.+92     	; 0x5510 <readfromeeprom+0x214>
   {
if(6*x+y == 16)
    54b4:	29 89       	ldd	r18, Y+17	; 0x11
    54b6:	3a 89       	ldd	r19, Y+18	; 0x12
    54b8:	c9 01       	movw	r24, r18
    54ba:	88 0f       	add	r24, r24
    54bc:	99 1f       	adc	r25, r25
    54be:	82 0f       	add	r24, r18
    54c0:	93 1f       	adc	r25, r19
    54c2:	88 0f       	add	r24, r24
    54c4:	99 1f       	adc	r25, r25
    54c6:	9c 01       	movw	r18, r24
    54c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    54ca:	98 89       	ldd	r25, Y+16	; 0x10
    54cc:	82 0f       	add	r24, r18
    54ce:	93 1f       	adc	r25, r19
    54d0:	80 31       	cpi	r24, 0x10	; 16
    54d2:	91 05       	cpc	r25, r1
    54d4:	21 f4       	brne	.+8      	; 0x54de <readfromeeprom+0x1e2>
lcd_cursor(2,1);   
    54d6:	82 e0       	ldi	r24, 0x02	; 2
    54d8:	61 e0       	ldi	r22, 0x01	; 1
    54da:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <lcd_cursor>

   lcd_wr_char(arr[x][y]+48);
    54de:	29 89       	ldd	r18, Y+17	; 0x11
    54e0:	3a 89       	ldd	r19, Y+18	; 0x12
    54e2:	4f 85       	ldd	r20, Y+15	; 0x0f
    54e4:	58 89       	ldd	r21, Y+16	; 0x10
    54e6:	c9 01       	movw	r24, r18
    54e8:	88 0f       	add	r24, r24
    54ea:	99 1f       	adc	r25, r25
    54ec:	82 0f       	add	r24, r18
    54ee:	93 1f       	adc	r25, r19
    54f0:	88 0f       	add	r24, r24
    54f2:	99 1f       	adc	r25, r25
    54f4:	84 0f       	add	r24, r20
    54f6:	95 1f       	adc	r25, r21
    54f8:	fc 01       	movw	r30, r24
    54fa:	e8 5a       	subi	r30, 0xA8	; 168
    54fc:	fc 4f       	sbci	r31, 0xFC	; 252
    54fe:	80 81       	ld	r24, Z
    5500:	80 5d       	subi	r24, 0xD0	; 208
    5502:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_wr_char>
lcd_string("DATA RETved FROM");
lcd_cursor(2,1);lcd_string("EEPROM");
_delay_ms(1000);
lcd_cursor(1,1); 
for(int x=0;x<=5;x++)
   for(int y=0;y<=5;y++)
    5506:	8f 85       	ldd	r24, Y+15	; 0x0f
    5508:	98 89       	ldd	r25, Y+16	; 0x10
    550a:	01 96       	adiw	r24, 0x01	; 1
    550c:	98 8b       	std	Y+16, r25	; 0x10
    550e:	8f 87       	std	Y+15, r24	; 0x0f
    5510:	8f 85       	ldd	r24, Y+15	; 0x0f
    5512:	98 89       	ldd	r25, Y+16	; 0x10
    5514:	86 30       	cpi	r24, 0x06	; 6
    5516:	91 05       	cpc	r25, r1
    5518:	6c f2       	brlt	.-102    	; 0x54b4 <readfromeeprom+0x1b8>
clear();
lcd_string("DATA RETved FROM");
lcd_cursor(2,1);lcd_string("EEPROM");
_delay_ms(1000);
lcd_cursor(1,1); 
for(int x=0;x<=5;x++)
    551a:	89 89       	ldd	r24, Y+17	; 0x11
    551c:	9a 89       	ldd	r25, Y+18	; 0x12
    551e:	01 96       	adiw	r24, 0x01	; 1
    5520:	9a 8b       	std	Y+18, r25	; 0x12
    5522:	89 8b       	std	Y+17, r24	; 0x11
    5524:	89 89       	ldd	r24, Y+17	; 0x11
    5526:	9a 89       	ldd	r25, Y+18	; 0x12
    5528:	86 30       	cpi	r24, 0x06	; 6
    552a:	91 05       	cpc	r25, r1
    552c:	0c f4       	brge	.+2      	; 0x5530 <readfromeeprom+0x234>
    552e:	bf cf       	rjmp	.-130    	; 0x54ae <readfromeeprom+0x1b2>
  
	 
	// if(!(PINH & 0b00000010))
	 

}
    5530:	66 96       	adiw	r28, 0x16	; 22
    5532:	0f b6       	in	r0, 0x3f	; 63
    5534:	f8 94       	cli
    5536:	de bf       	out	0x3e, r29	; 62
    5538:	0f be       	out	0x3f, r0	; 63
    553a:	cd bf       	out	0x3d, r28	; 61
    553c:	cf 91       	pop	r28
    553e:	df 91       	pop	r29
    5540:	1f 91       	pop	r17
    5542:	0f 91       	pop	r16
    5544:	ff 90       	pop	r15
    5546:	ef 90       	pop	r14
    5548:	08 95       	ret

0000554a <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    554a:	df 93       	push	r29
    554c:	cf 93       	push	r28
    554e:	00 d0       	rcall	.+0      	; 0x5550 <eeprom_read_byte+0x6>
    5550:	0f 92       	push	r0
    5552:	cd b7       	in	r28, 0x3d	; 61
    5554:	de b7       	in	r29, 0x3e	; 62
    5556:	9b 83       	std	Y+3, r25	; 0x03
    5558:	8a 83       	std	Y+2, r24	; 0x02
    do {} while (!eeprom_is_ready ());
    555a:	ef e3       	ldi	r30, 0x3F	; 63
    555c:	f0 e0       	ldi	r31, 0x00	; 0
    555e:	80 81       	ld	r24, Z
    5560:	88 2f       	mov	r24, r24
    5562:	90 e0       	ldi	r25, 0x00	; 0
    5564:	82 70       	andi	r24, 0x02	; 2
    5566:	90 70       	andi	r25, 0x00	; 0
    5568:	00 97       	sbiw	r24, 0x00	; 0
    556a:	b9 f7       	brne	.-18     	; 0x555a <eeprom_read_byte+0x10>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    556c:	e1 e4       	ldi	r30, 0x41	; 65
    556e:	f0 e0       	ldi	r31, 0x00	; 0
    5570:	8a 81       	ldd	r24, Y+2	; 0x02
    5572:	9b 81       	ldd	r25, Y+3	; 0x03
    5574:	91 83       	std	Z+1, r25	; 0x01
    5576:	80 83       	st	Z, r24
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    5578:	f8 9a       	sbi	0x1f, 0	; 31
    557a:	80 b5       	in	r24, 0x20	; 32
    557c:	89 83       	std	Y+1, r24	; 0x01
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
    557e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5580:	0f 90       	pop	r0
    5582:	0f 90       	pop	r0
    5584:	0f 90       	pop	r0
    5586:	cf 91       	pop	r28
    5588:	df 91       	pop	r29
    558a:	08 95       	ret

0000558c <updaterelmat>:

void updaterelmat()   // udating the relational matrix with arr values
{  clear();
    558c:	df 93       	push	r29
    558e:	cf 93       	push	r28
    5590:	cd b7       	in	r28, 0x3d	; 61
    5592:	de b7       	in	r29, 0x3e	; 62
    5594:	2a 97       	sbiw	r28, 0x0a	; 10
    5596:	0f b6       	in	r0, 0x3f	; 63
    5598:	f8 94       	cli
    559a:	de bf       	out	0x3e, r29	; 62
    559c:	0f be       	out	0x3f, r0	; 63
    559e:	cd bf       	out	0x3d, r28	; 61
    55a0:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <clear>
  lcd_string("rel updating");
    55a4:	8e e3       	ldi	r24, 0x3E	; 62
    55a6:	92 e0       	ldi	r25, 0x02	; 2
    55a8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>

for(int x=0;x<=5;x++)
    55ac:	1a 86       	std	Y+10, r1	; 0x0a
    55ae:	19 86       	std	Y+9, r1	; 0x09
    55b0:	8b c3       	rjmp	.+1814   	; 0x5cc8 <updaterelmat+0x73c>
  for(int y=0;y<=5;y++)
    55b2:	18 86       	std	Y+8, r1	; 0x08
    55b4:	1f 82       	std	Y+7, r1	; 0x07
    55b6:	7d c3       	rjmp	.+1786   	; 0x5cb2 <updaterelmat+0x726>
  {
    if(arr[x][y] == 0 || arr[x][y] ==4 )
    55b8:	29 85       	ldd	r18, Y+9	; 0x09
    55ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    55bc:	4f 81       	ldd	r20, Y+7	; 0x07
    55be:	58 85       	ldd	r21, Y+8	; 0x08
    55c0:	c9 01       	movw	r24, r18
    55c2:	88 0f       	add	r24, r24
    55c4:	99 1f       	adc	r25, r25
    55c6:	82 0f       	add	r24, r18
    55c8:	93 1f       	adc	r25, r19
    55ca:	88 0f       	add	r24, r24
    55cc:	99 1f       	adc	r25, r25
    55ce:	84 0f       	add	r24, r20
    55d0:	95 1f       	adc	r25, r21
    55d2:	fc 01       	movw	r30, r24
    55d4:	e8 5a       	subi	r30, 0xA8	; 168
    55d6:	fc 4f       	sbci	r31, 0xFC	; 252
    55d8:	80 81       	ld	r24, Z
    55da:	88 23       	and	r24, r24
    55dc:	a1 f0       	breq	.+40     	; 0x5606 <updaterelmat+0x7a>
    55de:	29 85       	ldd	r18, Y+9	; 0x09
    55e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    55e2:	4f 81       	ldd	r20, Y+7	; 0x07
    55e4:	58 85       	ldd	r21, Y+8	; 0x08
    55e6:	c9 01       	movw	r24, r18
    55e8:	88 0f       	add	r24, r24
    55ea:	99 1f       	adc	r25, r25
    55ec:	82 0f       	add	r24, r18
    55ee:	93 1f       	adc	r25, r19
    55f0:	88 0f       	add	r24, r24
    55f2:	99 1f       	adc	r25, r25
    55f4:	84 0f       	add	r24, r20
    55f6:	95 1f       	adc	r25, r21
    55f8:	fc 01       	movw	r30, r24
    55fa:	e8 5a       	subi	r30, 0xA8	; 168
    55fc:	fc 4f       	sbci	r31, 0xFC	; 252
    55fe:	80 81       	ld	r24, Z
    5600:	84 30       	cpi	r24, 0x04	; 4
    5602:	09 f0       	breq	.+2      	; 0x5606 <updaterelmat+0x7a>
    5604:	76 c0       	rjmp	.+236    	; 0x56f2 <updaterelmat+0x166>
	{     rel[6*(x-1) + y][6*x+y+1]=1;  
    5606:	29 85       	ldd	r18, Y+9	; 0x09
    5608:	3a 85       	ldd	r19, Y+10	; 0x0a
    560a:	c9 01       	movw	r24, r18
    560c:	88 0f       	add	r24, r24
    560e:	99 1f       	adc	r25, r25
    5610:	82 0f       	add	r24, r18
    5612:	93 1f       	adc	r25, r19
    5614:	88 0f       	add	r24, r24
    5616:	99 1f       	adc	r25, r25
    5618:	9c 01       	movw	r18, r24
    561a:	26 50       	subi	r18, 0x06	; 6
    561c:	30 40       	sbci	r19, 0x00	; 0
    561e:	8f 81       	ldd	r24, Y+7	; 0x07
    5620:	98 85       	ldd	r25, Y+8	; 0x08
    5622:	b9 01       	movw	r22, r18
    5624:	68 0f       	add	r22, r24
    5626:	79 1f       	adc	r23, r25
    5628:	29 85       	ldd	r18, Y+9	; 0x09
    562a:	3a 85       	ldd	r19, Y+10	; 0x0a
    562c:	c9 01       	movw	r24, r18
    562e:	88 0f       	add	r24, r24
    5630:	99 1f       	adc	r25, r25
    5632:	82 0f       	add	r24, r18
    5634:	93 1f       	adc	r25, r19
    5636:	88 0f       	add	r24, r24
    5638:	99 1f       	adc	r25, r25
    563a:	9c 01       	movw	r18, r24
    563c:	8f 81       	ldd	r24, Y+7	; 0x07
    563e:	98 85       	ldd	r25, Y+8	; 0x08
    5640:	82 0f       	add	r24, r18
    5642:	93 1f       	adc	r25, r19
    5644:	ac 01       	movw	r20, r24
    5646:	4f 5f       	subi	r20, 0xFF	; 255
    5648:	5f 4f       	sbci	r21, 0xFF	; 255
    564a:	cb 01       	movw	r24, r22
    564c:	88 0f       	add	r24, r24
    564e:	99 1f       	adc	r25, r25
    5650:	88 0f       	add	r24, r24
    5652:	99 1f       	adc	r25, r25
    5654:	9c 01       	movw	r18, r24
    5656:	22 0f       	add	r18, r18
    5658:	33 1f       	adc	r19, r19
    565a:	22 0f       	add	r18, r18
    565c:	33 1f       	adc	r19, r19
    565e:	22 0f       	add	r18, r18
    5660:	33 1f       	adc	r19, r19
    5662:	82 0f       	add	r24, r18
    5664:	93 1f       	adc	r25, r19
    5666:	84 0f       	add	r24, r20
    5668:	95 1f       	adc	r25, r21
    566a:	88 0f       	add	r24, r24
    566c:	99 1f       	adc	r25, r25
    566e:	fc 01       	movw	r30, r24
    5670:	ef 56       	subi	r30, 0x6F	; 111
    5672:	fc 4f       	sbci	r31, 0xFC	; 252
    5674:	81 e0       	ldi	r24, 0x01	; 1
    5676:	90 e0       	ldi	r25, 0x00	; 0
    5678:	91 83       	std	Z+1, r25	; 0x01
    567a:	80 83       	st	Z, r24
	      rel[6*x+y+1][6*(x-1) + y]=1;
    567c:	29 85       	ldd	r18, Y+9	; 0x09
    567e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5680:	c9 01       	movw	r24, r18
    5682:	88 0f       	add	r24, r24
    5684:	99 1f       	adc	r25, r25
    5686:	82 0f       	add	r24, r18
    5688:	93 1f       	adc	r25, r19
    568a:	88 0f       	add	r24, r24
    568c:	99 1f       	adc	r25, r25
    568e:	9c 01       	movw	r18, r24
    5690:	8f 81       	ldd	r24, Y+7	; 0x07
    5692:	98 85       	ldd	r25, Y+8	; 0x08
    5694:	82 0f       	add	r24, r18
    5696:	93 1f       	adc	r25, r19
    5698:	bc 01       	movw	r22, r24
    569a:	6f 5f       	subi	r22, 0xFF	; 255
    569c:	7f 4f       	sbci	r23, 0xFF	; 255
    569e:	29 85       	ldd	r18, Y+9	; 0x09
    56a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    56a2:	c9 01       	movw	r24, r18
    56a4:	88 0f       	add	r24, r24
    56a6:	99 1f       	adc	r25, r25
    56a8:	82 0f       	add	r24, r18
    56aa:	93 1f       	adc	r25, r19
    56ac:	88 0f       	add	r24, r24
    56ae:	99 1f       	adc	r25, r25
    56b0:	9c 01       	movw	r18, r24
    56b2:	26 50       	subi	r18, 0x06	; 6
    56b4:	30 40       	sbci	r19, 0x00	; 0
    56b6:	8f 81       	ldd	r24, Y+7	; 0x07
    56b8:	98 85       	ldd	r25, Y+8	; 0x08
    56ba:	a9 01       	movw	r20, r18
    56bc:	48 0f       	add	r20, r24
    56be:	59 1f       	adc	r21, r25
    56c0:	cb 01       	movw	r24, r22
    56c2:	88 0f       	add	r24, r24
    56c4:	99 1f       	adc	r25, r25
    56c6:	88 0f       	add	r24, r24
    56c8:	99 1f       	adc	r25, r25
    56ca:	9c 01       	movw	r18, r24
    56cc:	22 0f       	add	r18, r18
    56ce:	33 1f       	adc	r19, r19
    56d0:	22 0f       	add	r18, r18
    56d2:	33 1f       	adc	r19, r19
    56d4:	22 0f       	add	r18, r18
    56d6:	33 1f       	adc	r19, r19
    56d8:	82 0f       	add	r24, r18
    56da:	93 1f       	adc	r25, r19
    56dc:	84 0f       	add	r24, r20
    56de:	95 1f       	adc	r25, r21
    56e0:	88 0f       	add	r24, r24
    56e2:	99 1f       	adc	r25, r25
    56e4:	fc 01       	movw	r30, r24
    56e6:	ef 56       	subi	r30, 0x6F	; 111
    56e8:	fc 4f       	sbci	r31, 0xFC	; 252
    56ea:	81 e0       	ldi	r24, 0x01	; 1
    56ec:	90 e0       	ldi	r25, 0x00	; 0
    56ee:	91 83       	std	Z+1, r25	; 0x01
    56f0:	80 83       	st	Z, r24
	}
	if(arr[x][y] == 1 || arr[x][y] ==5 )
    56f2:	29 85       	ldd	r18, Y+9	; 0x09
    56f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    56f6:	4f 81       	ldd	r20, Y+7	; 0x07
    56f8:	58 85       	ldd	r21, Y+8	; 0x08
    56fa:	c9 01       	movw	r24, r18
    56fc:	88 0f       	add	r24, r24
    56fe:	99 1f       	adc	r25, r25
    5700:	82 0f       	add	r24, r18
    5702:	93 1f       	adc	r25, r19
    5704:	88 0f       	add	r24, r24
    5706:	99 1f       	adc	r25, r25
    5708:	84 0f       	add	r24, r20
    570a:	95 1f       	adc	r25, r21
    570c:	fc 01       	movw	r30, r24
    570e:	e8 5a       	subi	r30, 0xA8	; 168
    5710:	fc 4f       	sbci	r31, 0xFC	; 252
    5712:	80 81       	ld	r24, Z
    5714:	81 30       	cpi	r24, 0x01	; 1
    5716:	a1 f0       	breq	.+40     	; 0x5740 <updaterelmat+0x1b4>
    5718:	29 85       	ldd	r18, Y+9	; 0x09
    571a:	3a 85       	ldd	r19, Y+10	; 0x0a
    571c:	4f 81       	ldd	r20, Y+7	; 0x07
    571e:	58 85       	ldd	r21, Y+8	; 0x08
    5720:	c9 01       	movw	r24, r18
    5722:	88 0f       	add	r24, r24
    5724:	99 1f       	adc	r25, r25
    5726:	82 0f       	add	r24, r18
    5728:	93 1f       	adc	r25, r19
    572a:	88 0f       	add	r24, r24
    572c:	99 1f       	adc	r25, r25
    572e:	84 0f       	add	r24, r20
    5730:	95 1f       	adc	r25, r21
    5732:	fc 01       	movw	r30, r24
    5734:	e8 5a       	subi	r30, 0xA8	; 168
    5736:	fc 4f       	sbci	r31, 0xFC	; 252
    5738:	80 81       	ld	r24, Z
    573a:	85 30       	cpi	r24, 0x05	; 5
    573c:	09 f0       	breq	.+2      	; 0x5740 <updaterelmat+0x1b4>
    573e:	78 c0       	rjmp	.+240    	; 0x5830 <updaterelmat+0x2a4>
	{     rel[6*(x) + y+1][6*(x+1) + y]=1;  
    5740:	29 85       	ldd	r18, Y+9	; 0x09
    5742:	3a 85       	ldd	r19, Y+10	; 0x0a
    5744:	c9 01       	movw	r24, r18
    5746:	88 0f       	add	r24, r24
    5748:	99 1f       	adc	r25, r25
    574a:	82 0f       	add	r24, r18
    574c:	93 1f       	adc	r25, r19
    574e:	88 0f       	add	r24, r24
    5750:	99 1f       	adc	r25, r25
    5752:	9c 01       	movw	r18, r24
    5754:	8f 81       	ldd	r24, Y+7	; 0x07
    5756:	98 85       	ldd	r25, Y+8	; 0x08
    5758:	82 0f       	add	r24, r18
    575a:	93 1f       	adc	r25, r19
    575c:	bc 01       	movw	r22, r24
    575e:	6f 5f       	subi	r22, 0xFF	; 255
    5760:	7f 4f       	sbci	r23, 0xFF	; 255
    5762:	89 85       	ldd	r24, Y+9	; 0x09
    5764:	9a 85       	ldd	r25, Y+10	; 0x0a
    5766:	9c 01       	movw	r18, r24
    5768:	2f 5f       	subi	r18, 0xFF	; 255
    576a:	3f 4f       	sbci	r19, 0xFF	; 255
    576c:	c9 01       	movw	r24, r18
    576e:	88 0f       	add	r24, r24
    5770:	99 1f       	adc	r25, r25
    5772:	82 0f       	add	r24, r18
    5774:	93 1f       	adc	r25, r19
    5776:	88 0f       	add	r24, r24
    5778:	99 1f       	adc	r25, r25
    577a:	9c 01       	movw	r18, r24
    577c:	8f 81       	ldd	r24, Y+7	; 0x07
    577e:	98 85       	ldd	r25, Y+8	; 0x08
    5780:	a9 01       	movw	r20, r18
    5782:	48 0f       	add	r20, r24
    5784:	59 1f       	adc	r21, r25
    5786:	cb 01       	movw	r24, r22
    5788:	88 0f       	add	r24, r24
    578a:	99 1f       	adc	r25, r25
    578c:	88 0f       	add	r24, r24
    578e:	99 1f       	adc	r25, r25
    5790:	9c 01       	movw	r18, r24
    5792:	22 0f       	add	r18, r18
    5794:	33 1f       	adc	r19, r19
    5796:	22 0f       	add	r18, r18
    5798:	33 1f       	adc	r19, r19
    579a:	22 0f       	add	r18, r18
    579c:	33 1f       	adc	r19, r19
    579e:	82 0f       	add	r24, r18
    57a0:	93 1f       	adc	r25, r19
    57a2:	84 0f       	add	r24, r20
    57a4:	95 1f       	adc	r25, r21
    57a6:	88 0f       	add	r24, r24
    57a8:	99 1f       	adc	r25, r25
    57aa:	fc 01       	movw	r30, r24
    57ac:	ef 56       	subi	r30, 0x6F	; 111
    57ae:	fc 4f       	sbci	r31, 0xFC	; 252
    57b0:	81 e0       	ldi	r24, 0x01	; 1
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	91 83       	std	Z+1, r25	; 0x01
    57b6:	80 83       	st	Z, r24
	      rel[6*(x+1) + y][6*(x) + y+1]=1;
    57b8:	89 85       	ldd	r24, Y+9	; 0x09
    57ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    57bc:	9c 01       	movw	r18, r24
    57be:	2f 5f       	subi	r18, 0xFF	; 255
    57c0:	3f 4f       	sbci	r19, 0xFF	; 255
    57c2:	c9 01       	movw	r24, r18
    57c4:	88 0f       	add	r24, r24
    57c6:	99 1f       	adc	r25, r25
    57c8:	82 0f       	add	r24, r18
    57ca:	93 1f       	adc	r25, r19
    57cc:	88 0f       	add	r24, r24
    57ce:	99 1f       	adc	r25, r25
    57d0:	9c 01       	movw	r18, r24
    57d2:	8f 81       	ldd	r24, Y+7	; 0x07
    57d4:	98 85       	ldd	r25, Y+8	; 0x08
    57d6:	b9 01       	movw	r22, r18
    57d8:	68 0f       	add	r22, r24
    57da:	79 1f       	adc	r23, r25
    57dc:	29 85       	ldd	r18, Y+9	; 0x09
    57de:	3a 85       	ldd	r19, Y+10	; 0x0a
    57e0:	c9 01       	movw	r24, r18
    57e2:	88 0f       	add	r24, r24
    57e4:	99 1f       	adc	r25, r25
    57e6:	82 0f       	add	r24, r18
    57e8:	93 1f       	adc	r25, r19
    57ea:	88 0f       	add	r24, r24
    57ec:	99 1f       	adc	r25, r25
    57ee:	9c 01       	movw	r18, r24
    57f0:	8f 81       	ldd	r24, Y+7	; 0x07
    57f2:	98 85       	ldd	r25, Y+8	; 0x08
    57f4:	82 0f       	add	r24, r18
    57f6:	93 1f       	adc	r25, r19
    57f8:	ac 01       	movw	r20, r24
    57fa:	4f 5f       	subi	r20, 0xFF	; 255
    57fc:	5f 4f       	sbci	r21, 0xFF	; 255
    57fe:	cb 01       	movw	r24, r22
    5800:	88 0f       	add	r24, r24
    5802:	99 1f       	adc	r25, r25
    5804:	88 0f       	add	r24, r24
    5806:	99 1f       	adc	r25, r25
    5808:	9c 01       	movw	r18, r24
    580a:	22 0f       	add	r18, r18
    580c:	33 1f       	adc	r19, r19
    580e:	22 0f       	add	r18, r18
    5810:	33 1f       	adc	r19, r19
    5812:	22 0f       	add	r18, r18
    5814:	33 1f       	adc	r19, r19
    5816:	82 0f       	add	r24, r18
    5818:	93 1f       	adc	r25, r19
    581a:	84 0f       	add	r24, r20
    581c:	95 1f       	adc	r25, r21
    581e:	88 0f       	add	r24, r24
    5820:	99 1f       	adc	r25, r25
    5822:	fc 01       	movw	r30, r24
    5824:	ef 56       	subi	r30, 0x6F	; 111
    5826:	fc 4f       	sbci	r31, 0xFC	; 252
    5828:	81 e0       	ldi	r24, 0x01	; 1
    582a:	90 e0       	ldi	r25, 0x00	; 0
    582c:	91 83       	std	Z+1, r25	; 0x01
    582e:	80 83       	st	Z, r24
	}
	if(arr[x][y] == 2 || arr[x][y] ==6 )
    5830:	29 85       	ldd	r18, Y+9	; 0x09
    5832:	3a 85       	ldd	r19, Y+10	; 0x0a
    5834:	4f 81       	ldd	r20, Y+7	; 0x07
    5836:	58 85       	ldd	r21, Y+8	; 0x08
    5838:	c9 01       	movw	r24, r18
    583a:	88 0f       	add	r24, r24
    583c:	99 1f       	adc	r25, r25
    583e:	82 0f       	add	r24, r18
    5840:	93 1f       	adc	r25, r19
    5842:	88 0f       	add	r24, r24
    5844:	99 1f       	adc	r25, r25
    5846:	84 0f       	add	r24, r20
    5848:	95 1f       	adc	r25, r21
    584a:	fc 01       	movw	r30, r24
    584c:	e8 5a       	subi	r30, 0xA8	; 168
    584e:	fc 4f       	sbci	r31, 0xFC	; 252
    5850:	80 81       	ld	r24, Z
    5852:	82 30       	cpi	r24, 0x02	; 2
    5854:	a1 f0       	breq	.+40     	; 0x587e <updaterelmat+0x2f2>
    5856:	29 85       	ldd	r18, Y+9	; 0x09
    5858:	3a 85       	ldd	r19, Y+10	; 0x0a
    585a:	4f 81       	ldd	r20, Y+7	; 0x07
    585c:	58 85       	ldd	r21, Y+8	; 0x08
    585e:	c9 01       	movw	r24, r18
    5860:	88 0f       	add	r24, r24
    5862:	99 1f       	adc	r25, r25
    5864:	82 0f       	add	r24, r18
    5866:	93 1f       	adc	r25, r19
    5868:	88 0f       	add	r24, r24
    586a:	99 1f       	adc	r25, r25
    586c:	84 0f       	add	r24, r20
    586e:	95 1f       	adc	r25, r21
    5870:	fc 01       	movw	r30, r24
    5872:	e8 5a       	subi	r30, 0xA8	; 168
    5874:	fc 4f       	sbci	r31, 0xFC	; 252
    5876:	80 81       	ld	r24, Z
    5878:	86 30       	cpi	r24, 0x06	; 6
    587a:	09 f0       	breq	.+2      	; 0x587e <updaterelmat+0x2f2>
    587c:	78 c0       	rjmp	.+240    	; 0x596e <updaterelmat+0x3e2>
	{     rel[6*(x+1) + y][6*x+y-1]=1;  
    587e:	89 85       	ldd	r24, Y+9	; 0x09
    5880:	9a 85       	ldd	r25, Y+10	; 0x0a
    5882:	9c 01       	movw	r18, r24
    5884:	2f 5f       	subi	r18, 0xFF	; 255
    5886:	3f 4f       	sbci	r19, 0xFF	; 255
    5888:	c9 01       	movw	r24, r18
    588a:	88 0f       	add	r24, r24
    588c:	99 1f       	adc	r25, r25
    588e:	82 0f       	add	r24, r18
    5890:	93 1f       	adc	r25, r19
    5892:	88 0f       	add	r24, r24
    5894:	99 1f       	adc	r25, r25
    5896:	9c 01       	movw	r18, r24
    5898:	8f 81       	ldd	r24, Y+7	; 0x07
    589a:	98 85       	ldd	r25, Y+8	; 0x08
    589c:	b9 01       	movw	r22, r18
    589e:	68 0f       	add	r22, r24
    58a0:	79 1f       	adc	r23, r25
    58a2:	29 85       	ldd	r18, Y+9	; 0x09
    58a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    58a6:	c9 01       	movw	r24, r18
    58a8:	88 0f       	add	r24, r24
    58aa:	99 1f       	adc	r25, r25
    58ac:	82 0f       	add	r24, r18
    58ae:	93 1f       	adc	r25, r19
    58b0:	88 0f       	add	r24, r24
    58b2:	99 1f       	adc	r25, r25
    58b4:	9c 01       	movw	r18, r24
    58b6:	8f 81       	ldd	r24, Y+7	; 0x07
    58b8:	98 85       	ldd	r25, Y+8	; 0x08
    58ba:	82 0f       	add	r24, r18
    58bc:	93 1f       	adc	r25, r19
    58be:	ac 01       	movw	r20, r24
    58c0:	41 50       	subi	r20, 0x01	; 1
    58c2:	50 40       	sbci	r21, 0x00	; 0
    58c4:	cb 01       	movw	r24, r22
    58c6:	88 0f       	add	r24, r24
    58c8:	99 1f       	adc	r25, r25
    58ca:	88 0f       	add	r24, r24
    58cc:	99 1f       	adc	r25, r25
    58ce:	9c 01       	movw	r18, r24
    58d0:	22 0f       	add	r18, r18
    58d2:	33 1f       	adc	r19, r19
    58d4:	22 0f       	add	r18, r18
    58d6:	33 1f       	adc	r19, r19
    58d8:	22 0f       	add	r18, r18
    58da:	33 1f       	adc	r19, r19
    58dc:	82 0f       	add	r24, r18
    58de:	93 1f       	adc	r25, r19
    58e0:	84 0f       	add	r24, r20
    58e2:	95 1f       	adc	r25, r21
    58e4:	88 0f       	add	r24, r24
    58e6:	99 1f       	adc	r25, r25
    58e8:	fc 01       	movw	r30, r24
    58ea:	ef 56       	subi	r30, 0x6F	; 111
    58ec:	fc 4f       	sbci	r31, 0xFC	; 252
    58ee:	81 e0       	ldi	r24, 0x01	; 1
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	91 83       	std	Z+1, r25	; 0x01
    58f4:	80 83       	st	Z, r24
	      rel[6*x+y-1][6*(x+1) + y]=1;
    58f6:	29 85       	ldd	r18, Y+9	; 0x09
    58f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    58fa:	c9 01       	movw	r24, r18
    58fc:	88 0f       	add	r24, r24
    58fe:	99 1f       	adc	r25, r25
    5900:	82 0f       	add	r24, r18
    5902:	93 1f       	adc	r25, r19
    5904:	88 0f       	add	r24, r24
    5906:	99 1f       	adc	r25, r25
    5908:	9c 01       	movw	r18, r24
    590a:	8f 81       	ldd	r24, Y+7	; 0x07
    590c:	98 85       	ldd	r25, Y+8	; 0x08
    590e:	82 0f       	add	r24, r18
    5910:	93 1f       	adc	r25, r19
    5912:	bc 01       	movw	r22, r24
    5914:	61 50       	subi	r22, 0x01	; 1
    5916:	70 40       	sbci	r23, 0x00	; 0
    5918:	89 85       	ldd	r24, Y+9	; 0x09
    591a:	9a 85       	ldd	r25, Y+10	; 0x0a
    591c:	9c 01       	movw	r18, r24
    591e:	2f 5f       	subi	r18, 0xFF	; 255
    5920:	3f 4f       	sbci	r19, 0xFF	; 255
    5922:	c9 01       	movw	r24, r18
    5924:	88 0f       	add	r24, r24
    5926:	99 1f       	adc	r25, r25
    5928:	82 0f       	add	r24, r18
    592a:	93 1f       	adc	r25, r19
    592c:	88 0f       	add	r24, r24
    592e:	99 1f       	adc	r25, r25
    5930:	9c 01       	movw	r18, r24
    5932:	8f 81       	ldd	r24, Y+7	; 0x07
    5934:	98 85       	ldd	r25, Y+8	; 0x08
    5936:	a9 01       	movw	r20, r18
    5938:	48 0f       	add	r20, r24
    593a:	59 1f       	adc	r21, r25
    593c:	cb 01       	movw	r24, r22
    593e:	88 0f       	add	r24, r24
    5940:	99 1f       	adc	r25, r25
    5942:	88 0f       	add	r24, r24
    5944:	99 1f       	adc	r25, r25
    5946:	9c 01       	movw	r18, r24
    5948:	22 0f       	add	r18, r18
    594a:	33 1f       	adc	r19, r19
    594c:	22 0f       	add	r18, r18
    594e:	33 1f       	adc	r19, r19
    5950:	22 0f       	add	r18, r18
    5952:	33 1f       	adc	r19, r19
    5954:	82 0f       	add	r24, r18
    5956:	93 1f       	adc	r25, r19
    5958:	84 0f       	add	r24, r20
    595a:	95 1f       	adc	r25, r21
    595c:	88 0f       	add	r24, r24
    595e:	99 1f       	adc	r25, r25
    5960:	fc 01       	movw	r30, r24
    5962:	ef 56       	subi	r30, 0x6F	; 111
    5964:	fc 4f       	sbci	r31, 0xFC	; 252
    5966:	81 e0       	ldi	r24, 0x01	; 1
    5968:	90 e0       	ldi	r25, 0x00	; 0
    596a:	91 83       	std	Z+1, r25	; 0x01
    596c:	80 83       	st	Z, r24
	}
	if(arr[x][y] == 3 || arr[x][y] ==7 )
    596e:	29 85       	ldd	r18, Y+9	; 0x09
    5970:	3a 85       	ldd	r19, Y+10	; 0x0a
    5972:	4f 81       	ldd	r20, Y+7	; 0x07
    5974:	58 85       	ldd	r21, Y+8	; 0x08
    5976:	c9 01       	movw	r24, r18
    5978:	88 0f       	add	r24, r24
    597a:	99 1f       	adc	r25, r25
    597c:	82 0f       	add	r24, r18
    597e:	93 1f       	adc	r25, r19
    5980:	88 0f       	add	r24, r24
    5982:	99 1f       	adc	r25, r25
    5984:	84 0f       	add	r24, r20
    5986:	95 1f       	adc	r25, r21
    5988:	fc 01       	movw	r30, r24
    598a:	e8 5a       	subi	r30, 0xA8	; 168
    598c:	fc 4f       	sbci	r31, 0xFC	; 252
    598e:	80 81       	ld	r24, Z
    5990:	83 30       	cpi	r24, 0x03	; 3
    5992:	a1 f0       	breq	.+40     	; 0x59bc <updaterelmat+0x430>
    5994:	29 85       	ldd	r18, Y+9	; 0x09
    5996:	3a 85       	ldd	r19, Y+10	; 0x0a
    5998:	4f 81       	ldd	r20, Y+7	; 0x07
    599a:	58 85       	ldd	r21, Y+8	; 0x08
    599c:	c9 01       	movw	r24, r18
    599e:	88 0f       	add	r24, r24
    59a0:	99 1f       	adc	r25, r25
    59a2:	82 0f       	add	r24, r18
    59a4:	93 1f       	adc	r25, r19
    59a6:	88 0f       	add	r24, r24
    59a8:	99 1f       	adc	r25, r25
    59aa:	84 0f       	add	r24, r20
    59ac:	95 1f       	adc	r25, r21
    59ae:	fc 01       	movw	r30, r24
    59b0:	e8 5a       	subi	r30, 0xA8	; 168
    59b2:	fc 4f       	sbci	r31, 0xFC	; 252
    59b4:	80 81       	ld	r24, Z
    59b6:	87 30       	cpi	r24, 0x07	; 7
    59b8:	09 f0       	breq	.+2      	; 0x59bc <updaterelmat+0x430>
    59ba:	76 c0       	rjmp	.+236    	; 0x5aa8 <updaterelmat+0x51c>
	{     rel[6*(x-1) + y][6*x+y-1]=1;  
    59bc:	29 85       	ldd	r18, Y+9	; 0x09
    59be:	3a 85       	ldd	r19, Y+10	; 0x0a
    59c0:	c9 01       	movw	r24, r18
    59c2:	88 0f       	add	r24, r24
    59c4:	99 1f       	adc	r25, r25
    59c6:	82 0f       	add	r24, r18
    59c8:	93 1f       	adc	r25, r19
    59ca:	88 0f       	add	r24, r24
    59cc:	99 1f       	adc	r25, r25
    59ce:	9c 01       	movw	r18, r24
    59d0:	26 50       	subi	r18, 0x06	; 6
    59d2:	30 40       	sbci	r19, 0x00	; 0
    59d4:	8f 81       	ldd	r24, Y+7	; 0x07
    59d6:	98 85       	ldd	r25, Y+8	; 0x08
    59d8:	b9 01       	movw	r22, r18
    59da:	68 0f       	add	r22, r24
    59dc:	79 1f       	adc	r23, r25
    59de:	29 85       	ldd	r18, Y+9	; 0x09
    59e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    59e2:	c9 01       	movw	r24, r18
    59e4:	88 0f       	add	r24, r24
    59e6:	99 1f       	adc	r25, r25
    59e8:	82 0f       	add	r24, r18
    59ea:	93 1f       	adc	r25, r19
    59ec:	88 0f       	add	r24, r24
    59ee:	99 1f       	adc	r25, r25
    59f0:	9c 01       	movw	r18, r24
    59f2:	8f 81       	ldd	r24, Y+7	; 0x07
    59f4:	98 85       	ldd	r25, Y+8	; 0x08
    59f6:	82 0f       	add	r24, r18
    59f8:	93 1f       	adc	r25, r19
    59fa:	ac 01       	movw	r20, r24
    59fc:	41 50       	subi	r20, 0x01	; 1
    59fe:	50 40       	sbci	r21, 0x00	; 0
    5a00:	cb 01       	movw	r24, r22
    5a02:	88 0f       	add	r24, r24
    5a04:	99 1f       	adc	r25, r25
    5a06:	88 0f       	add	r24, r24
    5a08:	99 1f       	adc	r25, r25
    5a0a:	9c 01       	movw	r18, r24
    5a0c:	22 0f       	add	r18, r18
    5a0e:	33 1f       	adc	r19, r19
    5a10:	22 0f       	add	r18, r18
    5a12:	33 1f       	adc	r19, r19
    5a14:	22 0f       	add	r18, r18
    5a16:	33 1f       	adc	r19, r19
    5a18:	82 0f       	add	r24, r18
    5a1a:	93 1f       	adc	r25, r19
    5a1c:	84 0f       	add	r24, r20
    5a1e:	95 1f       	adc	r25, r21
    5a20:	88 0f       	add	r24, r24
    5a22:	99 1f       	adc	r25, r25
    5a24:	fc 01       	movw	r30, r24
    5a26:	ef 56       	subi	r30, 0x6F	; 111
    5a28:	fc 4f       	sbci	r31, 0xFC	; 252
    5a2a:	81 e0       	ldi	r24, 0x01	; 1
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	91 83       	std	Z+1, r25	; 0x01
    5a30:	80 83       	st	Z, r24
	      rel[6*x+y-1][6*(x-1) + y]=1;
    5a32:	29 85       	ldd	r18, Y+9	; 0x09
    5a34:	3a 85       	ldd	r19, Y+10	; 0x0a
    5a36:	c9 01       	movw	r24, r18
    5a38:	88 0f       	add	r24, r24
    5a3a:	99 1f       	adc	r25, r25
    5a3c:	82 0f       	add	r24, r18
    5a3e:	93 1f       	adc	r25, r19
    5a40:	88 0f       	add	r24, r24
    5a42:	99 1f       	adc	r25, r25
    5a44:	9c 01       	movw	r18, r24
    5a46:	8f 81       	ldd	r24, Y+7	; 0x07
    5a48:	98 85       	ldd	r25, Y+8	; 0x08
    5a4a:	82 0f       	add	r24, r18
    5a4c:	93 1f       	adc	r25, r19
    5a4e:	bc 01       	movw	r22, r24
    5a50:	61 50       	subi	r22, 0x01	; 1
    5a52:	70 40       	sbci	r23, 0x00	; 0
    5a54:	29 85       	ldd	r18, Y+9	; 0x09
    5a56:	3a 85       	ldd	r19, Y+10	; 0x0a
    5a58:	c9 01       	movw	r24, r18
    5a5a:	88 0f       	add	r24, r24
    5a5c:	99 1f       	adc	r25, r25
    5a5e:	82 0f       	add	r24, r18
    5a60:	93 1f       	adc	r25, r19
    5a62:	88 0f       	add	r24, r24
    5a64:	99 1f       	adc	r25, r25
    5a66:	9c 01       	movw	r18, r24
    5a68:	26 50       	subi	r18, 0x06	; 6
    5a6a:	30 40       	sbci	r19, 0x00	; 0
    5a6c:	8f 81       	ldd	r24, Y+7	; 0x07
    5a6e:	98 85       	ldd	r25, Y+8	; 0x08
    5a70:	a9 01       	movw	r20, r18
    5a72:	48 0f       	add	r20, r24
    5a74:	59 1f       	adc	r21, r25
    5a76:	cb 01       	movw	r24, r22
    5a78:	88 0f       	add	r24, r24
    5a7a:	99 1f       	adc	r25, r25
    5a7c:	88 0f       	add	r24, r24
    5a7e:	99 1f       	adc	r25, r25
    5a80:	9c 01       	movw	r18, r24
    5a82:	22 0f       	add	r18, r18
    5a84:	33 1f       	adc	r19, r19
    5a86:	22 0f       	add	r18, r18
    5a88:	33 1f       	adc	r19, r19
    5a8a:	22 0f       	add	r18, r18
    5a8c:	33 1f       	adc	r19, r19
    5a8e:	82 0f       	add	r24, r18
    5a90:	93 1f       	adc	r25, r19
    5a92:	84 0f       	add	r24, r20
    5a94:	95 1f       	adc	r25, r21
    5a96:	88 0f       	add	r24, r24
    5a98:	99 1f       	adc	r25, r25
    5a9a:	fc 01       	movw	r30, r24
    5a9c:	ef 56       	subi	r30, 0x6F	; 111
    5a9e:	fc 4f       	sbci	r31, 0xFC	; 252
    5aa0:	81 e0       	ldi	r24, 0x01	; 1
    5aa2:	90 e0       	ldi	r25, 0x00	; 0
    5aa4:	91 83       	std	Z+1, r25	; 0x01
    5aa6:	80 83       	st	Z, r24
	}
  
  for(int x=0;x<=5;x++)
    5aa8:	1e 82       	std	Y+6, r1	; 0x06
    5aaa:	1d 82       	std	Y+5, r1	; 0x05
    5aac:	f7 c0       	rjmp	.+494    	; 0x5c9c <updaterelmat+0x710>
  for(int y=0;y<=5;y++)
    5aae:	1c 82       	std	Y+4, r1	; 0x04
    5ab0:	1b 82       	std	Y+3, r1	; 0x03
    5ab2:	e9 c0       	rjmp	.+466    	; 0x5c86 <updaterelmat+0x6fa>
  if((arr[x][y] >=4 && arr[x][y] <=7) || arr[x][y] == 12 )
    5ab4:	2d 81       	ldd	r18, Y+5	; 0x05
    5ab6:	3e 81       	ldd	r19, Y+6	; 0x06
    5ab8:	4b 81       	ldd	r20, Y+3	; 0x03
    5aba:	5c 81       	ldd	r21, Y+4	; 0x04
    5abc:	c9 01       	movw	r24, r18
    5abe:	88 0f       	add	r24, r24
    5ac0:	99 1f       	adc	r25, r25
    5ac2:	82 0f       	add	r24, r18
    5ac4:	93 1f       	adc	r25, r19
    5ac6:	88 0f       	add	r24, r24
    5ac8:	99 1f       	adc	r25, r25
    5aca:	84 0f       	add	r24, r20
    5acc:	95 1f       	adc	r25, r21
    5ace:	fc 01       	movw	r30, r24
    5ad0:	e8 5a       	subi	r30, 0xA8	; 168
    5ad2:	fc 4f       	sbci	r31, 0xFC	; 252
    5ad4:	80 81       	ld	r24, Z
    5ad6:	84 30       	cpi	r24, 0x04	; 4
    5ad8:	98 f0       	brcs	.+38     	; 0x5b00 <updaterelmat+0x574>
    5ada:	2d 81       	ldd	r18, Y+5	; 0x05
    5adc:	3e 81       	ldd	r19, Y+6	; 0x06
    5ade:	4b 81       	ldd	r20, Y+3	; 0x03
    5ae0:	5c 81       	ldd	r21, Y+4	; 0x04
    5ae2:	c9 01       	movw	r24, r18
    5ae4:	88 0f       	add	r24, r24
    5ae6:	99 1f       	adc	r25, r25
    5ae8:	82 0f       	add	r24, r18
    5aea:	93 1f       	adc	r25, r19
    5aec:	88 0f       	add	r24, r24
    5aee:	99 1f       	adc	r25, r25
    5af0:	84 0f       	add	r24, r20
    5af2:	95 1f       	adc	r25, r21
    5af4:	fc 01       	movw	r30, r24
    5af6:	e8 5a       	subi	r30, 0xA8	; 168
    5af8:	fc 4f       	sbci	r31, 0xFC	; 252
    5afa:	80 81       	ld	r24, Z
    5afc:	88 30       	cpi	r24, 0x08	; 8
    5afe:	a0 f0       	brcs	.+40     	; 0x5b28 <updaterelmat+0x59c>
    5b00:	2d 81       	ldd	r18, Y+5	; 0x05
    5b02:	3e 81       	ldd	r19, Y+6	; 0x06
    5b04:	4b 81       	ldd	r20, Y+3	; 0x03
    5b06:	5c 81       	ldd	r21, Y+4	; 0x04
    5b08:	c9 01       	movw	r24, r18
    5b0a:	88 0f       	add	r24, r24
    5b0c:	99 1f       	adc	r25, r25
    5b0e:	82 0f       	add	r24, r18
    5b10:	93 1f       	adc	r25, r19
    5b12:	88 0f       	add	r24, r24
    5b14:	99 1f       	adc	r25, r25
    5b16:	84 0f       	add	r24, r20
    5b18:	95 1f       	adc	r25, r21
    5b1a:	fc 01       	movw	r30, r24
    5b1c:	e8 5a       	subi	r30, 0xA8	; 168
    5b1e:	fc 4f       	sbci	r31, 0xFC	; 252
    5b20:	80 81       	ld	r24, Z
    5b22:	8c 30       	cpi	r24, 0x0C	; 12
    5b24:	09 f0       	breq	.+2      	; 0x5b28 <updaterelmat+0x59c>
    5b26:	aa c0       	rjmp	.+340    	; 0x5c7c <updaterelmat+0x6f0>
    {
	worked[6*x+y]=1;
    5b28:	2d 81       	ldd	r18, Y+5	; 0x05
    5b2a:	3e 81       	ldd	r19, Y+6	; 0x06
    5b2c:	c9 01       	movw	r24, r18
    5b2e:	88 0f       	add	r24, r24
    5b30:	99 1f       	adc	r25, r25
    5b32:	82 0f       	add	r24, r18
    5b34:	93 1f       	adc	r25, r19
    5b36:	88 0f       	add	r24, r24
    5b38:	99 1f       	adc	r25, r25
    5b3a:	9c 01       	movw	r18, r24
    5b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    5b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    5b40:	82 0f       	add	r24, r18
    5b42:	93 1f       	adc	r25, r19
    5b44:	88 0f       	add	r24, r24
    5b46:	99 1f       	adc	r25, r25
    5b48:	fc 01       	movw	r30, r24
    5b4a:	ec 52       	subi	r30, 0x2C	; 44
    5b4c:	f2 4f       	sbci	r31, 0xF2	; 242
    5b4e:	81 e0       	ldi	r24, 0x01	; 1
    5b50:	90 e0       	ldi	r25, 0x00	; 0
    5b52:	91 83       	std	Z+1, r25	; 0x01
    5b54:	80 83       	st	Z, r24
	for(int i=0;i<=35;i++)
    5b56:	1a 82       	std	Y+2, r1	; 0x02
    5b58:	19 82       	std	Y+1, r1	; 0x01
    5b5a:	53 c0       	rjmp	.+166    	; 0x5c02 <updaterelmat+0x676>
	{
	 rel[6*x+y][i]=0;
    5b5c:	2d 81       	ldd	r18, Y+5	; 0x05
    5b5e:	3e 81       	ldd	r19, Y+6	; 0x06
    5b60:	c9 01       	movw	r24, r18
    5b62:	88 0f       	add	r24, r24
    5b64:	99 1f       	adc	r25, r25
    5b66:	82 0f       	add	r24, r18
    5b68:	93 1f       	adc	r25, r19
    5b6a:	88 0f       	add	r24, r24
    5b6c:	99 1f       	adc	r25, r25
    5b6e:	9c 01       	movw	r18, r24
    5b70:	8b 81       	ldd	r24, Y+3	; 0x03
    5b72:	9c 81       	ldd	r25, Y+4	; 0x04
    5b74:	82 0f       	add	r24, r18
    5b76:	93 1f       	adc	r25, r19
    5b78:	49 81       	ldd	r20, Y+1	; 0x01
    5b7a:	5a 81       	ldd	r21, Y+2	; 0x02
    5b7c:	88 0f       	add	r24, r24
    5b7e:	99 1f       	adc	r25, r25
    5b80:	88 0f       	add	r24, r24
    5b82:	99 1f       	adc	r25, r25
    5b84:	9c 01       	movw	r18, r24
    5b86:	22 0f       	add	r18, r18
    5b88:	33 1f       	adc	r19, r19
    5b8a:	22 0f       	add	r18, r18
    5b8c:	33 1f       	adc	r19, r19
    5b8e:	22 0f       	add	r18, r18
    5b90:	33 1f       	adc	r19, r19
    5b92:	82 0f       	add	r24, r18
    5b94:	93 1f       	adc	r25, r19
    5b96:	84 0f       	add	r24, r20
    5b98:	95 1f       	adc	r25, r21
    5b9a:	88 0f       	add	r24, r24
    5b9c:	99 1f       	adc	r25, r25
    5b9e:	fc 01       	movw	r30, r24
    5ba0:	ef 56       	subi	r30, 0x6F	; 111
    5ba2:	fc 4f       	sbci	r31, 0xFC	; 252
    5ba4:	11 82       	std	Z+1, r1	; 0x01
    5ba6:	10 82       	st	Z, r1
     rel[i][6*x+y]=0;  
    5ba8:	69 81       	ldd	r22, Y+1	; 0x01
    5baa:	7a 81       	ldd	r23, Y+2	; 0x02
    5bac:	2d 81       	ldd	r18, Y+5	; 0x05
    5bae:	3e 81       	ldd	r19, Y+6	; 0x06
    5bb0:	c9 01       	movw	r24, r18
    5bb2:	88 0f       	add	r24, r24
    5bb4:	99 1f       	adc	r25, r25
    5bb6:	82 0f       	add	r24, r18
    5bb8:	93 1f       	adc	r25, r19
    5bba:	88 0f       	add	r24, r24
    5bbc:	99 1f       	adc	r25, r25
    5bbe:	9c 01       	movw	r18, r24
    5bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    5bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    5bc4:	a9 01       	movw	r20, r18
    5bc6:	48 0f       	add	r20, r24
    5bc8:	59 1f       	adc	r21, r25
    5bca:	cb 01       	movw	r24, r22
    5bcc:	88 0f       	add	r24, r24
    5bce:	99 1f       	adc	r25, r25
    5bd0:	88 0f       	add	r24, r24
    5bd2:	99 1f       	adc	r25, r25
    5bd4:	9c 01       	movw	r18, r24
    5bd6:	22 0f       	add	r18, r18
    5bd8:	33 1f       	adc	r19, r19
    5bda:	22 0f       	add	r18, r18
    5bdc:	33 1f       	adc	r19, r19
    5bde:	22 0f       	add	r18, r18
    5be0:	33 1f       	adc	r19, r19
    5be2:	82 0f       	add	r24, r18
    5be4:	93 1f       	adc	r25, r19
    5be6:	84 0f       	add	r24, r20
    5be8:	95 1f       	adc	r25, r21
    5bea:	88 0f       	add	r24, r24
    5bec:	99 1f       	adc	r25, r25
    5bee:	fc 01       	movw	r30, r24
    5bf0:	ef 56       	subi	r30, 0x6F	; 111
    5bf2:	fc 4f       	sbci	r31, 0xFC	; 252
    5bf4:	11 82       	std	Z+1, r1	; 0x01
    5bf6:	10 82       	st	Z, r1
  for(int x=0;x<=5;x++)
  for(int y=0;y<=5;y++)
  if((arr[x][y] >=4 && arr[x][y] <=7) || arr[x][y] == 12 )
    {
	worked[6*x+y]=1;
	for(int i=0;i<=35;i++)
    5bf8:	89 81       	ldd	r24, Y+1	; 0x01
    5bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    5bfc:	01 96       	adiw	r24, 0x01	; 1
    5bfe:	9a 83       	std	Y+2, r25	; 0x02
    5c00:	89 83       	std	Y+1, r24	; 0x01
    5c02:	89 81       	ldd	r24, Y+1	; 0x01
    5c04:	9a 81       	ldd	r25, Y+2	; 0x02
    5c06:	84 32       	cpi	r24, 0x24	; 36
    5c08:	91 05       	cpc	r25, r1
    5c0a:	0c f4       	brge	.+2      	; 0x5c0e <updaterelmat+0x682>
    5c0c:	a7 cf       	rjmp	.-178    	; 0x5b5c <updaterelmat+0x5d0>
	{
	 rel[6*x+y][i]=0;
     rel[i][6*x+y]=0;  
	}
    rel[6*x+y][6*x+y]=10;
    5c0e:	2d 81       	ldd	r18, Y+5	; 0x05
    5c10:	3e 81       	ldd	r19, Y+6	; 0x06
    5c12:	c9 01       	movw	r24, r18
    5c14:	88 0f       	add	r24, r24
    5c16:	99 1f       	adc	r25, r25
    5c18:	82 0f       	add	r24, r18
    5c1a:	93 1f       	adc	r25, r19
    5c1c:	88 0f       	add	r24, r24
    5c1e:	99 1f       	adc	r25, r25
    5c20:	9c 01       	movw	r18, r24
    5c22:	8b 81       	ldd	r24, Y+3	; 0x03
    5c24:	9c 81       	ldd	r25, Y+4	; 0x04
    5c26:	b9 01       	movw	r22, r18
    5c28:	68 0f       	add	r22, r24
    5c2a:	79 1f       	adc	r23, r25
    5c2c:	2d 81       	ldd	r18, Y+5	; 0x05
    5c2e:	3e 81       	ldd	r19, Y+6	; 0x06
    5c30:	c9 01       	movw	r24, r18
    5c32:	88 0f       	add	r24, r24
    5c34:	99 1f       	adc	r25, r25
    5c36:	82 0f       	add	r24, r18
    5c38:	93 1f       	adc	r25, r19
    5c3a:	88 0f       	add	r24, r24
    5c3c:	99 1f       	adc	r25, r25
    5c3e:	9c 01       	movw	r18, r24
    5c40:	8b 81       	ldd	r24, Y+3	; 0x03
    5c42:	9c 81       	ldd	r25, Y+4	; 0x04
    5c44:	a9 01       	movw	r20, r18
    5c46:	48 0f       	add	r20, r24
    5c48:	59 1f       	adc	r21, r25
    5c4a:	cb 01       	movw	r24, r22
    5c4c:	88 0f       	add	r24, r24
    5c4e:	99 1f       	adc	r25, r25
    5c50:	88 0f       	add	r24, r24
    5c52:	99 1f       	adc	r25, r25
    5c54:	9c 01       	movw	r18, r24
    5c56:	22 0f       	add	r18, r18
    5c58:	33 1f       	adc	r19, r19
    5c5a:	22 0f       	add	r18, r18
    5c5c:	33 1f       	adc	r19, r19
    5c5e:	22 0f       	add	r18, r18
    5c60:	33 1f       	adc	r19, r19
    5c62:	82 0f       	add	r24, r18
    5c64:	93 1f       	adc	r25, r19
    5c66:	84 0f       	add	r24, r20
    5c68:	95 1f       	adc	r25, r21
    5c6a:	88 0f       	add	r24, r24
    5c6c:	99 1f       	adc	r25, r25
    5c6e:	fc 01       	movw	r30, r24
    5c70:	ef 56       	subi	r30, 0x6F	; 111
    5c72:	fc 4f       	sbci	r31, 0xFC	; 252
    5c74:	8a e0       	ldi	r24, 0x0A	; 10
    5c76:	90 e0       	ldi	r25, 0x00	; 0
    5c78:	91 83       	std	Z+1, r25	; 0x01
    5c7a:	80 83       	st	Z, r24
	{     rel[6*(x-1) + y][6*x+y-1]=1;  
	      rel[6*x+y-1][6*(x-1) + y]=1;
	}
  
  for(int x=0;x<=5;x++)
  for(int y=0;y<=5;y++)
    5c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    5c80:	01 96       	adiw	r24, 0x01	; 1
    5c82:	9c 83       	std	Y+4, r25	; 0x04
    5c84:	8b 83       	std	Y+3, r24	; 0x03
    5c86:	8b 81       	ldd	r24, Y+3	; 0x03
    5c88:	9c 81       	ldd	r25, Y+4	; 0x04
    5c8a:	86 30       	cpi	r24, 0x06	; 6
    5c8c:	91 05       	cpc	r25, r1
    5c8e:	0c f4       	brge	.+2      	; 0x5c92 <updaterelmat+0x706>
    5c90:	11 cf       	rjmp	.-478    	; 0x5ab4 <updaterelmat+0x528>
	if(arr[x][y] == 3 || arr[x][y] ==7 )
	{     rel[6*(x-1) + y][6*x+y-1]=1;  
	      rel[6*x+y-1][6*(x-1) + y]=1;
	}
  
  for(int x=0;x<=5;x++)
    5c92:	8d 81       	ldd	r24, Y+5	; 0x05
    5c94:	9e 81       	ldd	r25, Y+6	; 0x06
    5c96:	01 96       	adiw	r24, 0x01	; 1
    5c98:	9e 83       	std	Y+6, r25	; 0x06
    5c9a:	8d 83       	std	Y+5, r24	; 0x05
    5c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    5c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    5ca0:	86 30       	cpi	r24, 0x06	; 6
    5ca2:	91 05       	cpc	r25, r1
    5ca4:	0c f4       	brge	.+2      	; 0x5ca8 <updaterelmat+0x71c>
    5ca6:	03 cf       	rjmp	.-506    	; 0x5aae <updaterelmat+0x522>
void updaterelmat()   // udating the relational matrix with arr values
{  clear();
  lcd_string("rel updating");

for(int x=0;x<=5;x++)
  for(int y=0;y<=5;y++)
    5ca8:	8f 81       	ldd	r24, Y+7	; 0x07
    5caa:	98 85       	ldd	r25, Y+8	; 0x08
    5cac:	01 96       	adiw	r24, 0x01	; 1
    5cae:	98 87       	std	Y+8, r25	; 0x08
    5cb0:	8f 83       	std	Y+7, r24	; 0x07
    5cb2:	8f 81       	ldd	r24, Y+7	; 0x07
    5cb4:	98 85       	ldd	r25, Y+8	; 0x08
    5cb6:	86 30       	cpi	r24, 0x06	; 6
    5cb8:	91 05       	cpc	r25, r1
    5cba:	0c f4       	brge	.+2      	; 0x5cbe <updaterelmat+0x732>
    5cbc:	7d cc       	rjmp	.-1798   	; 0x55b8 <updaterelmat+0x2c>

void updaterelmat()   // udating the relational matrix with arr values
{  clear();
  lcd_string("rel updating");

for(int x=0;x<=5;x++)
    5cbe:	89 85       	ldd	r24, Y+9	; 0x09
    5cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cc2:	01 96       	adiw	r24, 0x01	; 1
    5cc4:	9a 87       	std	Y+10, r25	; 0x0a
    5cc6:	89 87       	std	Y+9, r24	; 0x09
    5cc8:	89 85       	ldd	r24, Y+9	; 0x09
    5cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ccc:	86 30       	cpi	r24, 0x06	; 6
    5cce:	91 05       	cpc	r25, r1
    5cd0:	0c f4       	brge	.+2      	; 0x5cd4 <updaterelmat+0x748>
    5cd2:	6f cc       	rjmp	.-1826   	; 0x55b2 <updaterelmat+0x26>
    rel[6*x+y][6*x+y]=10;
	}
  }


}
    5cd4:	2a 96       	adiw	r28, 0x0a	; 10
    5cd6:	0f b6       	in	r0, 0x3f	; 63
    5cd8:	f8 94       	cli
    5cda:	de bf       	out	0x3e, r29	; 62
    5cdc:	0f be       	out	0x3f, r0	; 63
    5cde:	cd bf       	out	0x3d, r28	; 61
    5ce0:	cf 91       	pop	r28
    5ce2:	df 91       	pop	r29
    5ce4:	08 95       	ret

00005ce6 <main>:


void main()
{    init_devicesadc(); //adc
    5ce6:	0f 93       	push	r16
    5ce8:	1f 93       	push	r17
    5cea:	df 93       	push	r29
    5cec:	cf 93       	push	r28
    5cee:	cd b7       	in	r28, 0x3d	; 61
    5cf0:	de b7       	in	r29, 0x3e	; 62
    5cf2:	c9 58       	subi	r28, 0x89	; 137
    5cf4:	d0 40       	sbci	r29, 0x00	; 0
    5cf6:	0f b6       	in	r0, 0x3f	; 63
    5cf8:	f8 94       	cli
    5cfa:	de bf       	out	0x3e, r29	; 62
    5cfc:	0f be       	out	0x3f, r0	; 63
    5cfe:	cd bf       	out	0x3d, r28	; 61
    5d00:	0e 94 2d 06 	call	0xc5a	; 0xc5a <init_devicesadc>
    init_devices_lcd(); // LCD INITIALIZATION
    5d04:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <init_devices_lcd>
	lcd_set_4bit();
    5d08:	0e 94 4f 06 	call	0xc9e	; 0xc9e <lcd_set_4bit>
	lcd_init();
    5d0c:	0e 94 4e 0b 	call	0x169c	; 0x169c <lcd_init>
  init();
    5d10:	0e 94 28 14 	call	0x2850	; 0x2850 <init>
	init_devices_servo();  // SERVO INITIALIZATION
    5d14:	0e 94 e7 12 	call	0x25ce	; 0x25ce <init_devices_servo>
enable();
    5d18:	0e 94 c4 20 	call	0x4188	; 0x4188 <enable>
release();
    5d1c:	0e 94 12 13 	call	0x2624	; 0x2624 <release>
down();
    5d20:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <down>
//_delay_ms(2000);


//grab();
//_delay_ms(2000);
up();
    5d24:	0e 94 05 13 	call	0x260a	; 0x260a <up>
	init_devices_motor (); // l293d initialization
    5d28:	0e 94 1b 14 	call	0x2836	; 0x2836 <init_devices_motor>
	
	lcd_string("HIGH  MID  LOW ");
    5d2c:	8b e4       	ldi	r24, 0x4B	; 75
    5d2e:	92 e0       	ldi	r25, 0x02	; 2
    5d30:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>

//cli();

while(1)
  {
	HIGH=print_sensor(0);
    5d34:	80 e0       	ldi	r24, 0x00	; 0
    5d36:	0e 94 1a 06 	call	0xc34	; 0xc34 <print_sensor>
    5d3a:	90 93 82 03 	sts	0x0382, r25
    5d3e:	80 93 81 03 	sts	0x0381, r24
			
	MID=print_sensor(1);		
    5d42:	81 e0       	ldi	r24, 0x01	; 1
    5d44:	0e 94 1a 06 	call	0xc34	; 0xc34 <print_sensor>
    5d48:	90 93 8b 03 	sts	0x038B, r25
    5d4c:	80 93 8a 03 	sts	0x038A, r24
	LOW=print_sensor(2);
    5d50:	82 e0       	ldi	r24, 0x02	; 2
    5d52:	0e 94 1a 06 	call	0xc34	; 0xc34 <print_sensor>
    5d56:	90 93 cf 0d 	sts	0x0DCF, r25
    5d5a:	80 93 ce 0d 	sts	0x0DCE, r24
    lcd_number(2,1,HIGH,3);
    5d5e:	80 91 81 03 	lds	r24, 0x0381
    5d62:	90 91 82 03 	lds	r25, 0x0382
    5d66:	9c 01       	movw	r18, r24
    5d68:	82 e0       	ldi	r24, 0x02	; 2
    5d6a:	61 e0       	ldi	r22, 0x01	; 1
    5d6c:	a9 01       	movw	r20, r18
    5d6e:	23 e0       	ldi	r18, 0x03	; 3
    5d70:	30 e0       	ldi	r19, 0x00	; 0
    5d72:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <lcd_number>
    lcd_number(2,7,MID,3);
    5d76:	80 91 8a 03 	lds	r24, 0x038A
    5d7a:	90 91 8b 03 	lds	r25, 0x038B
    5d7e:	9c 01       	movw	r18, r24
    5d80:	82 e0       	ldi	r24, 0x02	; 2
    5d82:	67 e0       	ldi	r22, 0x07	; 7
    5d84:	a9 01       	movw	r20, r18
    5d86:	23 e0       	ldi	r18, 0x03	; 3
    5d88:	30 e0       	ldi	r19, 0x00	; 0
    5d8a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <lcd_number>
    lcd_number(2,13,LOW,3);
    5d8e:	80 91 ce 0d 	lds	r24, 0x0DCE
    5d92:	90 91 cf 0d 	lds	r25, 0x0DCF
    5d96:	9c 01       	movw	r18, r24
    5d98:	82 e0       	ldi	r24, 0x02	; 2
    5d9a:	6d e0       	ldi	r22, 0x0D	; 13
    5d9c:	a9 01       	movw	r20, r18
    5d9e:	23 e0       	ldi	r18, 0x03	; 3
    5da0:	30 e0       	ldi	r19, 0x00	; 0
    5da2:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <lcd_number>
//	if(!(PINH & 0b10000000))		 
     break;
	 
  }

	count=0;
    5da6:	10 92 0f 03 	sts	0x030F, r1
    5daa:	10 92 0e 03 	sts	0x030E, r1
	//turnleft(30);
//	blankmove();
//	line(11);
//	turnleft(tcount);
//	count=21;
count=0;
    5dae:	10 92 0f 03 	sts	0x030F, r1
    5db2:	10 92 0e 03 	sts	0x030E, r1
//eeprom_write_byte  (get,'X');



//lcd_wr_char(eeprom_read_byte(get) );
clear(); lcd_string("EEPROM clear ??");
    5db6:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <clear>
    5dba:	8b e5       	ldi	r24, 0x5B	; 91
    5dbc:	92 e0       	ldi	r25, 0x02	; 2
    5dbe:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>

	if(!(PINH & 0b00000010))		 
    5dc2:	e0 e0       	ldi	r30, 0x00	; 0
    5dc4:	f1 e0       	ldi	r31, 0x01	; 1
    5dc6:	80 81       	ld	r24, Z
    5dc8:	88 2f       	mov	r24, r24
    5dca:	90 e0       	ldi	r25, 0x00	; 0
    5dcc:	82 70       	andi	r24, 0x02	; 2
    5dce:	90 70       	andi	r25, 0x00	; 0
    5dd0:	00 97       	sbiw	r24, 0x00	; 0
    5dd2:	09 f0       	breq	.+2      	; 0x5dd6 <main+0xf0>
    5dd4:	e2 c0       	rjmp	.+452    	; 0x5f9a <main+0x2b4>
     {  clear(); lcd_string("Clearing EEPROM"); 
    5dd6:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <clear>
    5dda:	8b e6       	ldi	r24, 0x6B	; 107
    5ddc:	92 e0       	ldi	r25, 0x02	; 2
    5dde:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>
	 for(int x=0;x<=45;x++)
    5de2:	fe 01       	movw	r30, r28
    5de4:	e9 57       	subi	r30, 0x79	; 121
    5de6:	ff 4f       	sbci	r31, 0xFF	; 255
    5de8:	11 82       	std	Z+1, r1	; 0x01
    5dea:	10 82       	st	Z, r1
    5dec:	14 c0       	rjmp	.+40     	; 0x5e16 <main+0x130>
	 eeprom_write_byte  (x,'x');
    5dee:	fe 01       	movw	r30, r28
    5df0:	e9 57       	subi	r30, 0x79	; 121
    5df2:	ff 4f       	sbci	r31, 0xFF	; 255
    5df4:	80 81       	ld	r24, Z
    5df6:	91 81       	ldd	r25, Z+1	; 0x01
    5df8:	68 e7       	ldi	r22, 0x78	; 120
    5dfa:	0e 94 e5 38 	call	0x71ca	; 0x71ca <eeprom_write_byte>
//lcd_wr_char(eeprom_read_byte(get) );
clear(); lcd_string("EEPROM clear ??");

	if(!(PINH & 0b00000010))		 
     {  clear(); lcd_string("Clearing EEPROM"); 
	 for(int x=0;x<=45;x++)
    5dfe:	de 01       	movw	r26, r28
    5e00:	a9 57       	subi	r26, 0x79	; 121
    5e02:	bf 4f       	sbci	r27, 0xFF	; 255
    5e04:	fe 01       	movw	r30, r28
    5e06:	e9 57       	subi	r30, 0x79	; 121
    5e08:	ff 4f       	sbci	r31, 0xFF	; 255
    5e0a:	80 81       	ld	r24, Z
    5e0c:	91 81       	ldd	r25, Z+1	; 0x01
    5e0e:	01 96       	adiw	r24, 0x01	; 1
    5e10:	11 96       	adiw	r26, 0x01	; 1
    5e12:	9c 93       	st	X, r25
    5e14:	8e 93       	st	-X, r24
    5e16:	fe 01       	movw	r30, r28
    5e18:	e9 57       	subi	r30, 0x79	; 121
    5e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e1c:	80 81       	ld	r24, Z
    5e1e:	91 81       	ldd	r25, Z+1	; 0x01
    5e20:	8e 32       	cpi	r24, 0x2E	; 46
    5e22:	91 05       	cpc	r25, r1
    5e24:	24 f3       	brlt	.-56     	; 0x5dee <main+0x108>
	 eeprom_write_byte  (x,'x');
	  clear(); lcd_string("EEPROM CLEARED");_delay_ms(1000);
    5e26:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <clear>
    5e2a:	8b e7       	ldi	r24, 0x7B	; 123
    5e2c:	92 e0       	ldi	r25, 0x02	; 2
    5e2e:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>
    5e32:	fe 01       	movw	r30, r28
    5e34:	e5 58       	subi	r30, 0x85	; 133
    5e36:	ff 4f       	sbci	r31, 0xFF	; 255
    5e38:	80 e0       	ldi	r24, 0x00	; 0
    5e3a:	90 e0       	ldi	r25, 0x00	; 0
    5e3c:	aa e7       	ldi	r26, 0x7A	; 122
    5e3e:	b4 e4       	ldi	r27, 0x44	; 68
    5e40:	80 83       	st	Z, r24
    5e42:	91 83       	std	Z+1, r25	; 0x01
    5e44:	a2 83       	std	Z+2, r26	; 0x02
    5e46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e48:	8e 01       	movw	r16, r28
    5e4a:	09 58       	subi	r16, 0x89	; 137
    5e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    5e4e:	fe 01       	movw	r30, r28
    5e50:	e5 58       	subi	r30, 0x85	; 133
    5e52:	ff 4f       	sbci	r31, 0xFF	; 255
    5e54:	60 81       	ld	r22, Z
    5e56:	71 81       	ldd	r23, Z+1	; 0x01
    5e58:	82 81       	ldd	r24, Z+2	; 0x02
    5e5a:	93 81       	ldd	r25, Z+3	; 0x03
    5e5c:	26 e6       	ldi	r18, 0x66	; 102
    5e5e:	36 e6       	ldi	r19, 0x66	; 102
    5e60:	46 e6       	ldi	r20, 0x66	; 102
    5e62:	55 e4       	ldi	r21, 0x45	; 69
    5e64:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    5e68:	dc 01       	movw	r26, r24
    5e6a:	cb 01       	movw	r24, r22
    5e6c:	f8 01       	movw	r30, r16
    5e6e:	80 83       	st	Z, r24
    5e70:	91 83       	std	Z+1, r25	; 0x01
    5e72:	a2 83       	std	Z+2, r26	; 0x02
    5e74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5e76:	fe 01       	movw	r30, r28
    5e78:	e9 58       	subi	r30, 0x89	; 137
    5e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e7c:	60 81       	ld	r22, Z
    5e7e:	71 81       	ldd	r23, Z+1	; 0x01
    5e80:	82 81       	ldd	r24, Z+2	; 0x02
    5e82:	93 81       	ldd	r25, Z+3	; 0x03
    5e84:	20 e0       	ldi	r18, 0x00	; 0
    5e86:	30 e0       	ldi	r19, 0x00	; 0
    5e88:	40 e8       	ldi	r20, 0x80	; 128
    5e8a:	5f e3       	ldi	r21, 0x3F	; 63
    5e8c:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    5e90:	88 23       	and	r24, r24
    5e92:	44 f4       	brge	.+16     	; 0x5ea4 <main+0x1be>
		__ticks = 1;
    5e94:	fe 01       	movw	r30, r28
    5e96:	eb 58       	subi	r30, 0x8B	; 139
    5e98:	ff 4f       	sbci	r31, 0xFF	; 255
    5e9a:	81 e0       	ldi	r24, 0x01	; 1
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	91 83       	std	Z+1, r25	; 0x01
    5ea0:	80 83       	st	Z, r24
    5ea2:	64 c0       	rjmp	.+200    	; 0x5f6c <main+0x286>
	else if (__tmp > 65535)
    5ea4:	fe 01       	movw	r30, r28
    5ea6:	e9 58       	subi	r30, 0x89	; 137
    5ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eaa:	60 81       	ld	r22, Z
    5eac:	71 81       	ldd	r23, Z+1	; 0x01
    5eae:	82 81       	ldd	r24, Z+2	; 0x02
    5eb0:	93 81       	ldd	r25, Z+3	; 0x03
    5eb2:	20 e0       	ldi	r18, 0x00	; 0
    5eb4:	3f ef       	ldi	r19, 0xFF	; 255
    5eb6:	4f e7       	ldi	r20, 0x7F	; 127
    5eb8:	57 e4       	ldi	r21, 0x47	; 71
    5eba:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    5ebe:	18 16       	cp	r1, r24
    5ec0:	0c f0       	brlt	.+2      	; 0x5ec4 <main+0x1de>
    5ec2:	43 c0       	rjmp	.+134    	; 0x5f4a <main+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ec4:	fe 01       	movw	r30, r28
    5ec6:	e5 58       	subi	r30, 0x85	; 133
    5ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eca:	60 81       	ld	r22, Z
    5ecc:	71 81       	ldd	r23, Z+1	; 0x01
    5ece:	82 81       	ldd	r24, Z+2	; 0x02
    5ed0:	93 81       	ldd	r25, Z+3	; 0x03
    5ed2:	20 e0       	ldi	r18, 0x00	; 0
    5ed4:	30 e0       	ldi	r19, 0x00	; 0
    5ed6:	40 e2       	ldi	r20, 0x20	; 32
    5ed8:	51 e4       	ldi	r21, 0x41	; 65
    5eda:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    5ede:	dc 01       	movw	r26, r24
    5ee0:	cb 01       	movw	r24, r22
    5ee2:	8e 01       	movw	r16, r28
    5ee4:	0b 58       	subi	r16, 0x8B	; 139
    5ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ee8:	bc 01       	movw	r22, r24
    5eea:	cd 01       	movw	r24, r26
    5eec:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    5ef0:	dc 01       	movw	r26, r24
    5ef2:	cb 01       	movw	r24, r22
    5ef4:	f8 01       	movw	r30, r16
    5ef6:	91 83       	std	Z+1, r25	; 0x01
    5ef8:	80 83       	st	Z, r24
    5efa:	1f c0       	rjmp	.+62     	; 0x5f3a <main+0x254>
    5efc:	fe 01       	movw	r30, r28
    5efe:	ed 58       	subi	r30, 0x8D	; 141
    5f00:	ff 4f       	sbci	r31, 0xFF	; 255
    5f02:	80 e7       	ldi	r24, 0x70	; 112
    5f04:	91 e0       	ldi	r25, 0x01	; 1
    5f06:	91 83       	std	Z+1, r25	; 0x01
    5f08:	80 83       	st	Z, r24
    5f0a:	fe 01       	movw	r30, r28
    5f0c:	ed 58       	subi	r30, 0x8D	; 141
    5f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f10:	80 81       	ld	r24, Z
    5f12:	91 81       	ldd	r25, Z+1	; 0x01
    5f14:	01 97       	sbiw	r24, 0x01	; 1
    5f16:	f1 f7       	brne	.-4      	; 0x5f14 <main+0x22e>
    5f18:	fe 01       	movw	r30, r28
    5f1a:	ed 58       	subi	r30, 0x8D	; 141
    5f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f1e:	91 83       	std	Z+1, r25	; 0x01
    5f20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f22:	de 01       	movw	r26, r28
    5f24:	ab 58       	subi	r26, 0x8B	; 139
    5f26:	bf 4f       	sbci	r27, 0xFF	; 255
    5f28:	fe 01       	movw	r30, r28
    5f2a:	eb 58       	subi	r30, 0x8B	; 139
    5f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f2e:	80 81       	ld	r24, Z
    5f30:	91 81       	ldd	r25, Z+1	; 0x01
    5f32:	01 97       	sbiw	r24, 0x01	; 1
    5f34:	11 96       	adiw	r26, 0x01	; 1
    5f36:	9c 93       	st	X, r25
    5f38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f3a:	fe 01       	movw	r30, r28
    5f3c:	eb 58       	subi	r30, 0x8B	; 139
    5f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f40:	80 81       	ld	r24, Z
    5f42:	91 81       	ldd	r25, Z+1	; 0x01
    5f44:	00 97       	sbiw	r24, 0x00	; 0
    5f46:	d1 f6       	brne	.-76     	; 0x5efc <main+0x216>
    5f48:	28 c0       	rjmp	.+80     	; 0x5f9a <main+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f4a:	8e 01       	movw	r16, r28
    5f4c:	0b 58       	subi	r16, 0x8B	; 139
    5f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    5f50:	fe 01       	movw	r30, r28
    5f52:	e9 58       	subi	r30, 0x89	; 137
    5f54:	ff 4f       	sbci	r31, 0xFF	; 255
    5f56:	60 81       	ld	r22, Z
    5f58:	71 81       	ldd	r23, Z+1	; 0x01
    5f5a:	82 81       	ldd	r24, Z+2	; 0x02
    5f5c:	93 81       	ldd	r25, Z+3	; 0x03
    5f5e:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    5f62:	dc 01       	movw	r26, r24
    5f64:	cb 01       	movw	r24, r22
    5f66:	f8 01       	movw	r30, r16
    5f68:	91 83       	std	Z+1, r25	; 0x01
    5f6a:	80 83       	st	Z, r24
    5f6c:	de 01       	movw	r26, r28
    5f6e:	af 58       	subi	r26, 0x8F	; 143
    5f70:	bf 4f       	sbci	r27, 0xFF	; 255
    5f72:	fe 01       	movw	r30, r28
    5f74:	eb 58       	subi	r30, 0x8B	; 139
    5f76:	ff 4f       	sbci	r31, 0xFF	; 255
    5f78:	80 81       	ld	r24, Z
    5f7a:	91 81       	ldd	r25, Z+1	; 0x01
    5f7c:	11 96       	adiw	r26, 0x01	; 1
    5f7e:	9c 93       	st	X, r25
    5f80:	8e 93       	st	-X, r24
    5f82:	fe 01       	movw	r30, r28
    5f84:	ef 58       	subi	r30, 0x8F	; 143
    5f86:	ff 4f       	sbci	r31, 0xFF	; 255
    5f88:	80 81       	ld	r24, Z
    5f8a:	91 81       	ldd	r25, Z+1	; 0x01
    5f8c:	01 97       	sbiw	r24, 0x01	; 1
    5f8e:	f1 f7       	brne	.-4      	; 0x5f8c <main+0x2a6>
    5f90:	fe 01       	movw	r30, r28
    5f92:	ef 58       	subi	r30, 0x8F	; 143
    5f94:	ff 4f       	sbci	r31, 0xFF	; 255
    5f96:	91 83       	std	Z+1, r25	; 0x01
    5f98:	80 83       	st	Z, r24
	 
	  }
	  if(!(PINH & 0b00000001))
    5f9a:	e0 e0       	ldi	r30, 0x00	; 0
    5f9c:	f1 e0       	ldi	r31, 0x01	; 1
    5f9e:	80 81       	ld	r24, Z
    5fa0:	88 2f       	mov	r24, r24
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	81 70       	andi	r24, 0x01	; 1
    5fa6:	90 70       	andi	r25, 0x00	; 0
    5fa8:	00 97       	sbiw	r24, 0x00	; 0
    5faa:	09 f0       	breq	.+2      	; 0x5fae <main+0x2c8>
    5fac:	b9 c0       	rjmp	.+370    	; 0x6120 <main+0x43a>
	 { clear(); lcd_string("EXITING WITHOUT CLEARING");_delay_ms(1000);}
    5fae:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <clear>
    5fb2:	8a e8       	ldi	r24, 0x8A	; 138
    5fb4:	92 e0       	ldi	r25, 0x02	; 2
    5fb6:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>
    5fba:	fe 01       	movw	r30, r28
    5fbc:	e3 59       	subi	r30, 0x93	; 147
    5fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    5fc0:	80 e0       	ldi	r24, 0x00	; 0
    5fc2:	90 e0       	ldi	r25, 0x00	; 0
    5fc4:	aa e7       	ldi	r26, 0x7A	; 122
    5fc6:	b4 e4       	ldi	r27, 0x44	; 68
    5fc8:	80 83       	st	Z, r24
    5fca:	91 83       	std	Z+1, r25	; 0x01
    5fcc:	a2 83       	std	Z+2, r26	; 0x02
    5fce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fd0:	8e 01       	movw	r16, r28
    5fd2:	07 59       	subi	r16, 0x97	; 151
    5fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    5fd6:	fe 01       	movw	r30, r28
    5fd8:	e3 59       	subi	r30, 0x93	; 147
    5fda:	ff 4f       	sbci	r31, 0xFF	; 255
    5fdc:	60 81       	ld	r22, Z
    5fde:	71 81       	ldd	r23, Z+1	; 0x01
    5fe0:	82 81       	ldd	r24, Z+2	; 0x02
    5fe2:	93 81       	ldd	r25, Z+3	; 0x03
    5fe4:	26 e6       	ldi	r18, 0x66	; 102
    5fe6:	36 e6       	ldi	r19, 0x66	; 102
    5fe8:	46 e6       	ldi	r20, 0x66	; 102
    5fea:	55 e4       	ldi	r21, 0x45	; 69
    5fec:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    5ff0:	dc 01       	movw	r26, r24
    5ff2:	cb 01       	movw	r24, r22
    5ff4:	f8 01       	movw	r30, r16
    5ff6:	80 83       	st	Z, r24
    5ff8:	91 83       	std	Z+1, r25	; 0x01
    5ffa:	a2 83       	std	Z+2, r26	; 0x02
    5ffc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5ffe:	fe 01       	movw	r30, r28
    6000:	e7 59       	subi	r30, 0x97	; 151
    6002:	ff 4f       	sbci	r31, 0xFF	; 255
    6004:	60 81       	ld	r22, Z
    6006:	71 81       	ldd	r23, Z+1	; 0x01
    6008:	82 81       	ldd	r24, Z+2	; 0x02
    600a:	93 81       	ldd	r25, Z+3	; 0x03
    600c:	20 e0       	ldi	r18, 0x00	; 0
    600e:	30 e0       	ldi	r19, 0x00	; 0
    6010:	40 e8       	ldi	r20, 0x80	; 128
    6012:	5f e3       	ldi	r21, 0x3F	; 63
    6014:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    6018:	88 23       	and	r24, r24
    601a:	44 f4       	brge	.+16     	; 0x602c <main+0x346>
		__ticks = 1;
    601c:	fe 01       	movw	r30, r28
    601e:	e9 59       	subi	r30, 0x99	; 153
    6020:	ff 4f       	sbci	r31, 0xFF	; 255
    6022:	81 e0       	ldi	r24, 0x01	; 1
    6024:	90 e0       	ldi	r25, 0x00	; 0
    6026:	91 83       	std	Z+1, r25	; 0x01
    6028:	80 83       	st	Z, r24
    602a:	64 c0       	rjmp	.+200    	; 0x60f4 <main+0x40e>
	else if (__tmp > 65535)
    602c:	fe 01       	movw	r30, r28
    602e:	e7 59       	subi	r30, 0x97	; 151
    6030:	ff 4f       	sbci	r31, 0xFF	; 255
    6032:	60 81       	ld	r22, Z
    6034:	71 81       	ldd	r23, Z+1	; 0x01
    6036:	82 81       	ldd	r24, Z+2	; 0x02
    6038:	93 81       	ldd	r25, Z+3	; 0x03
    603a:	20 e0       	ldi	r18, 0x00	; 0
    603c:	3f ef       	ldi	r19, 0xFF	; 255
    603e:	4f e7       	ldi	r20, 0x7F	; 127
    6040:	57 e4       	ldi	r21, 0x47	; 71
    6042:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    6046:	18 16       	cp	r1, r24
    6048:	0c f0       	brlt	.+2      	; 0x604c <main+0x366>
    604a:	43 c0       	rjmp	.+134    	; 0x60d2 <main+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    604c:	fe 01       	movw	r30, r28
    604e:	e3 59       	subi	r30, 0x93	; 147
    6050:	ff 4f       	sbci	r31, 0xFF	; 255
    6052:	60 81       	ld	r22, Z
    6054:	71 81       	ldd	r23, Z+1	; 0x01
    6056:	82 81       	ldd	r24, Z+2	; 0x02
    6058:	93 81       	ldd	r25, Z+3	; 0x03
    605a:	20 e0       	ldi	r18, 0x00	; 0
    605c:	30 e0       	ldi	r19, 0x00	; 0
    605e:	40 e2       	ldi	r20, 0x20	; 32
    6060:	51 e4       	ldi	r21, 0x41	; 65
    6062:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    6066:	dc 01       	movw	r26, r24
    6068:	cb 01       	movw	r24, r22
    606a:	8e 01       	movw	r16, r28
    606c:	09 59       	subi	r16, 0x99	; 153
    606e:	1f 4f       	sbci	r17, 0xFF	; 255
    6070:	bc 01       	movw	r22, r24
    6072:	cd 01       	movw	r24, r26
    6074:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    6078:	dc 01       	movw	r26, r24
    607a:	cb 01       	movw	r24, r22
    607c:	f8 01       	movw	r30, r16
    607e:	91 83       	std	Z+1, r25	; 0x01
    6080:	80 83       	st	Z, r24
    6082:	1f c0       	rjmp	.+62     	; 0x60c2 <main+0x3dc>
    6084:	fe 01       	movw	r30, r28
    6086:	eb 59       	subi	r30, 0x9B	; 155
    6088:	ff 4f       	sbci	r31, 0xFF	; 255
    608a:	80 e7       	ldi	r24, 0x70	; 112
    608c:	91 e0       	ldi	r25, 0x01	; 1
    608e:	91 83       	std	Z+1, r25	; 0x01
    6090:	80 83       	st	Z, r24
    6092:	fe 01       	movw	r30, r28
    6094:	eb 59       	subi	r30, 0x9B	; 155
    6096:	ff 4f       	sbci	r31, 0xFF	; 255
    6098:	80 81       	ld	r24, Z
    609a:	91 81       	ldd	r25, Z+1	; 0x01
    609c:	01 97       	sbiw	r24, 0x01	; 1
    609e:	f1 f7       	brne	.-4      	; 0x609c <main+0x3b6>
    60a0:	fe 01       	movw	r30, r28
    60a2:	eb 59       	subi	r30, 0x9B	; 155
    60a4:	ff 4f       	sbci	r31, 0xFF	; 255
    60a6:	91 83       	std	Z+1, r25	; 0x01
    60a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60aa:	de 01       	movw	r26, r28
    60ac:	a9 59       	subi	r26, 0x99	; 153
    60ae:	bf 4f       	sbci	r27, 0xFF	; 255
    60b0:	fe 01       	movw	r30, r28
    60b2:	e9 59       	subi	r30, 0x99	; 153
    60b4:	ff 4f       	sbci	r31, 0xFF	; 255
    60b6:	80 81       	ld	r24, Z
    60b8:	91 81       	ldd	r25, Z+1	; 0x01
    60ba:	01 97       	sbiw	r24, 0x01	; 1
    60bc:	11 96       	adiw	r26, 0x01	; 1
    60be:	9c 93       	st	X, r25
    60c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60c2:	fe 01       	movw	r30, r28
    60c4:	e9 59       	subi	r30, 0x99	; 153
    60c6:	ff 4f       	sbci	r31, 0xFF	; 255
    60c8:	80 81       	ld	r24, Z
    60ca:	91 81       	ldd	r25, Z+1	; 0x01
    60cc:	00 97       	sbiw	r24, 0x00	; 0
    60ce:	d1 f6       	brne	.-76     	; 0x6084 <main+0x39e>
    60d0:	27 c0       	rjmp	.+78     	; 0x6120 <main+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60d2:	8e 01       	movw	r16, r28
    60d4:	09 59       	subi	r16, 0x99	; 153
    60d6:	1f 4f       	sbci	r17, 0xFF	; 255
    60d8:	fe 01       	movw	r30, r28
    60da:	e7 59       	subi	r30, 0x97	; 151
    60dc:	ff 4f       	sbci	r31, 0xFF	; 255
    60de:	60 81       	ld	r22, Z
    60e0:	71 81       	ldd	r23, Z+1	; 0x01
    60e2:	82 81       	ldd	r24, Z+2	; 0x02
    60e4:	93 81       	ldd	r25, Z+3	; 0x03
    60e6:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    60ea:	dc 01       	movw	r26, r24
    60ec:	cb 01       	movw	r24, r22
    60ee:	f8 01       	movw	r30, r16
    60f0:	91 83       	std	Z+1, r25	; 0x01
    60f2:	80 83       	st	Z, r24
    60f4:	de 01       	movw	r26, r28
    60f6:	ad 59       	subi	r26, 0x9D	; 157
    60f8:	bf 4f       	sbci	r27, 0xFF	; 255
    60fa:	fe 01       	movw	r30, r28
    60fc:	e9 59       	subi	r30, 0x99	; 153
    60fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6100:	80 81       	ld	r24, Z
    6102:	91 81       	ldd	r25, Z+1	; 0x01
    6104:	8d 93       	st	X+, r24
    6106:	9c 93       	st	X, r25
    6108:	fe 01       	movw	r30, r28
    610a:	ed 59       	subi	r30, 0x9D	; 157
    610c:	ff 4f       	sbci	r31, 0xFF	; 255
    610e:	80 81       	ld	r24, Z
    6110:	91 81       	ldd	r25, Z+1	; 0x01
    6112:	01 97       	sbiw	r24, 0x01	; 1
    6114:	f1 f7       	brne	.-4      	; 0x6112 <main+0x42c>
    6116:	fe 01       	movw	r30, r28
    6118:	ed 59       	subi	r30, 0x9D	; 157
    611a:	ff 4f       	sbci	r31, 0xFF	; 255
    611c:	91 83       	std	Z+1, r25	; 0x01
    611e:	80 83       	st	Z, r24
	 
	 
char st;
st=eeprom_read_byte(0);
    6120:	80 e0       	ldi	r24, 0x00	; 0
    6122:	90 e0       	ldi	r25, 0x00	; 0
    6124:	0e 94 a5 2a 	call	0x554a	; 0x554a <eeprom_read_byte>
    6128:	fe 01       	movw	r30, r28
    612a:	e7 57       	subi	r30, 0x77	; 119
    612c:	ff 4f       	sbci	r31, 0xFF	; 255
    612e:	80 83       	st	Z, r24
if(st=='A')
    6130:	fe 01       	movw	r30, r28
    6132:	e7 57       	subi	r30, 0x77	; 119
    6134:	ff 4f       	sbci	r31, 0xFF	; 255
    6136:	80 81       	ld	r24, Z
    6138:	81 34       	cpi	r24, 0x41	; 65
    613a:	09 f0       	breq	.+2      	; 0x613e <main+0x458>
    613c:	ca c4       	rjmp	.+2452   	; 0x6ad2 <main+0xdec>
{
clear(); lcd_string(" DATA FOUND..... ");
    613e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <clear>
    6142:	83 ea       	ldi	r24, 0xA3	; 163
    6144:	92 e0       	ldi	r25, 0x02	; 2
    6146:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>
st=eeprom_read_byte(1);
    614a:	81 e0       	ldi	r24, 0x01	; 1
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	0e 94 a5 2a 	call	0x554a	; 0x554a <eeprom_read_byte>
    6152:	fe 01       	movw	r30, r28
    6154:	e7 57       	subi	r30, 0x77	; 119
    6156:	ff 4f       	sbci	r31, 0xFF	; 255
    6158:	80 83       	st	Z, r24

if(st!='B') //keep 1st block
    615a:	fe 01       	movw	r30, r28
    615c:	e7 57       	subi	r30, 0x77	; 119
    615e:	ff 4f       	sbci	r31, 0xFF	; 255
    6160:	80 81       	ld	r24, Z
    6162:	82 34       	cpi	r24, 0x42	; 66
    6164:	09 f4       	brne	.+2      	; 0x6168 <main+0x482>
    6166:	98 c2       	rjmp	.+1328   	; 0x6698 <main+0x9b2>
{  
readfromeeprom();
    6168:	0e 94 7e 29 	call	0x52fc	; 0x52fc <readfromeeprom>
set_matvalues();
    616c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <set_matvalues>
prepare4new();
    6170:	0e 94 91 00 	call	0x122	; 0x122 <prepare4new>
updaterelmat();
    6174:	0e 94 c6 2a 	call	0x558c	; 0x558c <updaterelmat>
lcd_cursor(2,1);
    6178:	82 e0       	ldi	r24, 0x02	; 2
    617a:	61 e0       	ldi	r22, 0x01	; 1
    617c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <lcd_cursor>
lcd_string("done");
    6180:	85 eb       	ldi	r24, 0xB5	; 181
    6182:	92 e0       	ldi	r25, 0x02	; 2
    6184:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>
solve(0,5);
    6188:	80 e0       	ldi	r24, 0x00	; 0
    618a:	90 e0       	ldi	r25, 0x00	; 0
    618c:	65 e0       	ldi	r22, 0x05	; 5
    618e:	70 e0       	ldi	r23, 0x00	; 0
    6190:	0e 94 ba 03 	call	0x774	; 0x774 <solve>
lcd_string("done solving");
    6194:	8a eb       	ldi	r24, 0xBA	; 186
    6196:	92 e0       	ldi	r25, 0x02	; 2
    6198:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>
clear();
    619c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <clear>
int i;
for( i=top;i>=0;i--)
    61a0:	fe 01       	movw	r30, r28
    61a2:	eb 57       	subi	r30, 0x7B	; 123
    61a4:	ff 4f       	sbci	r31, 0xFF	; 255
    61a6:	80 91 8d 03 	lds	r24, 0x038D
    61aa:	90 91 8e 03 	lds	r25, 0x038E
    61ae:	91 83       	std	Z+1, r25	; 0x01
    61b0:	80 83       	st	Z, r24
    61b2:	20 c0       	rjmp	.+64     	; 0x61f4 <main+0x50e>
  { lcd_number(1,1,proc[i],2);
    61b4:	fe 01       	movw	r30, r28
    61b6:	eb 57       	subi	r30, 0x7B	; 123
    61b8:	ff 4f       	sbci	r31, 0xFF	; 255
    61ba:	80 81       	ld	r24, Z
    61bc:	91 81       	ldd	r25, Z+1	; 0x01
    61be:	88 0f       	add	r24, r24
    61c0:	99 1f       	adc	r25, r25
    61c2:	fc 01       	movw	r30, r24
    61c4:	e0 5f       	subi	r30, 0xF0	; 240
    61c6:	fc 4f       	sbci	r31, 0xFC	; 252
    61c8:	80 81       	ld	r24, Z
    61ca:	91 81       	ldd	r25, Z+1	; 0x01
    61cc:	9c 01       	movw	r18, r24
    61ce:	81 e0       	ldi	r24, 0x01	; 1
    61d0:	61 e0       	ldi	r22, 0x01	; 1
    61d2:	a9 01       	movw	r20, r18
    61d4:	22 e0       	ldi	r18, 0x02	; 2
    61d6:	30 e0       	ldi	r19, 0x00	; 0
    61d8:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <lcd_number>
lcd_string("done");
solve(0,5);
lcd_string("done solving");
clear();
int i;
for( i=top;i>=0;i--)
    61dc:	de 01       	movw	r26, r28
    61de:	ab 57       	subi	r26, 0x7B	; 123
    61e0:	bf 4f       	sbci	r27, 0xFF	; 255
    61e2:	fe 01       	movw	r30, r28
    61e4:	eb 57       	subi	r30, 0x7B	; 123
    61e6:	ff 4f       	sbci	r31, 0xFF	; 255
    61e8:	80 81       	ld	r24, Z
    61ea:	91 81       	ldd	r25, Z+1	; 0x01
    61ec:	01 97       	sbiw	r24, 0x01	; 1
    61ee:	11 96       	adiw	r26, 0x01	; 1
    61f0:	9c 93       	st	X, r25
    61f2:	8e 93       	st	-X, r24
    61f4:	fe 01       	movw	r30, r28
    61f6:	eb 57       	subi	r30, 0x7B	; 123
    61f8:	ff 4f       	sbci	r31, 0xFF	; 255
    61fa:	80 81       	ld	r24, Z
    61fc:	91 81       	ldd	r25, Z+1	; 0x01
    61fe:	99 23       	and	r25, r25
    6200:	cc f6       	brge	.-78     	; 0x61b4 <main+0x4ce>
  { lcd_number(1,1,proc[i],2);
  //_delay_ms(1000);
}
line(-1);
    6202:	8f ef       	ldi	r24, 0xFF	; 255
    6204:	9f ef       	ldi	r25, 0xFF	; 255
    6206:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
down();
    620a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <down>
    620e:	fe 01       	movw	r30, r28
    6210:	e1 5a       	subi	r30, 0xA1	; 161
    6212:	ff 4f       	sbci	r31, 0xFF	; 255
    6214:	80 e0       	ldi	r24, 0x00	; 0
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	a8 e4       	ldi	r26, 0x48	; 72
    621a:	b3 e4       	ldi	r27, 0x43	; 67
    621c:	80 83       	st	Z, r24
    621e:	91 83       	std	Z+1, r25	; 0x01
    6220:	a2 83       	std	Z+2, r26	; 0x02
    6222:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6224:	8e 01       	movw	r16, r28
    6226:	05 5a       	subi	r16, 0xA5	; 165
    6228:	1f 4f       	sbci	r17, 0xFF	; 255
    622a:	fe 01       	movw	r30, r28
    622c:	e1 5a       	subi	r30, 0xA1	; 161
    622e:	ff 4f       	sbci	r31, 0xFF	; 255
    6230:	60 81       	ld	r22, Z
    6232:	71 81       	ldd	r23, Z+1	; 0x01
    6234:	82 81       	ldd	r24, Z+2	; 0x02
    6236:	93 81       	ldd	r25, Z+3	; 0x03
    6238:	26 e6       	ldi	r18, 0x66	; 102
    623a:	36 e6       	ldi	r19, 0x66	; 102
    623c:	46 e6       	ldi	r20, 0x66	; 102
    623e:	55 e4       	ldi	r21, 0x45	; 69
    6240:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    6244:	dc 01       	movw	r26, r24
    6246:	cb 01       	movw	r24, r22
    6248:	f8 01       	movw	r30, r16
    624a:	80 83       	st	Z, r24
    624c:	91 83       	std	Z+1, r25	; 0x01
    624e:	a2 83       	std	Z+2, r26	; 0x02
    6250:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6252:	fe 01       	movw	r30, r28
    6254:	e5 5a       	subi	r30, 0xA5	; 165
    6256:	ff 4f       	sbci	r31, 0xFF	; 255
    6258:	60 81       	ld	r22, Z
    625a:	71 81       	ldd	r23, Z+1	; 0x01
    625c:	82 81       	ldd	r24, Z+2	; 0x02
    625e:	93 81       	ldd	r25, Z+3	; 0x03
    6260:	20 e0       	ldi	r18, 0x00	; 0
    6262:	30 e0       	ldi	r19, 0x00	; 0
    6264:	40 e8       	ldi	r20, 0x80	; 128
    6266:	5f e3       	ldi	r21, 0x3F	; 63
    6268:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    626c:	88 23       	and	r24, r24
    626e:	44 f4       	brge	.+16     	; 0x6280 <main+0x59a>
		__ticks = 1;
    6270:	fe 01       	movw	r30, r28
    6272:	e7 5a       	subi	r30, 0xA7	; 167
    6274:	ff 4f       	sbci	r31, 0xFF	; 255
    6276:	81 e0       	ldi	r24, 0x01	; 1
    6278:	90 e0       	ldi	r25, 0x00	; 0
    627a:	91 83       	std	Z+1, r25	; 0x01
    627c:	80 83       	st	Z, r24
    627e:	64 c0       	rjmp	.+200    	; 0x6348 <main+0x662>
	else if (__tmp > 65535)
    6280:	fe 01       	movw	r30, r28
    6282:	e5 5a       	subi	r30, 0xA5	; 165
    6284:	ff 4f       	sbci	r31, 0xFF	; 255
    6286:	60 81       	ld	r22, Z
    6288:	71 81       	ldd	r23, Z+1	; 0x01
    628a:	82 81       	ldd	r24, Z+2	; 0x02
    628c:	93 81       	ldd	r25, Z+3	; 0x03
    628e:	20 e0       	ldi	r18, 0x00	; 0
    6290:	3f ef       	ldi	r19, 0xFF	; 255
    6292:	4f e7       	ldi	r20, 0x7F	; 127
    6294:	57 e4       	ldi	r21, 0x47	; 71
    6296:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    629a:	18 16       	cp	r1, r24
    629c:	0c f0       	brlt	.+2      	; 0x62a0 <main+0x5ba>
    629e:	43 c0       	rjmp	.+134    	; 0x6326 <main+0x640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62a0:	fe 01       	movw	r30, r28
    62a2:	e1 5a       	subi	r30, 0xA1	; 161
    62a4:	ff 4f       	sbci	r31, 0xFF	; 255
    62a6:	60 81       	ld	r22, Z
    62a8:	71 81       	ldd	r23, Z+1	; 0x01
    62aa:	82 81       	ldd	r24, Z+2	; 0x02
    62ac:	93 81       	ldd	r25, Z+3	; 0x03
    62ae:	20 e0       	ldi	r18, 0x00	; 0
    62b0:	30 e0       	ldi	r19, 0x00	; 0
    62b2:	40 e2       	ldi	r20, 0x20	; 32
    62b4:	51 e4       	ldi	r21, 0x41	; 65
    62b6:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    62ba:	dc 01       	movw	r26, r24
    62bc:	cb 01       	movw	r24, r22
    62be:	8e 01       	movw	r16, r28
    62c0:	07 5a       	subi	r16, 0xA7	; 167
    62c2:	1f 4f       	sbci	r17, 0xFF	; 255
    62c4:	bc 01       	movw	r22, r24
    62c6:	cd 01       	movw	r24, r26
    62c8:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    62cc:	dc 01       	movw	r26, r24
    62ce:	cb 01       	movw	r24, r22
    62d0:	f8 01       	movw	r30, r16
    62d2:	91 83       	std	Z+1, r25	; 0x01
    62d4:	80 83       	st	Z, r24
    62d6:	1f c0       	rjmp	.+62     	; 0x6316 <main+0x630>
    62d8:	fe 01       	movw	r30, r28
    62da:	e9 5a       	subi	r30, 0xA9	; 169
    62dc:	ff 4f       	sbci	r31, 0xFF	; 255
    62de:	80 e7       	ldi	r24, 0x70	; 112
    62e0:	91 e0       	ldi	r25, 0x01	; 1
    62e2:	91 83       	std	Z+1, r25	; 0x01
    62e4:	80 83       	st	Z, r24
    62e6:	fe 01       	movw	r30, r28
    62e8:	e9 5a       	subi	r30, 0xA9	; 169
    62ea:	ff 4f       	sbci	r31, 0xFF	; 255
    62ec:	80 81       	ld	r24, Z
    62ee:	91 81       	ldd	r25, Z+1	; 0x01
    62f0:	01 97       	sbiw	r24, 0x01	; 1
    62f2:	f1 f7       	brne	.-4      	; 0x62f0 <main+0x60a>
    62f4:	fe 01       	movw	r30, r28
    62f6:	e9 5a       	subi	r30, 0xA9	; 169
    62f8:	ff 4f       	sbci	r31, 0xFF	; 255
    62fa:	91 83       	std	Z+1, r25	; 0x01
    62fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62fe:	de 01       	movw	r26, r28
    6300:	a7 5a       	subi	r26, 0xA7	; 167
    6302:	bf 4f       	sbci	r27, 0xFF	; 255
    6304:	fe 01       	movw	r30, r28
    6306:	e7 5a       	subi	r30, 0xA7	; 167
    6308:	ff 4f       	sbci	r31, 0xFF	; 255
    630a:	80 81       	ld	r24, Z
    630c:	91 81       	ldd	r25, Z+1	; 0x01
    630e:	01 97       	sbiw	r24, 0x01	; 1
    6310:	11 96       	adiw	r26, 0x01	; 1
    6312:	9c 93       	st	X, r25
    6314:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6316:	fe 01       	movw	r30, r28
    6318:	e7 5a       	subi	r30, 0xA7	; 167
    631a:	ff 4f       	sbci	r31, 0xFF	; 255
    631c:	80 81       	ld	r24, Z
    631e:	91 81       	ldd	r25, Z+1	; 0x01
    6320:	00 97       	sbiw	r24, 0x00	; 0
    6322:	d1 f6       	brne	.-76     	; 0x62d8 <main+0x5f2>
    6324:	27 c0       	rjmp	.+78     	; 0x6374 <main+0x68e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6326:	8e 01       	movw	r16, r28
    6328:	07 5a       	subi	r16, 0xA7	; 167
    632a:	1f 4f       	sbci	r17, 0xFF	; 255
    632c:	fe 01       	movw	r30, r28
    632e:	e5 5a       	subi	r30, 0xA5	; 165
    6330:	ff 4f       	sbci	r31, 0xFF	; 255
    6332:	60 81       	ld	r22, Z
    6334:	71 81       	ldd	r23, Z+1	; 0x01
    6336:	82 81       	ldd	r24, Z+2	; 0x02
    6338:	93 81       	ldd	r25, Z+3	; 0x03
    633a:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    633e:	dc 01       	movw	r26, r24
    6340:	cb 01       	movw	r24, r22
    6342:	f8 01       	movw	r30, r16
    6344:	91 83       	std	Z+1, r25	; 0x01
    6346:	80 83       	st	Z, r24
    6348:	de 01       	movw	r26, r28
    634a:	ab 5a       	subi	r26, 0xAB	; 171
    634c:	bf 4f       	sbci	r27, 0xFF	; 255
    634e:	fe 01       	movw	r30, r28
    6350:	e7 5a       	subi	r30, 0xA7	; 167
    6352:	ff 4f       	sbci	r31, 0xFF	; 255
    6354:	80 81       	ld	r24, Z
    6356:	91 81       	ldd	r25, Z+1	; 0x01
    6358:	8d 93       	st	X+, r24
    635a:	9c 93       	st	X, r25
    635c:	fe 01       	movw	r30, r28
    635e:	eb 5a       	subi	r30, 0xAB	; 171
    6360:	ff 4f       	sbci	r31, 0xFF	; 255
    6362:	80 81       	ld	r24, Z
    6364:	91 81       	ldd	r25, Z+1	; 0x01
    6366:	01 97       	sbiw	r24, 0x01	; 1
    6368:	f1 f7       	brne	.-4      	; 0x6366 <main+0x680>
    636a:	fe 01       	movw	r30, r28
    636c:	eb 5a       	subi	r30, 0xAB	; 171
    636e:	ff 4f       	sbci	r31, 0xFF	; 255
    6370:	91 83       	std	Z+1, r25	; 0x01
    6372:	80 83       	st	Z, r24
_delay_ms(200);
grab();
    6374:	0e 94 1f 13 	call	0x263e	; 0x263e <grab>
    6378:	fe 01       	movw	r30, r28
    637a:	ef 5a       	subi	r30, 0xAF	; 175
    637c:	ff 4f       	sbci	r31, 0xFF	; 255
    637e:	80 e0       	ldi	r24, 0x00	; 0
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	a8 e4       	ldi	r26, 0x48	; 72
    6384:	b3 e4       	ldi	r27, 0x43	; 67
    6386:	80 83       	st	Z, r24
    6388:	91 83       	std	Z+1, r25	; 0x01
    638a:	a2 83       	std	Z+2, r26	; 0x02
    638c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    638e:	8e 01       	movw	r16, r28
    6390:	03 5b       	subi	r16, 0xB3	; 179
    6392:	1f 4f       	sbci	r17, 0xFF	; 255
    6394:	fe 01       	movw	r30, r28
    6396:	ef 5a       	subi	r30, 0xAF	; 175
    6398:	ff 4f       	sbci	r31, 0xFF	; 255
    639a:	60 81       	ld	r22, Z
    639c:	71 81       	ldd	r23, Z+1	; 0x01
    639e:	82 81       	ldd	r24, Z+2	; 0x02
    63a0:	93 81       	ldd	r25, Z+3	; 0x03
    63a2:	26 e6       	ldi	r18, 0x66	; 102
    63a4:	36 e6       	ldi	r19, 0x66	; 102
    63a6:	46 e6       	ldi	r20, 0x66	; 102
    63a8:	55 e4       	ldi	r21, 0x45	; 69
    63aa:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    63ae:	dc 01       	movw	r26, r24
    63b0:	cb 01       	movw	r24, r22
    63b2:	f8 01       	movw	r30, r16
    63b4:	80 83       	st	Z, r24
    63b6:	91 83       	std	Z+1, r25	; 0x01
    63b8:	a2 83       	std	Z+2, r26	; 0x02
    63ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    63bc:	fe 01       	movw	r30, r28
    63be:	e3 5b       	subi	r30, 0xB3	; 179
    63c0:	ff 4f       	sbci	r31, 0xFF	; 255
    63c2:	60 81       	ld	r22, Z
    63c4:	71 81       	ldd	r23, Z+1	; 0x01
    63c6:	82 81       	ldd	r24, Z+2	; 0x02
    63c8:	93 81       	ldd	r25, Z+3	; 0x03
    63ca:	20 e0       	ldi	r18, 0x00	; 0
    63cc:	30 e0       	ldi	r19, 0x00	; 0
    63ce:	40 e8       	ldi	r20, 0x80	; 128
    63d0:	5f e3       	ldi	r21, 0x3F	; 63
    63d2:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    63d6:	88 23       	and	r24, r24
    63d8:	44 f4       	brge	.+16     	; 0x63ea <main+0x704>
		__ticks = 1;
    63da:	fe 01       	movw	r30, r28
    63dc:	e5 5b       	subi	r30, 0xB5	; 181
    63de:	ff 4f       	sbci	r31, 0xFF	; 255
    63e0:	81 e0       	ldi	r24, 0x01	; 1
    63e2:	90 e0       	ldi	r25, 0x00	; 0
    63e4:	91 83       	std	Z+1, r25	; 0x01
    63e6:	80 83       	st	Z, r24
    63e8:	64 c0       	rjmp	.+200    	; 0x64b2 <main+0x7cc>
	else if (__tmp > 65535)
    63ea:	fe 01       	movw	r30, r28
    63ec:	e3 5b       	subi	r30, 0xB3	; 179
    63ee:	ff 4f       	sbci	r31, 0xFF	; 255
    63f0:	60 81       	ld	r22, Z
    63f2:	71 81       	ldd	r23, Z+1	; 0x01
    63f4:	82 81       	ldd	r24, Z+2	; 0x02
    63f6:	93 81       	ldd	r25, Z+3	; 0x03
    63f8:	20 e0       	ldi	r18, 0x00	; 0
    63fa:	3f ef       	ldi	r19, 0xFF	; 255
    63fc:	4f e7       	ldi	r20, 0x7F	; 127
    63fe:	57 e4       	ldi	r21, 0x47	; 71
    6400:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    6404:	18 16       	cp	r1, r24
    6406:	0c f0       	brlt	.+2      	; 0x640a <main+0x724>
    6408:	43 c0       	rjmp	.+134    	; 0x6490 <main+0x7aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    640a:	fe 01       	movw	r30, r28
    640c:	ef 5a       	subi	r30, 0xAF	; 175
    640e:	ff 4f       	sbci	r31, 0xFF	; 255
    6410:	60 81       	ld	r22, Z
    6412:	71 81       	ldd	r23, Z+1	; 0x01
    6414:	82 81       	ldd	r24, Z+2	; 0x02
    6416:	93 81       	ldd	r25, Z+3	; 0x03
    6418:	20 e0       	ldi	r18, 0x00	; 0
    641a:	30 e0       	ldi	r19, 0x00	; 0
    641c:	40 e2       	ldi	r20, 0x20	; 32
    641e:	51 e4       	ldi	r21, 0x41	; 65
    6420:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    6424:	dc 01       	movw	r26, r24
    6426:	cb 01       	movw	r24, r22
    6428:	8e 01       	movw	r16, r28
    642a:	05 5b       	subi	r16, 0xB5	; 181
    642c:	1f 4f       	sbci	r17, 0xFF	; 255
    642e:	bc 01       	movw	r22, r24
    6430:	cd 01       	movw	r24, r26
    6432:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    6436:	dc 01       	movw	r26, r24
    6438:	cb 01       	movw	r24, r22
    643a:	f8 01       	movw	r30, r16
    643c:	91 83       	std	Z+1, r25	; 0x01
    643e:	80 83       	st	Z, r24
    6440:	1f c0       	rjmp	.+62     	; 0x6480 <main+0x79a>
    6442:	fe 01       	movw	r30, r28
    6444:	e7 5b       	subi	r30, 0xB7	; 183
    6446:	ff 4f       	sbci	r31, 0xFF	; 255
    6448:	80 e7       	ldi	r24, 0x70	; 112
    644a:	91 e0       	ldi	r25, 0x01	; 1
    644c:	91 83       	std	Z+1, r25	; 0x01
    644e:	80 83       	st	Z, r24
    6450:	fe 01       	movw	r30, r28
    6452:	e7 5b       	subi	r30, 0xB7	; 183
    6454:	ff 4f       	sbci	r31, 0xFF	; 255
    6456:	80 81       	ld	r24, Z
    6458:	91 81       	ldd	r25, Z+1	; 0x01
    645a:	01 97       	sbiw	r24, 0x01	; 1
    645c:	f1 f7       	brne	.-4      	; 0x645a <main+0x774>
    645e:	fe 01       	movw	r30, r28
    6460:	e7 5b       	subi	r30, 0xB7	; 183
    6462:	ff 4f       	sbci	r31, 0xFF	; 255
    6464:	91 83       	std	Z+1, r25	; 0x01
    6466:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6468:	de 01       	movw	r26, r28
    646a:	a5 5b       	subi	r26, 0xB5	; 181
    646c:	bf 4f       	sbci	r27, 0xFF	; 255
    646e:	fe 01       	movw	r30, r28
    6470:	e5 5b       	subi	r30, 0xB5	; 181
    6472:	ff 4f       	sbci	r31, 0xFF	; 255
    6474:	80 81       	ld	r24, Z
    6476:	91 81       	ldd	r25, Z+1	; 0x01
    6478:	01 97       	sbiw	r24, 0x01	; 1
    647a:	11 96       	adiw	r26, 0x01	; 1
    647c:	9c 93       	st	X, r25
    647e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6480:	fe 01       	movw	r30, r28
    6482:	e5 5b       	subi	r30, 0xB5	; 181
    6484:	ff 4f       	sbci	r31, 0xFF	; 255
    6486:	80 81       	ld	r24, Z
    6488:	91 81       	ldd	r25, Z+1	; 0x01
    648a:	00 97       	sbiw	r24, 0x00	; 0
    648c:	d1 f6       	brne	.-76     	; 0x6442 <main+0x75c>
    648e:	27 c0       	rjmp	.+78     	; 0x64de <main+0x7f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6490:	8e 01       	movw	r16, r28
    6492:	05 5b       	subi	r16, 0xB5	; 181
    6494:	1f 4f       	sbci	r17, 0xFF	; 255
    6496:	fe 01       	movw	r30, r28
    6498:	e3 5b       	subi	r30, 0xB3	; 179
    649a:	ff 4f       	sbci	r31, 0xFF	; 255
    649c:	60 81       	ld	r22, Z
    649e:	71 81       	ldd	r23, Z+1	; 0x01
    64a0:	82 81       	ldd	r24, Z+2	; 0x02
    64a2:	93 81       	ldd	r25, Z+3	; 0x03
    64a4:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    64a8:	dc 01       	movw	r26, r24
    64aa:	cb 01       	movw	r24, r22
    64ac:	f8 01       	movw	r30, r16
    64ae:	91 83       	std	Z+1, r25	; 0x01
    64b0:	80 83       	st	Z, r24
    64b2:	de 01       	movw	r26, r28
    64b4:	a9 5b       	subi	r26, 0xB9	; 185
    64b6:	bf 4f       	sbci	r27, 0xFF	; 255
    64b8:	fe 01       	movw	r30, r28
    64ba:	e5 5b       	subi	r30, 0xB5	; 181
    64bc:	ff 4f       	sbci	r31, 0xFF	; 255
    64be:	80 81       	ld	r24, Z
    64c0:	91 81       	ldd	r25, Z+1	; 0x01
    64c2:	8d 93       	st	X+, r24
    64c4:	9c 93       	st	X, r25
    64c6:	fe 01       	movw	r30, r28
    64c8:	e9 5b       	subi	r30, 0xB9	; 185
    64ca:	ff 4f       	sbci	r31, 0xFF	; 255
    64cc:	80 81       	ld	r24, Z
    64ce:	91 81       	ldd	r25, Z+1	; 0x01
    64d0:	01 97       	sbiw	r24, 0x01	; 1
    64d2:	f1 f7       	brne	.-4      	; 0x64d0 <main+0x7ea>
    64d4:	fe 01       	movw	r30, r28
    64d6:	e9 5b       	subi	r30, 0xB9	; 185
    64d8:	ff 4f       	sbci	r31, 0xFF	; 255
    64da:	91 83       	std	Z+1, r25	; 0x01
    64dc:	80 83       	st	Z, r24
_delay_ms(200);
up();
    64de:	0e 94 05 13 	call	0x260a	; 0x260a <up>
turnback(tcount*2,2);
    64e2:	80 e2       	ldi	r24, 0x20	; 32
    64e4:	90 e0       	ldi	r25, 0x00	; 0
    64e6:	62 e0       	ldi	r22, 0x02	; 2
    64e8:	70 e0       	ldi	r23, 0x00	; 0
    64ea:	0e 94 41 21 	call	0x4282	; 0x4282 <turnback>
count=23;
    64ee:	87 e1       	ldi	r24, 0x17	; 23
    64f0:	90 e0       	ldi	r25, 0x00	; 0
    64f2:	90 93 0f 03 	sts	0x030F, r25
    64f6:	80 93 0e 03 	sts	0x030E, r24
line(1);
    64fa:	81 e0       	ldi	r24, 0x01	; 1
    64fc:	90 e0       	ldi	r25, 0x00	; 0
    64fe:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>


for( i=top;i>0;i--)
    6502:	fe 01       	movw	r30, r28
    6504:	eb 57       	subi	r30, 0x7B	; 123
    6506:	ff 4f       	sbci	r31, 0xFF	; 255
    6508:	80 91 8d 03 	lds	r24, 0x038D
    650c:	90 91 8e 03 	lds	r25, 0x038E
    6510:	91 83       	std	Z+1, r25	; 0x01
    6512:	80 83       	st	Z, r24
    6514:	46 c0       	rjmp	.+140    	; 0x65a2 <main+0x8bc>
{
takediss(proc[i-1],proc[i]);
    6516:	fe 01       	movw	r30, r28
    6518:	eb 57       	subi	r30, 0x7B	; 123
    651a:	ff 4f       	sbci	r31, 0xFF	; 255
    651c:	80 81       	ld	r24, Z
    651e:	91 81       	ldd	r25, Z+1	; 0x01
    6520:	01 97       	sbiw	r24, 0x01	; 1
    6522:	88 0f       	add	r24, r24
    6524:	99 1f       	adc	r25, r25
    6526:	fc 01       	movw	r30, r24
    6528:	e0 5f       	subi	r30, 0xF0	; 240
    652a:	fc 4f       	sbci	r31, 0xFC	; 252
    652c:	40 81       	ld	r20, Z
    652e:	51 81       	ldd	r21, Z+1	; 0x01
    6530:	fe 01       	movw	r30, r28
    6532:	eb 57       	subi	r30, 0x7B	; 123
    6534:	ff 4f       	sbci	r31, 0xFF	; 255
    6536:	80 81       	ld	r24, Z
    6538:	91 81       	ldd	r25, Z+1	; 0x01
    653a:	88 0f       	add	r24, r24
    653c:	99 1f       	adc	r25, r25
    653e:	fc 01       	movw	r30, r24
    6540:	e0 5f       	subi	r30, 0xF0	; 240
    6542:	fc 4f       	sbci	r31, 0xFC	; 252
    6544:	20 81       	ld	r18, Z
    6546:	31 81       	ldd	r19, Z+1	; 0x01
    6548:	ca 01       	movw	r24, r20
    654a:	b9 01       	movw	r22, r18
    654c:	0e 94 06 28 	call	0x500c	; 0x500c <takediss>
takediss2(proc[i-1],proc[i]);
    6550:	fe 01       	movw	r30, r28
    6552:	eb 57       	subi	r30, 0x7B	; 123
    6554:	ff 4f       	sbci	r31, 0xFF	; 255
    6556:	80 81       	ld	r24, Z
    6558:	91 81       	ldd	r25, Z+1	; 0x01
    655a:	01 97       	sbiw	r24, 0x01	; 1
    655c:	88 0f       	add	r24, r24
    655e:	99 1f       	adc	r25, r25
    6560:	fc 01       	movw	r30, r24
    6562:	e0 5f       	subi	r30, 0xF0	; 240
    6564:	fc 4f       	sbci	r31, 0xFC	; 252
    6566:	40 81       	ld	r20, Z
    6568:	51 81       	ldd	r21, Z+1	; 0x01
    656a:	fe 01       	movw	r30, r28
    656c:	eb 57       	subi	r30, 0x7B	; 123
    656e:	ff 4f       	sbci	r31, 0xFF	; 255
    6570:	80 81       	ld	r24, Z
    6572:	91 81       	ldd	r25, Z+1	; 0x01
    6574:	88 0f       	add	r24, r24
    6576:	99 1f       	adc	r25, r25
    6578:	fc 01       	movw	r30, r24
    657a:	e0 5f       	subi	r30, 0xF0	; 240
    657c:	fc 4f       	sbci	r31, 0xFC	; 252
    657e:	20 81       	ld	r18, Z
    6580:	31 81       	ldd	r19, Z+1	; 0x01
    6582:	ca 01       	movw	r24, r20
    6584:	b9 01       	movw	r22, r18
    6586:	0e 94 f6 23 	call	0x47ec	; 0x47ec <takediss2>
turnback(tcount*2,2);
count=23;
line(1);


for( i=top;i>0;i--)
    658a:	de 01       	movw	r26, r28
    658c:	ab 57       	subi	r26, 0x7B	; 123
    658e:	bf 4f       	sbci	r27, 0xFF	; 255
    6590:	fe 01       	movw	r30, r28
    6592:	eb 57       	subi	r30, 0x7B	; 123
    6594:	ff 4f       	sbci	r31, 0xFF	; 255
    6596:	80 81       	ld	r24, Z
    6598:	91 81       	ldd	r25, Z+1	; 0x01
    659a:	01 97       	sbiw	r24, 0x01	; 1
    659c:	11 96       	adiw	r26, 0x01	; 1
    659e:	9c 93       	st	X, r25
    65a0:	8e 93       	st	-X, r24
    65a2:	fe 01       	movw	r30, r28
    65a4:	eb 57       	subi	r30, 0x7B	; 123
    65a6:	ff 4f       	sbci	r31, 0xFF	; 255
    65a8:	80 81       	ld	r24, Z
    65aa:	91 81       	ldd	r25, Z+1	; 0x01
    65ac:	18 16       	cp	r1, r24
    65ae:	19 06       	cpc	r1, r25
    65b0:	0c f4       	brge	.+2      	; 0x65b4 <main+0x8ce>
    65b2:	b1 cf       	rjmp	.-158    	; 0x6516 <main+0x830>
{
takediss(proc[i-1],proc[i]);
takediss2(proc[i-1],proc[i]);
}
turnback(2*tcount,10);
    65b4:	80 e2       	ldi	r24, 0x20	; 32
    65b6:	90 e0       	ldi	r25, 0x00	; 0
    65b8:	6a e0       	ldi	r22, 0x0A	; 10
    65ba:	70 e0       	ldi	r23, 0x00	; 0
    65bc:	0e 94 41 21 	call	0x4282	; 0x4282 <turnback>
dir=(dir+2)%4;
    65c0:	80 91 0c 03 	lds	r24, 0x030C
    65c4:	90 91 0d 03 	lds	r25, 0x030D
    65c8:	02 96       	adiw	r24, 0x02	; 2
    65ca:	24 e0       	ldi	r18, 0x04	; 4
    65cc:	30 e0       	ldi	r19, 0x00	; 0
    65ce:	b9 01       	movw	r22, r18
    65d0:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    65d4:	90 93 0d 03 	sts	0x030D, r25
    65d8:	80 93 0c 03 	sts	0x030C, r24

for( i=0;i<top;i++)
    65dc:	fe 01       	movw	r30, r28
    65de:	eb 57       	subi	r30, 0x7B	; 123
    65e0:	ff 4f       	sbci	r31, 0xFF	; 255
    65e2:	11 82       	std	Z+1, r1	; 0x01
    65e4:	10 82       	st	Z, r1
    65e6:	46 c0       	rjmp	.+140    	; 0x6674 <main+0x98e>
{
takediss(proc[i+1],proc[i]);
    65e8:	fe 01       	movw	r30, r28
    65ea:	eb 57       	subi	r30, 0x7B	; 123
    65ec:	ff 4f       	sbci	r31, 0xFF	; 255
    65ee:	80 81       	ld	r24, Z
    65f0:	91 81       	ldd	r25, Z+1	; 0x01
    65f2:	01 96       	adiw	r24, 0x01	; 1
    65f4:	88 0f       	add	r24, r24
    65f6:	99 1f       	adc	r25, r25
    65f8:	fc 01       	movw	r30, r24
    65fa:	e0 5f       	subi	r30, 0xF0	; 240
    65fc:	fc 4f       	sbci	r31, 0xFC	; 252
    65fe:	40 81       	ld	r20, Z
    6600:	51 81       	ldd	r21, Z+1	; 0x01
    6602:	fe 01       	movw	r30, r28
    6604:	eb 57       	subi	r30, 0x7B	; 123
    6606:	ff 4f       	sbci	r31, 0xFF	; 255
    6608:	80 81       	ld	r24, Z
    660a:	91 81       	ldd	r25, Z+1	; 0x01
    660c:	88 0f       	add	r24, r24
    660e:	99 1f       	adc	r25, r25
    6610:	fc 01       	movw	r30, r24
    6612:	e0 5f       	subi	r30, 0xF0	; 240
    6614:	fc 4f       	sbci	r31, 0xFC	; 252
    6616:	20 81       	ld	r18, Z
    6618:	31 81       	ldd	r19, Z+1	; 0x01
    661a:	ca 01       	movw	r24, r20
    661c:	b9 01       	movw	r22, r18
    661e:	0e 94 06 28 	call	0x500c	; 0x500c <takediss>
takediss2(proc[i+1],proc[i]);
    6622:	fe 01       	movw	r30, r28
    6624:	eb 57       	subi	r30, 0x7B	; 123
    6626:	ff 4f       	sbci	r31, 0xFF	; 255
    6628:	80 81       	ld	r24, Z
    662a:	91 81       	ldd	r25, Z+1	; 0x01
    662c:	01 96       	adiw	r24, 0x01	; 1
    662e:	88 0f       	add	r24, r24
    6630:	99 1f       	adc	r25, r25
    6632:	fc 01       	movw	r30, r24
    6634:	e0 5f       	subi	r30, 0xF0	; 240
    6636:	fc 4f       	sbci	r31, 0xFC	; 252
    6638:	40 81       	ld	r20, Z
    663a:	51 81       	ldd	r21, Z+1	; 0x01
    663c:	fe 01       	movw	r30, r28
    663e:	eb 57       	subi	r30, 0x7B	; 123
    6640:	ff 4f       	sbci	r31, 0xFF	; 255
    6642:	80 81       	ld	r24, Z
    6644:	91 81       	ldd	r25, Z+1	; 0x01
    6646:	88 0f       	add	r24, r24
    6648:	99 1f       	adc	r25, r25
    664a:	fc 01       	movw	r30, r24
    664c:	e0 5f       	subi	r30, 0xF0	; 240
    664e:	fc 4f       	sbci	r31, 0xFC	; 252
    6650:	20 81       	ld	r18, Z
    6652:	31 81       	ldd	r19, Z+1	; 0x01
    6654:	ca 01       	movw	r24, r20
    6656:	b9 01       	movw	r22, r18
    6658:	0e 94 f6 23 	call	0x47ec	; 0x47ec <takediss2>
takediss2(proc[i-1],proc[i]);
}
turnback(2*tcount,10);
dir=(dir+2)%4;

for( i=0;i<top;i++)
    665c:	de 01       	movw	r26, r28
    665e:	ab 57       	subi	r26, 0x7B	; 123
    6660:	bf 4f       	sbci	r27, 0xFF	; 255
    6662:	fe 01       	movw	r30, r28
    6664:	eb 57       	subi	r30, 0x7B	; 123
    6666:	ff 4f       	sbci	r31, 0xFF	; 255
    6668:	80 81       	ld	r24, Z
    666a:	91 81       	ldd	r25, Z+1	; 0x01
    666c:	01 96       	adiw	r24, 0x01	; 1
    666e:	11 96       	adiw	r26, 0x01	; 1
    6670:	9c 93       	st	X, r25
    6672:	8e 93       	st	-X, r24
    6674:	80 91 8d 03 	lds	r24, 0x038D
    6678:	90 91 8e 03 	lds	r25, 0x038E
    667c:	fe 01       	movw	r30, r28
    667e:	eb 57       	subi	r30, 0x7B	; 123
    6680:	ff 4f       	sbci	r31, 0xFF	; 255
    6682:	20 81       	ld	r18, Z
    6684:	31 81       	ldd	r19, Z+1	; 0x01
    6686:	28 17       	cp	r18, r24
    6688:	39 07       	cpc	r19, r25
    668a:	0c f4       	brge	.+2      	; 0x668e <main+0x9a8>
    668c:	ad cf       	rjmp	.-166    	; 0x65e8 <main+0x902>
takediss(proc[i+1],proc[i]);
takediss2(proc[i+1],proc[i]);
}


eeprom_write_byte(1,'B');
    668e:	81 e0       	ldi	r24, 0x01	; 1
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	62 e4       	ldi	r22, 0x42	; 66
    6694:	0e 94 e5 38 	call	0x71ca	; 0x71ca <eeprom_write_byte>


}

st=eeprom_read_byte(2);
    6698:	82 e0       	ldi	r24, 0x02	; 2
    669a:	90 e0       	ldi	r25, 0x00	; 0
    669c:	0e 94 a5 2a 	call	0x554a	; 0x554a <eeprom_read_byte>
    66a0:	fe 01       	movw	r30, r28
    66a2:	e7 57       	subi	r30, 0x77	; 119
    66a4:	ff 4f       	sbci	r31, 0xFF	; 255
    66a6:	80 83       	st	Z, r24
if(st!='C') //keep 2nd block
    66a8:	fe 01       	movw	r30, r28
    66aa:	e7 57       	subi	r30, 0x77	; 119
    66ac:	ff 4f       	sbci	r31, 0xFF	; 255
    66ae:	80 81       	ld	r24, Z
    66b0:	83 34       	cpi	r24, 0x43	; 67
    66b2:	09 f4       	brne	.+2      	; 0x66b6 <main+0x9d0>
    66b4:	7e c5       	rjmp	.+2812   	; 0x71b2 <main+0x14cc>
{  
readfromeeprom();
    66b6:	0e 94 7e 29 	call	0x52fc	; 0x52fc <readfromeeprom>
set_matvalues();
    66ba:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <set_matvalues>
prepare4new();
    66be:	0e 94 91 00 	call	0x122	; 0x122 <prepare4new>
updaterelmat();
    66c2:	0e 94 c6 2a 	call	0x558c	; 0x558c <updaterelmat>
solve(0,35);
    66c6:	80 e0       	ldi	r24, 0x00	; 0
    66c8:	90 e0       	ldi	r25, 0x00	; 0
    66ca:	63 e2       	ldi	r22, 0x23	; 35
    66cc:	70 e0       	ldi	r23, 0x00	; 0
    66ce:	0e 94 ba 03 	call	0x774	; 0x774 <solve>
for( i=top;i>=0;i--)
    66d2:	80 91 8d 03 	lds	r24, 0x038D
    66d6:	90 91 8e 03 	lds	r25, 0x038E
    66da:	90 93 b2 0d 	sts	0x0DB2, r25
    66de:	80 93 b1 0d 	sts	0x0DB1, r24
    66e2:	1c c0       	rjmp	.+56     	; 0x671c <main+0xa36>
  { lcd_number(1,1,proc[i],2);
    66e4:	80 91 b1 0d 	lds	r24, 0x0DB1
    66e8:	90 91 b2 0d 	lds	r25, 0x0DB2
    66ec:	88 0f       	add	r24, r24
    66ee:	99 1f       	adc	r25, r25
    66f0:	fc 01       	movw	r30, r24
    66f2:	e0 5f       	subi	r30, 0xF0	; 240
    66f4:	fc 4f       	sbci	r31, 0xFC	; 252
    66f6:	80 81       	ld	r24, Z
    66f8:	91 81       	ldd	r25, Z+1	; 0x01
    66fa:	9c 01       	movw	r18, r24
    66fc:	81 e0       	ldi	r24, 0x01	; 1
    66fe:	61 e0       	ldi	r22, 0x01	; 1
    6700:	a9 01       	movw	r20, r18
    6702:	22 e0       	ldi	r18, 0x02	; 2
    6704:	30 e0       	ldi	r19, 0x00	; 0
    6706:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <lcd_number>
readfromeeprom();
set_matvalues();
prepare4new();
updaterelmat();
solve(0,35);
for( i=top;i>=0;i--)
    670a:	80 91 b1 0d 	lds	r24, 0x0DB1
    670e:	90 91 b2 0d 	lds	r25, 0x0DB2
    6712:	01 97       	sbiw	r24, 0x01	; 1
    6714:	90 93 b2 0d 	sts	0x0DB2, r25
    6718:	80 93 b1 0d 	sts	0x0DB1, r24
    671c:	80 91 b1 0d 	lds	r24, 0x0DB1
    6720:	90 91 b2 0d 	lds	r25, 0x0DB2
    6724:	99 23       	and	r25, r25
    6726:	f4 f6       	brge	.-68     	; 0x66e4 <main+0x9fe>
  { lcd_number(1,1,proc[i],2);
 // _delay_ms(1000);
}
if(dir==3)
    6728:	80 91 0c 03 	lds	r24, 0x030C
    672c:	90 91 0d 03 	lds	r25, 0x030D
    6730:	83 30       	cpi	r24, 0x03	; 3
    6732:	91 05       	cpc	r25, r1
    6734:	21 f4       	brne	.+8      	; 0x673e <main+0xa58>
turnleft(tcount);
    6736:	80 e1       	ldi	r24, 0x10	; 16
    6738:	90 e0       	ldi	r25, 0x00	; 0
    673a:	0e 94 ef 20 	call	0x41de	; 0x41de <turnleft>
line(-1);
    673e:	8f ef       	ldi	r24, 0xFF	; 255
    6740:	9f ef       	ldi	r25, 0xFF	; 255
    6742:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>
down();
    6746:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <down>
    674a:	fe 01       	movw	r30, r28
    674c:	ed 5b       	subi	r30, 0xBD	; 189
    674e:	ff 4f       	sbci	r31, 0xFF	; 255
    6750:	80 e0       	ldi	r24, 0x00	; 0
    6752:	90 e0       	ldi	r25, 0x00	; 0
    6754:	a8 e4       	ldi	r26, 0x48	; 72
    6756:	b3 e4       	ldi	r27, 0x43	; 67
    6758:	80 83       	st	Z, r24
    675a:	91 83       	std	Z+1, r25	; 0x01
    675c:	a2 83       	std	Z+2, r26	; 0x02
    675e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6760:	8e 01       	movw	r16, r28
    6762:	01 5c       	subi	r16, 0xC1	; 193
    6764:	1f 4f       	sbci	r17, 0xFF	; 255
    6766:	fe 01       	movw	r30, r28
    6768:	ed 5b       	subi	r30, 0xBD	; 189
    676a:	ff 4f       	sbci	r31, 0xFF	; 255
    676c:	60 81       	ld	r22, Z
    676e:	71 81       	ldd	r23, Z+1	; 0x01
    6770:	82 81       	ldd	r24, Z+2	; 0x02
    6772:	93 81       	ldd	r25, Z+3	; 0x03
    6774:	26 e6       	ldi	r18, 0x66	; 102
    6776:	36 e6       	ldi	r19, 0x66	; 102
    6778:	46 e6       	ldi	r20, 0x66	; 102
    677a:	55 e4       	ldi	r21, 0x45	; 69
    677c:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    6780:	dc 01       	movw	r26, r24
    6782:	cb 01       	movw	r24, r22
    6784:	f8 01       	movw	r30, r16
    6786:	80 83       	st	Z, r24
    6788:	91 83       	std	Z+1, r25	; 0x01
    678a:	a2 83       	std	Z+2, r26	; 0x02
    678c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    678e:	fe 01       	movw	r30, r28
    6790:	ff 96       	adiw	r30, 0x3f	; 63
    6792:	60 81       	ld	r22, Z
    6794:	71 81       	ldd	r23, Z+1	; 0x01
    6796:	82 81       	ldd	r24, Z+2	; 0x02
    6798:	93 81       	ldd	r25, Z+3	; 0x03
    679a:	20 e0       	ldi	r18, 0x00	; 0
    679c:	30 e0       	ldi	r19, 0x00	; 0
    679e:	40 e8       	ldi	r20, 0x80	; 128
    67a0:	5f e3       	ldi	r21, 0x3F	; 63
    67a2:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    67a6:	88 23       	and	r24, r24
    67a8:	2c f4       	brge	.+10     	; 0x67b4 <main+0xace>
		__ticks = 1;
    67aa:	81 e0       	ldi	r24, 0x01	; 1
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	9e af       	std	Y+62, r25	; 0x3e
    67b0:	8d af       	std	Y+61, r24	; 0x3d
    67b2:	46 c0       	rjmp	.+140    	; 0x6840 <main+0xb5a>
	else if (__tmp > 65535)
    67b4:	fe 01       	movw	r30, r28
    67b6:	ff 96       	adiw	r30, 0x3f	; 63
    67b8:	60 81       	ld	r22, Z
    67ba:	71 81       	ldd	r23, Z+1	; 0x01
    67bc:	82 81       	ldd	r24, Z+2	; 0x02
    67be:	93 81       	ldd	r25, Z+3	; 0x03
    67c0:	20 e0       	ldi	r18, 0x00	; 0
    67c2:	3f ef       	ldi	r19, 0xFF	; 255
    67c4:	4f e7       	ldi	r20, 0x7F	; 127
    67c6:	57 e4       	ldi	r21, 0x47	; 71
    67c8:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    67cc:	18 16       	cp	r1, r24
    67ce:	64 f5       	brge	.+88     	; 0x6828 <main+0xb42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    67d0:	fe 01       	movw	r30, r28
    67d2:	ed 5b       	subi	r30, 0xBD	; 189
    67d4:	ff 4f       	sbci	r31, 0xFF	; 255
    67d6:	60 81       	ld	r22, Z
    67d8:	71 81       	ldd	r23, Z+1	; 0x01
    67da:	82 81       	ldd	r24, Z+2	; 0x02
    67dc:	93 81       	ldd	r25, Z+3	; 0x03
    67de:	20 e0       	ldi	r18, 0x00	; 0
    67e0:	30 e0       	ldi	r19, 0x00	; 0
    67e2:	40 e2       	ldi	r20, 0x20	; 32
    67e4:	51 e4       	ldi	r21, 0x41	; 65
    67e6:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    67ea:	dc 01       	movw	r26, r24
    67ec:	cb 01       	movw	r24, r22
    67ee:	bc 01       	movw	r22, r24
    67f0:	cd 01       	movw	r24, r26
    67f2:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    67f6:	dc 01       	movw	r26, r24
    67f8:	cb 01       	movw	r24, r22
    67fa:	9e af       	std	Y+62, r25	; 0x3e
    67fc:	8d af       	std	Y+61, r24	; 0x3d
    67fe:	0f c0       	rjmp	.+30     	; 0x681e <main+0xb38>
    6800:	80 e7       	ldi	r24, 0x70	; 112
    6802:	91 e0       	ldi	r25, 0x01	; 1
    6804:	9c af       	std	Y+60, r25	; 0x3c
    6806:	8b af       	std	Y+59, r24	; 0x3b
    6808:	8b ad       	ldd	r24, Y+59	; 0x3b
    680a:	9c ad       	ldd	r25, Y+60	; 0x3c
    680c:	01 97       	sbiw	r24, 0x01	; 1
    680e:	f1 f7       	brne	.-4      	; 0x680c <main+0xb26>
    6810:	9c af       	std	Y+60, r25	; 0x3c
    6812:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6814:	8d ad       	ldd	r24, Y+61	; 0x3d
    6816:	9e ad       	ldd	r25, Y+62	; 0x3e
    6818:	01 97       	sbiw	r24, 0x01	; 1
    681a:	9e af       	std	Y+62, r25	; 0x3e
    681c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    681e:	8d ad       	ldd	r24, Y+61	; 0x3d
    6820:	9e ad       	ldd	r25, Y+62	; 0x3e
    6822:	00 97       	sbiw	r24, 0x00	; 0
    6824:	69 f7       	brne	.-38     	; 0x6800 <main+0xb1a>
    6826:	16 c0       	rjmp	.+44     	; 0x6854 <main+0xb6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6828:	fe 01       	movw	r30, r28
    682a:	ff 96       	adiw	r30, 0x3f	; 63
    682c:	60 81       	ld	r22, Z
    682e:	71 81       	ldd	r23, Z+1	; 0x01
    6830:	82 81       	ldd	r24, Z+2	; 0x02
    6832:	93 81       	ldd	r25, Z+3	; 0x03
    6834:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    6838:	dc 01       	movw	r26, r24
    683a:	cb 01       	movw	r24, r22
    683c:	9e af       	std	Y+62, r25	; 0x3e
    683e:	8d af       	std	Y+61, r24	; 0x3d
    6840:	8d ad       	ldd	r24, Y+61	; 0x3d
    6842:	9e ad       	ldd	r25, Y+62	; 0x3e
    6844:	9a af       	std	Y+58, r25	; 0x3a
    6846:	89 af       	std	Y+57, r24	; 0x39
    6848:	89 ad       	ldd	r24, Y+57	; 0x39
    684a:	9a ad       	ldd	r25, Y+58	; 0x3a
    684c:	01 97       	sbiw	r24, 0x01	; 1
    684e:	f1 f7       	brne	.-4      	; 0x684c <main+0xb66>
    6850:	9a af       	std	Y+58, r25	; 0x3a
    6852:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(200);
grab();
    6854:	0e 94 1f 13 	call	0x263e	; 0x263e <grab>
    6858:	80 e0       	ldi	r24, 0x00	; 0
    685a:	90 e0       	ldi	r25, 0x00	; 0
    685c:	a8 e4       	ldi	r26, 0x48	; 72
    685e:	b3 e4       	ldi	r27, 0x43	; 67
    6860:	8d ab       	std	Y+53, r24	; 0x35
    6862:	9e ab       	std	Y+54, r25	; 0x36
    6864:	af ab       	std	Y+55, r26	; 0x37
    6866:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6868:	6d a9       	ldd	r22, Y+53	; 0x35
    686a:	7e a9       	ldd	r23, Y+54	; 0x36
    686c:	8f a9       	ldd	r24, Y+55	; 0x37
    686e:	98 ad       	ldd	r25, Y+56	; 0x38
    6870:	26 e6       	ldi	r18, 0x66	; 102
    6872:	36 e6       	ldi	r19, 0x66	; 102
    6874:	46 e6       	ldi	r20, 0x66	; 102
    6876:	55 e4       	ldi	r21, 0x45	; 69
    6878:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    687c:	dc 01       	movw	r26, r24
    687e:	cb 01       	movw	r24, r22
    6880:	89 ab       	std	Y+49, r24	; 0x31
    6882:	9a ab       	std	Y+50, r25	; 0x32
    6884:	ab ab       	std	Y+51, r26	; 0x33
    6886:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6888:	69 a9       	ldd	r22, Y+49	; 0x31
    688a:	7a a9       	ldd	r23, Y+50	; 0x32
    688c:	8b a9       	ldd	r24, Y+51	; 0x33
    688e:	9c a9       	ldd	r25, Y+52	; 0x34
    6890:	20 e0       	ldi	r18, 0x00	; 0
    6892:	30 e0       	ldi	r19, 0x00	; 0
    6894:	40 e8       	ldi	r20, 0x80	; 128
    6896:	5f e3       	ldi	r21, 0x3F	; 63
    6898:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    689c:	88 23       	and	r24, r24
    689e:	2c f4       	brge	.+10     	; 0x68aa <main+0xbc4>
		__ticks = 1;
    68a0:	81 e0       	ldi	r24, 0x01	; 1
    68a2:	90 e0       	ldi	r25, 0x00	; 0
    68a4:	98 ab       	std	Y+48, r25	; 0x30
    68a6:	8f a7       	std	Y+47, r24	; 0x2f
    68a8:	3f c0       	rjmp	.+126    	; 0x6928 <main+0xc42>
	else if (__tmp > 65535)
    68aa:	69 a9       	ldd	r22, Y+49	; 0x31
    68ac:	7a a9       	ldd	r23, Y+50	; 0x32
    68ae:	8b a9       	ldd	r24, Y+51	; 0x33
    68b0:	9c a9       	ldd	r25, Y+52	; 0x34
    68b2:	20 e0       	ldi	r18, 0x00	; 0
    68b4:	3f ef       	ldi	r19, 0xFF	; 255
    68b6:	4f e7       	ldi	r20, 0x7F	; 127
    68b8:	57 e4       	ldi	r21, 0x47	; 71
    68ba:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    68be:	18 16       	cp	r1, r24
    68c0:	4c f5       	brge	.+82     	; 0x6914 <main+0xc2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68c2:	6d a9       	ldd	r22, Y+53	; 0x35
    68c4:	7e a9       	ldd	r23, Y+54	; 0x36
    68c6:	8f a9       	ldd	r24, Y+55	; 0x37
    68c8:	98 ad       	ldd	r25, Y+56	; 0x38
    68ca:	20 e0       	ldi	r18, 0x00	; 0
    68cc:	30 e0       	ldi	r19, 0x00	; 0
    68ce:	40 e2       	ldi	r20, 0x20	; 32
    68d0:	51 e4       	ldi	r21, 0x41	; 65
    68d2:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    68d6:	dc 01       	movw	r26, r24
    68d8:	cb 01       	movw	r24, r22
    68da:	bc 01       	movw	r22, r24
    68dc:	cd 01       	movw	r24, r26
    68de:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    68e2:	dc 01       	movw	r26, r24
    68e4:	cb 01       	movw	r24, r22
    68e6:	98 ab       	std	Y+48, r25	; 0x30
    68e8:	8f a7       	std	Y+47, r24	; 0x2f
    68ea:	0f c0       	rjmp	.+30     	; 0x690a <main+0xc24>
    68ec:	80 e7       	ldi	r24, 0x70	; 112
    68ee:	91 e0       	ldi	r25, 0x01	; 1
    68f0:	9e a7       	std	Y+46, r25	; 0x2e
    68f2:	8d a7       	std	Y+45, r24	; 0x2d
    68f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    68f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    68f8:	01 97       	sbiw	r24, 0x01	; 1
    68fa:	f1 f7       	brne	.-4      	; 0x68f8 <main+0xc12>
    68fc:	9e a7       	std	Y+46, r25	; 0x2e
    68fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6900:	8f a5       	ldd	r24, Y+47	; 0x2f
    6902:	98 a9       	ldd	r25, Y+48	; 0x30
    6904:	01 97       	sbiw	r24, 0x01	; 1
    6906:	98 ab       	std	Y+48, r25	; 0x30
    6908:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    690a:	8f a5       	ldd	r24, Y+47	; 0x2f
    690c:	98 a9       	ldd	r25, Y+48	; 0x30
    690e:	00 97       	sbiw	r24, 0x00	; 0
    6910:	69 f7       	brne	.-38     	; 0x68ec <main+0xc06>
    6912:	14 c0       	rjmp	.+40     	; 0x693c <main+0xc56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6914:	69 a9       	ldd	r22, Y+49	; 0x31
    6916:	7a a9       	ldd	r23, Y+50	; 0x32
    6918:	8b a9       	ldd	r24, Y+51	; 0x33
    691a:	9c a9       	ldd	r25, Y+52	; 0x34
    691c:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    6920:	dc 01       	movw	r26, r24
    6922:	cb 01       	movw	r24, r22
    6924:	98 ab       	std	Y+48, r25	; 0x30
    6926:	8f a7       	std	Y+47, r24	; 0x2f
    6928:	8f a5       	ldd	r24, Y+47	; 0x2f
    692a:	98 a9       	ldd	r25, Y+48	; 0x30
    692c:	9c a7       	std	Y+44, r25	; 0x2c
    692e:	8b a7       	std	Y+43, r24	; 0x2b
    6930:	8b a5       	ldd	r24, Y+43	; 0x2b
    6932:	9c a5       	ldd	r25, Y+44	; 0x2c
    6934:	01 97       	sbiw	r24, 0x01	; 1
    6936:	f1 f7       	brne	.-4      	; 0x6934 <main+0xc4e>
    6938:	9c a7       	std	Y+44, r25	; 0x2c
    693a:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(200);
up();
    693c:	0e 94 05 13 	call	0x260a	; 0x260a <up>
turnback(tcount*2,2);
    6940:	80 e2       	ldi	r24, 0x20	; 32
    6942:	90 e0       	ldi	r25, 0x00	; 0
    6944:	62 e0       	ldi	r22, 0x02	; 2
    6946:	70 e0       	ldi	r23, 0x00	; 0
    6948:	0e 94 41 21 	call	0x4282	; 0x4282 <turnback>
dir=0;
    694c:	10 92 0d 03 	sts	0x030D, r1
    6950:	10 92 0c 03 	sts	0x030C, r1
count=23;
    6954:	87 e1       	ldi	r24, 0x17	; 23
    6956:	90 e0       	ldi	r25, 0x00	; 0
    6958:	90 93 0f 03 	sts	0x030F, r25
    695c:	80 93 0e 03 	sts	0x030E, r24
line(1);
    6960:	81 e0       	ldi	r24, 0x01	; 1
    6962:	90 e0       	ldi	r25, 0x00	; 0
    6964:	0e 94 3c 14 	call	0x2878	; 0x2878 <line>


for( i=top;i>0;i--)
    6968:	80 91 8d 03 	lds	r24, 0x038D
    696c:	90 91 8e 03 	lds	r25, 0x038E
    6970:	90 93 b2 0d 	sts	0x0DB2, r25
    6974:	80 93 b1 0d 	sts	0x0DB1, r24
    6978:	3f c0       	rjmp	.+126    	; 0x69f8 <main+0xd12>
{
takediss(proc[i-1],proc[i]);
    697a:	80 91 b1 0d 	lds	r24, 0x0DB1
    697e:	90 91 b2 0d 	lds	r25, 0x0DB2
    6982:	01 97       	sbiw	r24, 0x01	; 1
    6984:	88 0f       	add	r24, r24
    6986:	99 1f       	adc	r25, r25
    6988:	fc 01       	movw	r30, r24
    698a:	e0 5f       	subi	r30, 0xF0	; 240
    698c:	fc 4f       	sbci	r31, 0xFC	; 252
    698e:	40 81       	ld	r20, Z
    6990:	51 81       	ldd	r21, Z+1	; 0x01
    6992:	80 91 b1 0d 	lds	r24, 0x0DB1
    6996:	90 91 b2 0d 	lds	r25, 0x0DB2
    699a:	88 0f       	add	r24, r24
    699c:	99 1f       	adc	r25, r25
    699e:	fc 01       	movw	r30, r24
    69a0:	e0 5f       	subi	r30, 0xF0	; 240
    69a2:	fc 4f       	sbci	r31, 0xFC	; 252
    69a4:	20 81       	ld	r18, Z
    69a6:	31 81       	ldd	r19, Z+1	; 0x01
    69a8:	ca 01       	movw	r24, r20
    69aa:	b9 01       	movw	r22, r18
    69ac:	0e 94 06 28 	call	0x500c	; 0x500c <takediss>
takediss2(proc[i-1],proc[i]);
    69b0:	80 91 b1 0d 	lds	r24, 0x0DB1
    69b4:	90 91 b2 0d 	lds	r25, 0x0DB2
    69b8:	01 97       	sbiw	r24, 0x01	; 1
    69ba:	88 0f       	add	r24, r24
    69bc:	99 1f       	adc	r25, r25
    69be:	fc 01       	movw	r30, r24
    69c0:	e0 5f       	subi	r30, 0xF0	; 240
    69c2:	fc 4f       	sbci	r31, 0xFC	; 252
    69c4:	40 81       	ld	r20, Z
    69c6:	51 81       	ldd	r21, Z+1	; 0x01
    69c8:	80 91 b1 0d 	lds	r24, 0x0DB1
    69cc:	90 91 b2 0d 	lds	r25, 0x0DB2
    69d0:	88 0f       	add	r24, r24
    69d2:	99 1f       	adc	r25, r25
    69d4:	fc 01       	movw	r30, r24
    69d6:	e0 5f       	subi	r30, 0xF0	; 240
    69d8:	fc 4f       	sbci	r31, 0xFC	; 252
    69da:	20 81       	ld	r18, Z
    69dc:	31 81       	ldd	r19, Z+1	; 0x01
    69de:	ca 01       	movw	r24, r20
    69e0:	b9 01       	movw	r22, r18
    69e2:	0e 94 f6 23 	call	0x47ec	; 0x47ec <takediss2>
dir=0;
count=23;
line(1);


for( i=top;i>0;i--)
    69e6:	80 91 b1 0d 	lds	r24, 0x0DB1
    69ea:	90 91 b2 0d 	lds	r25, 0x0DB2
    69ee:	01 97       	sbiw	r24, 0x01	; 1
    69f0:	90 93 b2 0d 	sts	0x0DB2, r25
    69f4:	80 93 b1 0d 	sts	0x0DB1, r24
    69f8:	80 91 b1 0d 	lds	r24, 0x0DB1
    69fc:	90 91 b2 0d 	lds	r25, 0x0DB2
    6a00:	18 16       	cp	r1, r24
    6a02:	19 06       	cpc	r1, r25
    6a04:	0c f4       	brge	.+2      	; 0x6a08 <main+0xd22>
    6a06:	b9 cf       	rjmp	.-142    	; 0x697a <main+0xc94>
{
takediss(proc[i-1],proc[i]);
takediss2(proc[i-1],proc[i]);
}
turnback(tcount*2 ,11);
    6a08:	80 e2       	ldi	r24, 0x20	; 32
    6a0a:	90 e0       	ldi	r25, 0x00	; 0
    6a0c:	6b e0       	ldi	r22, 0x0B	; 11
    6a0e:	70 e0       	ldi	r23, 0x00	; 0
    6a10:	0e 94 41 21 	call	0x4282	; 0x4282 <turnback>
dir=(dir+2)%4;
    6a14:	80 91 0c 03 	lds	r24, 0x030C
    6a18:	90 91 0d 03 	lds	r25, 0x030D
    6a1c:	02 96       	adiw	r24, 0x02	; 2
    6a1e:	24 e0       	ldi	r18, 0x04	; 4
    6a20:	30 e0       	ldi	r19, 0x00	; 0
    6a22:	b9 01       	movw	r22, r18
    6a24:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    6a28:	90 93 0d 03 	sts	0x030D, r25
    6a2c:	80 93 0c 03 	sts	0x030C, r24

for( i=0;i<top;i++)
    6a30:	10 92 b2 0d 	sts	0x0DB2, r1
    6a34:	10 92 b1 0d 	sts	0x0DB1, r1
    6a38:	3f c0       	rjmp	.+126    	; 0x6ab8 <main+0xdd2>
{
takediss(proc[i+1],proc[i]);
    6a3a:	80 91 b1 0d 	lds	r24, 0x0DB1
    6a3e:	90 91 b2 0d 	lds	r25, 0x0DB2
    6a42:	01 96       	adiw	r24, 0x01	; 1
    6a44:	88 0f       	add	r24, r24
    6a46:	99 1f       	adc	r25, r25
    6a48:	fc 01       	movw	r30, r24
    6a4a:	e0 5f       	subi	r30, 0xF0	; 240
    6a4c:	fc 4f       	sbci	r31, 0xFC	; 252
    6a4e:	40 81       	ld	r20, Z
    6a50:	51 81       	ldd	r21, Z+1	; 0x01
    6a52:	80 91 b1 0d 	lds	r24, 0x0DB1
    6a56:	90 91 b2 0d 	lds	r25, 0x0DB2
    6a5a:	88 0f       	add	r24, r24
    6a5c:	99 1f       	adc	r25, r25
    6a5e:	fc 01       	movw	r30, r24
    6a60:	e0 5f       	subi	r30, 0xF0	; 240
    6a62:	fc 4f       	sbci	r31, 0xFC	; 252
    6a64:	20 81       	ld	r18, Z
    6a66:	31 81       	ldd	r19, Z+1	; 0x01
    6a68:	ca 01       	movw	r24, r20
    6a6a:	b9 01       	movw	r22, r18
    6a6c:	0e 94 06 28 	call	0x500c	; 0x500c <takediss>
takediss2(proc[i+1],proc[i]);
    6a70:	80 91 b1 0d 	lds	r24, 0x0DB1
    6a74:	90 91 b2 0d 	lds	r25, 0x0DB2
    6a78:	01 96       	adiw	r24, 0x01	; 1
    6a7a:	88 0f       	add	r24, r24
    6a7c:	99 1f       	adc	r25, r25
    6a7e:	fc 01       	movw	r30, r24
    6a80:	e0 5f       	subi	r30, 0xF0	; 240
    6a82:	fc 4f       	sbci	r31, 0xFC	; 252
    6a84:	40 81       	ld	r20, Z
    6a86:	51 81       	ldd	r21, Z+1	; 0x01
    6a88:	80 91 b1 0d 	lds	r24, 0x0DB1
    6a8c:	90 91 b2 0d 	lds	r25, 0x0DB2
    6a90:	88 0f       	add	r24, r24
    6a92:	99 1f       	adc	r25, r25
    6a94:	fc 01       	movw	r30, r24
    6a96:	e0 5f       	subi	r30, 0xF0	; 240
    6a98:	fc 4f       	sbci	r31, 0xFC	; 252
    6a9a:	20 81       	ld	r18, Z
    6a9c:	31 81       	ldd	r19, Z+1	; 0x01
    6a9e:	ca 01       	movw	r24, r20
    6aa0:	b9 01       	movw	r22, r18
    6aa2:	0e 94 f6 23 	call	0x47ec	; 0x47ec <takediss2>
takediss2(proc[i-1],proc[i]);
}
turnback(tcount*2 ,11);
dir=(dir+2)%4;

for( i=0;i<top;i++)
    6aa6:	80 91 b1 0d 	lds	r24, 0x0DB1
    6aaa:	90 91 b2 0d 	lds	r25, 0x0DB2
    6aae:	01 96       	adiw	r24, 0x01	; 1
    6ab0:	90 93 b2 0d 	sts	0x0DB2, r25
    6ab4:	80 93 b1 0d 	sts	0x0DB1, r24
    6ab8:	20 91 b1 0d 	lds	r18, 0x0DB1
    6abc:	30 91 b2 0d 	lds	r19, 0x0DB2
    6ac0:	80 91 8d 03 	lds	r24, 0x038D
    6ac4:	90 91 8e 03 	lds	r25, 0x038E
    6ac8:	28 17       	cp	r18, r24
    6aca:	39 07       	cpc	r19, r25
    6acc:	0c f4       	brge	.+2      	; 0x6ad0 <main+0xdea>
    6ace:	b5 cf       	rjmp	.-150    	; 0x6a3a <main+0xd54>
    6ad0:	70 c3       	rjmp	.+1760   	; 0x71b2 <main+0x14cc>


}
else {

clear(); lcd_string(" DATA NOT FOUND..... ");
    6ad2:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <clear>
    6ad6:	87 ec       	ldi	r24, 0xC7	; 199
    6ad8:	92 e0       	ldi	r25, 0x02	; 2
    6ada:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>
    6ade:	80 e0       	ldi	r24, 0x00	; 0
    6ae0:	90 e0       	ldi	r25, 0x00	; 0
    6ae2:	aa e7       	ldi	r26, 0x7A	; 122
    6ae4:	b4 e4       	ldi	r27, 0x44	; 68
    6ae6:	8f a3       	std	Y+39, r24	; 0x27
    6ae8:	98 a7       	std	Y+40, r25	; 0x28
    6aea:	a9 a7       	std	Y+41, r26	; 0x29
    6aec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6aee:	6f a1       	ldd	r22, Y+39	; 0x27
    6af0:	78 a5       	ldd	r23, Y+40	; 0x28
    6af2:	89 a5       	ldd	r24, Y+41	; 0x29
    6af4:	9a a5       	ldd	r25, Y+42	; 0x2a
    6af6:	26 e6       	ldi	r18, 0x66	; 102
    6af8:	36 e6       	ldi	r19, 0x66	; 102
    6afa:	46 e6       	ldi	r20, 0x66	; 102
    6afc:	55 e4       	ldi	r21, 0x45	; 69
    6afe:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    6b02:	dc 01       	movw	r26, r24
    6b04:	cb 01       	movw	r24, r22
    6b06:	8b a3       	std	Y+35, r24	; 0x23
    6b08:	9c a3       	std	Y+36, r25	; 0x24
    6b0a:	ad a3       	std	Y+37, r26	; 0x25
    6b0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6b0e:	6b a1       	ldd	r22, Y+35	; 0x23
    6b10:	7c a1       	ldd	r23, Y+36	; 0x24
    6b12:	8d a1       	ldd	r24, Y+37	; 0x25
    6b14:	9e a1       	ldd	r25, Y+38	; 0x26
    6b16:	20 e0       	ldi	r18, 0x00	; 0
    6b18:	30 e0       	ldi	r19, 0x00	; 0
    6b1a:	40 e8       	ldi	r20, 0x80	; 128
    6b1c:	5f e3       	ldi	r21, 0x3F	; 63
    6b1e:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    6b22:	88 23       	and	r24, r24
    6b24:	2c f4       	brge	.+10     	; 0x6b30 <main+0xe4a>
		__ticks = 1;
    6b26:	81 e0       	ldi	r24, 0x01	; 1
    6b28:	90 e0       	ldi	r25, 0x00	; 0
    6b2a:	9a a3       	std	Y+34, r25	; 0x22
    6b2c:	89 a3       	std	Y+33, r24	; 0x21
    6b2e:	3f c0       	rjmp	.+126    	; 0x6bae <main+0xec8>
	else if (__tmp > 65535)
    6b30:	6b a1       	ldd	r22, Y+35	; 0x23
    6b32:	7c a1       	ldd	r23, Y+36	; 0x24
    6b34:	8d a1       	ldd	r24, Y+37	; 0x25
    6b36:	9e a1       	ldd	r25, Y+38	; 0x26
    6b38:	20 e0       	ldi	r18, 0x00	; 0
    6b3a:	3f ef       	ldi	r19, 0xFF	; 255
    6b3c:	4f e7       	ldi	r20, 0x7F	; 127
    6b3e:	57 e4       	ldi	r21, 0x47	; 71
    6b40:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    6b44:	18 16       	cp	r1, r24
    6b46:	4c f5       	brge	.+82     	; 0x6b9a <main+0xeb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b48:	6f a1       	ldd	r22, Y+39	; 0x27
    6b4a:	78 a5       	ldd	r23, Y+40	; 0x28
    6b4c:	89 a5       	ldd	r24, Y+41	; 0x29
    6b4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6b50:	20 e0       	ldi	r18, 0x00	; 0
    6b52:	30 e0       	ldi	r19, 0x00	; 0
    6b54:	40 e2       	ldi	r20, 0x20	; 32
    6b56:	51 e4       	ldi	r21, 0x41	; 65
    6b58:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    6b5c:	dc 01       	movw	r26, r24
    6b5e:	cb 01       	movw	r24, r22
    6b60:	bc 01       	movw	r22, r24
    6b62:	cd 01       	movw	r24, r26
    6b64:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    6b68:	dc 01       	movw	r26, r24
    6b6a:	cb 01       	movw	r24, r22
    6b6c:	9a a3       	std	Y+34, r25	; 0x22
    6b6e:	89 a3       	std	Y+33, r24	; 0x21
    6b70:	0f c0       	rjmp	.+30     	; 0x6b90 <main+0xeaa>
    6b72:	80 e7       	ldi	r24, 0x70	; 112
    6b74:	91 e0       	ldi	r25, 0x01	; 1
    6b76:	98 a3       	std	Y+32, r25	; 0x20
    6b78:	8f 8f       	std	Y+31, r24	; 0x1f
    6b7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6b7c:	98 a1       	ldd	r25, Y+32	; 0x20
    6b7e:	01 97       	sbiw	r24, 0x01	; 1
    6b80:	f1 f7       	brne	.-4      	; 0x6b7e <main+0xe98>
    6b82:	98 a3       	std	Y+32, r25	; 0x20
    6b84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b86:	89 a1       	ldd	r24, Y+33	; 0x21
    6b88:	9a a1       	ldd	r25, Y+34	; 0x22
    6b8a:	01 97       	sbiw	r24, 0x01	; 1
    6b8c:	9a a3       	std	Y+34, r25	; 0x22
    6b8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b90:	89 a1       	ldd	r24, Y+33	; 0x21
    6b92:	9a a1       	ldd	r25, Y+34	; 0x22
    6b94:	00 97       	sbiw	r24, 0x00	; 0
    6b96:	69 f7       	brne	.-38     	; 0x6b72 <main+0xe8c>
    6b98:	14 c0       	rjmp	.+40     	; 0x6bc2 <main+0xedc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b9a:	6b a1       	ldd	r22, Y+35	; 0x23
    6b9c:	7c a1       	ldd	r23, Y+36	; 0x24
    6b9e:	8d a1       	ldd	r24, Y+37	; 0x25
    6ba0:	9e a1       	ldd	r25, Y+38	; 0x26
    6ba2:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    6ba6:	dc 01       	movw	r26, r24
    6ba8:	cb 01       	movw	r24, r22
    6baa:	9a a3       	std	Y+34, r25	; 0x22
    6bac:	89 a3       	std	Y+33, r24	; 0x21
    6bae:	89 a1       	ldd	r24, Y+33	; 0x21
    6bb0:	9a a1       	ldd	r25, Y+34	; 0x22
    6bb2:	9e 8f       	std	Y+30, r25	; 0x1e
    6bb4:	8d 8f       	std	Y+29, r24	; 0x1d
    6bb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6bb8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6bba:	01 97       	sbiw	r24, 0x01	; 1
    6bbc:	f1 f7       	brne	.-4      	; 0x6bba <main+0xed4>
    6bbe:	9e 8f       	std	Y+30, r25	; 0x1e
    6bc0:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(1000);
clear(); lcd_string(" DRY RUN... ");
    6bc2:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <clear>
    6bc6:	8d ed       	ldi	r24, 0xDD	; 221
    6bc8:	92 e0       	ldi	r25, 0x02	; 2
    6bca:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>
    6bce:	80 e0       	ldi	r24, 0x00	; 0
    6bd0:	90 e0       	ldi	r25, 0x00	; 0
    6bd2:	aa e7       	ldi	r26, 0x7A	; 122
    6bd4:	b4 e4       	ldi	r27, 0x44	; 68
    6bd6:	89 8f       	std	Y+25, r24	; 0x19
    6bd8:	9a 8f       	std	Y+26, r25	; 0x1a
    6bda:	ab 8f       	std	Y+27, r26	; 0x1b
    6bdc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6bde:	69 8d       	ldd	r22, Y+25	; 0x19
    6be0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6be2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6be4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6be6:	26 e6       	ldi	r18, 0x66	; 102
    6be8:	36 e6       	ldi	r19, 0x66	; 102
    6bea:	46 e6       	ldi	r20, 0x66	; 102
    6bec:	55 e4       	ldi	r21, 0x45	; 69
    6bee:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    6bf2:	dc 01       	movw	r26, r24
    6bf4:	cb 01       	movw	r24, r22
    6bf6:	8d 8b       	std	Y+21, r24	; 0x15
    6bf8:	9e 8b       	std	Y+22, r25	; 0x16
    6bfa:	af 8b       	std	Y+23, r26	; 0x17
    6bfc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    6c00:	7e 89       	ldd	r23, Y+22	; 0x16
    6c02:	8f 89       	ldd	r24, Y+23	; 0x17
    6c04:	98 8d       	ldd	r25, Y+24	; 0x18
    6c06:	20 e0       	ldi	r18, 0x00	; 0
    6c08:	30 e0       	ldi	r19, 0x00	; 0
    6c0a:	40 e8       	ldi	r20, 0x80	; 128
    6c0c:	5f e3       	ldi	r21, 0x3F	; 63
    6c0e:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    6c12:	88 23       	and	r24, r24
    6c14:	2c f4       	brge	.+10     	; 0x6c20 <main+0xf3a>
		__ticks = 1;
    6c16:	81 e0       	ldi	r24, 0x01	; 1
    6c18:	90 e0       	ldi	r25, 0x00	; 0
    6c1a:	9c 8b       	std	Y+20, r25	; 0x14
    6c1c:	8b 8b       	std	Y+19, r24	; 0x13
    6c1e:	3f c0       	rjmp	.+126    	; 0x6c9e <main+0xfb8>
	else if (__tmp > 65535)
    6c20:	6d 89       	ldd	r22, Y+21	; 0x15
    6c22:	7e 89       	ldd	r23, Y+22	; 0x16
    6c24:	8f 89       	ldd	r24, Y+23	; 0x17
    6c26:	98 8d       	ldd	r25, Y+24	; 0x18
    6c28:	20 e0       	ldi	r18, 0x00	; 0
    6c2a:	3f ef       	ldi	r19, 0xFF	; 255
    6c2c:	4f e7       	ldi	r20, 0x7F	; 127
    6c2e:	57 e4       	ldi	r21, 0x47	; 71
    6c30:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    6c34:	18 16       	cp	r1, r24
    6c36:	4c f5       	brge	.+82     	; 0x6c8a <main+0xfa4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c38:	69 8d       	ldd	r22, Y+25	; 0x19
    6c3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6c3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c40:	20 e0       	ldi	r18, 0x00	; 0
    6c42:	30 e0       	ldi	r19, 0x00	; 0
    6c44:	40 e2       	ldi	r20, 0x20	; 32
    6c46:	51 e4       	ldi	r21, 0x41	; 65
    6c48:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    6c4c:	dc 01       	movw	r26, r24
    6c4e:	cb 01       	movw	r24, r22
    6c50:	bc 01       	movw	r22, r24
    6c52:	cd 01       	movw	r24, r26
    6c54:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    6c58:	dc 01       	movw	r26, r24
    6c5a:	cb 01       	movw	r24, r22
    6c5c:	9c 8b       	std	Y+20, r25	; 0x14
    6c5e:	8b 8b       	std	Y+19, r24	; 0x13
    6c60:	0f c0       	rjmp	.+30     	; 0x6c80 <main+0xf9a>
    6c62:	80 e7       	ldi	r24, 0x70	; 112
    6c64:	91 e0       	ldi	r25, 0x01	; 1
    6c66:	9a 8b       	std	Y+18, r25	; 0x12
    6c68:	89 8b       	std	Y+17, r24	; 0x11
    6c6a:	89 89       	ldd	r24, Y+17	; 0x11
    6c6c:	9a 89       	ldd	r25, Y+18	; 0x12
    6c6e:	01 97       	sbiw	r24, 0x01	; 1
    6c70:	f1 f7       	brne	.-4      	; 0x6c6e <main+0xf88>
    6c72:	9a 8b       	std	Y+18, r25	; 0x12
    6c74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c76:	8b 89       	ldd	r24, Y+19	; 0x13
    6c78:	9c 89       	ldd	r25, Y+20	; 0x14
    6c7a:	01 97       	sbiw	r24, 0x01	; 1
    6c7c:	9c 8b       	std	Y+20, r25	; 0x14
    6c7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c80:	8b 89       	ldd	r24, Y+19	; 0x13
    6c82:	9c 89       	ldd	r25, Y+20	; 0x14
    6c84:	00 97       	sbiw	r24, 0x00	; 0
    6c86:	69 f7       	brne	.-38     	; 0x6c62 <main+0xf7c>
    6c88:	14 c0       	rjmp	.+40     	; 0x6cb2 <main+0xfcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    6c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    6c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    6c90:	98 8d       	ldd	r25, Y+24	; 0x18
    6c92:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    6c96:	dc 01       	movw	r26, r24
    6c98:	cb 01       	movw	r24, r22
    6c9a:	9c 8b       	std	Y+20, r25	; 0x14
    6c9c:	8b 8b       	std	Y+19, r24	; 0x13
    6c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    6ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    6ca2:	98 8b       	std	Y+16, r25	; 0x10
    6ca4:	8f 87       	std	Y+15, r24	; 0x0f
    6ca6:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ca8:	98 89       	ldd	r25, Y+16	; 0x10
    6caa:	01 97       	sbiw	r24, 0x01	; 1
    6cac:	f1 f7       	brne	.-4      	; 0x6caa <main+0xfc4>
    6cae:	98 8b       	std	Y+16, r25	; 0x10
    6cb0:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1000);
int x,y,current=-1;
    6cb2:	fe 01       	movw	r30, r28
    6cb4:	e1 58       	subi	r30, 0x81	; 129
    6cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    6cb8:	8f ef       	ldi	r24, 0xFF	; 255
    6cba:	9f ef       	ldi	r25, 0xFF	; 255
    6cbc:	91 83       	std	Z+1, r25	; 0x01
    6cbe:	80 83       	st	Z, r24
/*
lcd_cursor(1,1);
lcd_string("cas dir dan X Y");
lcd_cursor(1,1);
*/
for(x=0;x<=5;x++)
    6cc0:	fe 01       	movw	r30, r28
    6cc2:	ed 57       	subi	r30, 0x7D	; 125
    6cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    6cc6:	11 82       	std	Z+1, r1	; 0x01
    6cc8:	10 82       	st	Z, r1
    6cca:	71 c1       	rjmp	.+738    	; 0x6fae <main+0x12c8>
{
  for(y=0;y<=5;y++)
    6ccc:	fe 01       	movw	r30, r28
    6cce:	ef 57       	subi	r30, 0x7F	; 127
    6cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    6cd2:	11 82       	std	Z+1, r1	; 0x01
    6cd4:	10 82       	st	Z, r1
    6cd6:	9d c0       	rjmp	.+314    	; 0x6e12 <main+0x112c>
  {
         takediss(6*x+y,current);
    6cd8:	fe 01       	movw	r30, r28
    6cda:	ed 57       	subi	r30, 0x7D	; 125
    6cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    6cde:	20 81       	ld	r18, Z
    6ce0:	31 81       	ldd	r19, Z+1	; 0x01
    6ce2:	c9 01       	movw	r24, r18
    6ce4:	88 0f       	add	r24, r24
    6ce6:	99 1f       	adc	r25, r25
    6ce8:	82 0f       	add	r24, r18
    6cea:	93 1f       	adc	r25, r19
    6cec:	88 0f       	add	r24, r24
    6cee:	99 1f       	adc	r25, r25
    6cf0:	9c 01       	movw	r18, r24
    6cf2:	fe 01       	movw	r30, r28
    6cf4:	ef 57       	subi	r30, 0x7F	; 127
    6cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    6cf8:	80 81       	ld	r24, Z
    6cfa:	91 81       	ldd	r25, Z+1	; 0x01
    6cfc:	82 0f       	add	r24, r18
    6cfe:	93 1f       	adc	r25, r19
    6d00:	fe 01       	movw	r30, r28
    6d02:	e1 58       	subi	r30, 0x81	; 129
    6d04:	ff 4f       	sbci	r31, 0xFF	; 255
    6d06:	20 81       	ld	r18, Z
    6d08:	31 81       	ldd	r19, Z+1	; 0x01
    6d0a:	b9 01       	movw	r22, r18
    6d0c:	0e 94 06 28 	call	0x500c	; 0x500c <takediss>
 
  
 
  if(cas>=0 && cas<=3)
    6d10:	80 91 08 03 	lds	r24, 0x0308
    6d14:	90 91 09 03 	lds	r25, 0x0309
    6d18:	99 23       	and	r25, r25
    6d1a:	ac f1       	brlt	.+106    	; 0x6d86 <main+0x10a0>
    6d1c:	80 91 08 03 	lds	r24, 0x0308
    6d20:	90 91 09 03 	lds	r25, 0x0309
    6d24:	84 30       	cpi	r24, 0x04	; 4
    6d26:	91 05       	cpc	r25, r1
    6d28:	74 f5       	brge	.+92     	; 0x6d86 <main+0x10a0>
  arr[x][y]=(cas+dir)%4+dan;
    6d2a:	fe 01       	movw	r30, r28
    6d2c:	ed 57       	subi	r30, 0x7D	; 125
    6d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    6d30:	00 81       	ld	r16, Z
    6d32:	11 81       	ldd	r17, Z+1	; 0x01
    6d34:	fe 01       	movw	r30, r28
    6d36:	ef 57       	subi	r30, 0x7F	; 127
    6d38:	ff 4f       	sbci	r31, 0xFF	; 255
    6d3a:	01 90       	ld	r0, Z+
    6d3c:	f0 81       	ld	r31, Z
    6d3e:	e0 2d       	mov	r30, r0
    6d40:	20 91 08 03 	lds	r18, 0x0308
    6d44:	30 91 09 03 	lds	r19, 0x0309
    6d48:	80 91 0c 03 	lds	r24, 0x030C
    6d4c:	90 91 0d 03 	lds	r25, 0x030D
    6d50:	82 0f       	add	r24, r18
    6d52:	93 1f       	adc	r25, r19
    6d54:	24 e0       	ldi	r18, 0x04	; 4
    6d56:	30 e0       	ldi	r19, 0x00	; 0
    6d58:	b9 01       	movw	r22, r18
    6d5a:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    6d5e:	28 2f       	mov	r18, r24
    6d60:	80 91 88 03 	lds	r24, 0x0388
    6d64:	90 91 89 03 	lds	r25, 0x0389
    6d68:	28 0f       	add	r18, r24
    6d6a:	c8 01       	movw	r24, r16
    6d6c:	88 0f       	add	r24, r24
    6d6e:	99 1f       	adc	r25, r25
    6d70:	80 0f       	add	r24, r16
    6d72:	91 1f       	adc	r25, r17
    6d74:	88 0f       	add	r24, r24
    6d76:	99 1f       	adc	r25, r25
    6d78:	8e 0f       	add	r24, r30
    6d7a:	9f 1f       	adc	r25, r31
    6d7c:	fc 01       	movw	r30, r24
    6d7e:	e8 5a       	subi	r30, 0xA8	; 168
    6d80:	fc 4f       	sbci	r31, 0xFC	; 252
    6d82:	20 83       	st	Z, r18
    6d84:	21 c0       	rjmp	.+66     	; 0x6dc8 <main+0x10e2>
  else arr[x][y]=cas+dan;
    6d86:	fe 01       	movw	r30, r28
    6d88:	ed 57       	subi	r30, 0x7D	; 125
    6d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d8c:	20 81       	ld	r18, Z
    6d8e:	31 81       	ldd	r19, Z+1	; 0x01
    6d90:	fe 01       	movw	r30, r28
    6d92:	ef 57       	subi	r30, 0x7F	; 127
    6d94:	ff 4f       	sbci	r31, 0xFF	; 255
    6d96:	60 81       	ld	r22, Z
    6d98:	71 81       	ldd	r23, Z+1	; 0x01
    6d9a:	80 91 08 03 	lds	r24, 0x0308
    6d9e:	90 91 09 03 	lds	r25, 0x0309
    6da2:	48 2f       	mov	r20, r24
    6da4:	80 91 88 03 	lds	r24, 0x0388
    6da8:	90 91 89 03 	lds	r25, 0x0389
    6dac:	48 0f       	add	r20, r24
    6dae:	c9 01       	movw	r24, r18
    6db0:	88 0f       	add	r24, r24
    6db2:	99 1f       	adc	r25, r25
    6db4:	82 0f       	add	r24, r18
    6db6:	93 1f       	adc	r25, r19
    6db8:	88 0f       	add	r24, r24
    6dba:	99 1f       	adc	r25, r25
    6dbc:	86 0f       	add	r24, r22
    6dbe:	97 1f       	adc	r25, r23
    6dc0:	fc 01       	movw	r30, r24
    6dc2:	e8 5a       	subi	r30, 0xA8	; 168
    6dc4:	fc 4f       	sbci	r31, 0xFC	; 252
    6dc6:	40 83       	st	Z, r20
    

  current=6*x+y;
    6dc8:	fe 01       	movw	r30, r28
    6dca:	ed 57       	subi	r30, 0x7D	; 125
    6dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    6dce:	20 81       	ld	r18, Z
    6dd0:	31 81       	ldd	r19, Z+1	; 0x01
    6dd2:	c9 01       	movw	r24, r18
    6dd4:	88 0f       	add	r24, r24
    6dd6:	99 1f       	adc	r25, r25
    6dd8:	82 0f       	add	r24, r18
    6dda:	93 1f       	adc	r25, r19
    6ddc:	88 0f       	add	r24, r24
    6dde:	99 1f       	adc	r25, r25
    6de0:	9c 01       	movw	r18, r24
    6de2:	de 01       	movw	r26, r28
    6de4:	a1 58       	subi	r26, 0x81	; 129
    6de6:	bf 4f       	sbci	r27, 0xFF	; 255
    6de8:	fe 01       	movw	r30, r28
    6dea:	ef 57       	subi	r30, 0x7F	; 127
    6dec:	ff 4f       	sbci	r31, 0xFF	; 255
    6dee:	80 81       	ld	r24, Z
    6df0:	91 81       	ldd	r25, Z+1	; 0x01
    6df2:	82 0f       	add	r24, r18
    6df4:	93 1f       	adc	r25, r19
    6df6:	8d 93       	st	X+, r24
    6df8:	9c 93       	st	X, r25
lcd_string("cas dir dan X Y");
lcd_cursor(1,1);
*/
for(x=0;x<=5;x++)
{
  for(y=0;y<=5;y++)
    6dfa:	de 01       	movw	r26, r28
    6dfc:	af 57       	subi	r26, 0x7F	; 127
    6dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    6e00:	fe 01       	movw	r30, r28
    6e02:	ef 57       	subi	r30, 0x7F	; 127
    6e04:	ff 4f       	sbci	r31, 0xFF	; 255
    6e06:	80 81       	ld	r24, Z
    6e08:	91 81       	ldd	r25, Z+1	; 0x01
    6e0a:	01 96       	adiw	r24, 0x01	; 1
    6e0c:	11 96       	adiw	r26, 0x01	; 1
    6e0e:	9c 93       	st	X, r25
    6e10:	8e 93       	st	-X, r24
    6e12:	fe 01       	movw	r30, r28
    6e14:	ef 57       	subi	r30, 0x7F	; 127
    6e16:	ff 4f       	sbci	r31, 0xFF	; 255
    6e18:	80 81       	ld	r24, Z
    6e1a:	91 81       	ldd	r25, Z+1	; 0x01
    6e1c:	86 30       	cpi	r24, 0x06	; 6
    6e1e:	91 05       	cpc	r25, r1
    6e20:	0c f4       	brge	.+2      	; 0x6e24 <main+0x113e>
    6e22:	5a cf       	rjmp	.-332    	; 0x6cd8 <main+0xff2>
lcd_number(2,10,dan,1);
lcd_number(2,13,current/6,1);
lcd_number(2,15,current%6,1);*/
  //_delay_ms(2000);
  }
  x++;
    6e24:	de 01       	movw	r26, r28
    6e26:	ad 57       	subi	r26, 0x7D	; 125
    6e28:	bf 4f       	sbci	r27, 0xFF	; 255
    6e2a:	fe 01       	movw	r30, r28
    6e2c:	ed 57       	subi	r30, 0x7D	; 125
    6e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    6e30:	80 81       	ld	r24, Z
    6e32:	91 81       	ldd	r25, Z+1	; 0x01
    6e34:	01 96       	adiw	r24, 0x01	; 1
    6e36:	11 96       	adiw	r26, 0x01	; 1
    6e38:	9c 93       	st	X, r25
    6e3a:	8e 93       	st	-X, r24
  for(y=5;y>=0;y--)
    6e3c:	fe 01       	movw	r30, r28
    6e3e:	ef 57       	subi	r30, 0x7F	; 127
    6e40:	ff 4f       	sbci	r31, 0xFF	; 255
    6e42:	85 e0       	ldi	r24, 0x05	; 5
    6e44:	90 e0       	ldi	r25, 0x00	; 0
    6e46:	91 83       	std	Z+1, r25	; 0x01
    6e48:	80 83       	st	Z, r24
    6e4a:	9d c0       	rjmp	.+314    	; 0x6f86 <main+0x12a0>
  {
  
 takediss(6*x+y,current);
    6e4c:	fe 01       	movw	r30, r28
    6e4e:	ed 57       	subi	r30, 0x7D	; 125
    6e50:	ff 4f       	sbci	r31, 0xFF	; 255
    6e52:	20 81       	ld	r18, Z
    6e54:	31 81       	ldd	r19, Z+1	; 0x01
    6e56:	c9 01       	movw	r24, r18
    6e58:	88 0f       	add	r24, r24
    6e5a:	99 1f       	adc	r25, r25
    6e5c:	82 0f       	add	r24, r18
    6e5e:	93 1f       	adc	r25, r19
    6e60:	88 0f       	add	r24, r24
    6e62:	99 1f       	adc	r25, r25
    6e64:	9c 01       	movw	r18, r24
    6e66:	fe 01       	movw	r30, r28
    6e68:	ef 57       	subi	r30, 0x7F	; 127
    6e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e6c:	80 81       	ld	r24, Z
    6e6e:	91 81       	ldd	r25, Z+1	; 0x01
    6e70:	82 0f       	add	r24, r18
    6e72:	93 1f       	adc	r25, r19
    6e74:	fe 01       	movw	r30, r28
    6e76:	e1 58       	subi	r30, 0x81	; 129
    6e78:	ff 4f       	sbci	r31, 0xFF	; 255
    6e7a:	20 81       	ld	r18, Z
    6e7c:	31 81       	ldd	r19, Z+1	; 0x01
    6e7e:	b9 01       	movw	r22, r18
    6e80:	0e 94 06 28 	call	0x500c	; 0x500c <takediss>
  
 
  if(cas>=0 && cas<=3)
    6e84:	80 91 08 03 	lds	r24, 0x0308
    6e88:	90 91 09 03 	lds	r25, 0x0309
    6e8c:	99 23       	and	r25, r25
    6e8e:	ac f1       	brlt	.+106    	; 0x6efa <main+0x1214>
    6e90:	80 91 08 03 	lds	r24, 0x0308
    6e94:	90 91 09 03 	lds	r25, 0x0309
    6e98:	84 30       	cpi	r24, 0x04	; 4
    6e9a:	91 05       	cpc	r25, r1
    6e9c:	74 f5       	brge	.+92     	; 0x6efa <main+0x1214>
  arr[x][y]=(cas+dir)%4+dan;
    6e9e:	fe 01       	movw	r30, r28
    6ea0:	ed 57       	subi	r30, 0x7D	; 125
    6ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    6ea4:	00 81       	ld	r16, Z
    6ea6:	11 81       	ldd	r17, Z+1	; 0x01
    6ea8:	fe 01       	movw	r30, r28
    6eaa:	ef 57       	subi	r30, 0x7F	; 127
    6eac:	ff 4f       	sbci	r31, 0xFF	; 255
    6eae:	01 90       	ld	r0, Z+
    6eb0:	f0 81       	ld	r31, Z
    6eb2:	e0 2d       	mov	r30, r0
    6eb4:	20 91 08 03 	lds	r18, 0x0308
    6eb8:	30 91 09 03 	lds	r19, 0x0309
    6ebc:	80 91 0c 03 	lds	r24, 0x030C
    6ec0:	90 91 0d 03 	lds	r25, 0x030D
    6ec4:	82 0f       	add	r24, r18
    6ec6:	93 1f       	adc	r25, r19
    6ec8:	24 e0       	ldi	r18, 0x04	; 4
    6eca:	30 e0       	ldi	r19, 0x00	; 0
    6ecc:	b9 01       	movw	r22, r18
    6ece:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__divmodhi4>
    6ed2:	28 2f       	mov	r18, r24
    6ed4:	80 91 88 03 	lds	r24, 0x0388
    6ed8:	90 91 89 03 	lds	r25, 0x0389
    6edc:	28 0f       	add	r18, r24
    6ede:	c8 01       	movw	r24, r16
    6ee0:	88 0f       	add	r24, r24
    6ee2:	99 1f       	adc	r25, r25
    6ee4:	80 0f       	add	r24, r16
    6ee6:	91 1f       	adc	r25, r17
    6ee8:	88 0f       	add	r24, r24
    6eea:	99 1f       	adc	r25, r25
    6eec:	8e 0f       	add	r24, r30
    6eee:	9f 1f       	adc	r25, r31
    6ef0:	fc 01       	movw	r30, r24
    6ef2:	e8 5a       	subi	r30, 0xA8	; 168
    6ef4:	fc 4f       	sbci	r31, 0xFC	; 252
    6ef6:	20 83       	st	Z, r18
    6ef8:	21 c0       	rjmp	.+66     	; 0x6f3c <main+0x1256>
  else arr[x][y]=cas+dan;
    6efa:	fe 01       	movw	r30, r28
    6efc:	ed 57       	subi	r30, 0x7D	; 125
    6efe:	ff 4f       	sbci	r31, 0xFF	; 255
    6f00:	20 81       	ld	r18, Z
    6f02:	31 81       	ldd	r19, Z+1	; 0x01
    6f04:	fe 01       	movw	r30, r28
    6f06:	ef 57       	subi	r30, 0x7F	; 127
    6f08:	ff 4f       	sbci	r31, 0xFF	; 255
    6f0a:	60 81       	ld	r22, Z
    6f0c:	71 81       	ldd	r23, Z+1	; 0x01
    6f0e:	80 91 08 03 	lds	r24, 0x0308
    6f12:	90 91 09 03 	lds	r25, 0x0309
    6f16:	48 2f       	mov	r20, r24
    6f18:	80 91 88 03 	lds	r24, 0x0388
    6f1c:	90 91 89 03 	lds	r25, 0x0389
    6f20:	48 0f       	add	r20, r24
    6f22:	c9 01       	movw	r24, r18
    6f24:	88 0f       	add	r24, r24
    6f26:	99 1f       	adc	r25, r25
    6f28:	82 0f       	add	r24, r18
    6f2a:	93 1f       	adc	r25, r19
    6f2c:	88 0f       	add	r24, r24
    6f2e:	99 1f       	adc	r25, r25
    6f30:	86 0f       	add	r24, r22
    6f32:	97 1f       	adc	r25, r23
    6f34:	fc 01       	movw	r30, r24
    6f36:	e8 5a       	subi	r30, 0xA8	; 168
    6f38:	fc 4f       	sbci	r31, 0xFC	; 252
    6f3a:	40 83       	st	Z, r20
  
  current=6*x+y;
    6f3c:	fe 01       	movw	r30, r28
    6f3e:	ed 57       	subi	r30, 0x7D	; 125
    6f40:	ff 4f       	sbci	r31, 0xFF	; 255
    6f42:	20 81       	ld	r18, Z
    6f44:	31 81       	ldd	r19, Z+1	; 0x01
    6f46:	c9 01       	movw	r24, r18
    6f48:	88 0f       	add	r24, r24
    6f4a:	99 1f       	adc	r25, r25
    6f4c:	82 0f       	add	r24, r18
    6f4e:	93 1f       	adc	r25, r19
    6f50:	88 0f       	add	r24, r24
    6f52:	99 1f       	adc	r25, r25
    6f54:	9c 01       	movw	r18, r24
    6f56:	de 01       	movw	r26, r28
    6f58:	a1 58       	subi	r26, 0x81	; 129
    6f5a:	bf 4f       	sbci	r27, 0xFF	; 255
    6f5c:	fe 01       	movw	r30, r28
    6f5e:	ef 57       	subi	r30, 0x7F	; 127
    6f60:	ff 4f       	sbci	r31, 0xFF	; 255
    6f62:	80 81       	ld	r24, Z
    6f64:	91 81       	ldd	r25, Z+1	; 0x01
    6f66:	82 0f       	add	r24, r18
    6f68:	93 1f       	adc	r25, r19
    6f6a:	8d 93       	st	X+, r24
    6f6c:	9c 93       	st	X, r25
lcd_number(2,13,current/6,1);
lcd_number(2,15,current%6,1);*/
  //_delay_ms(2000);
  }
  x++;
  for(y=5;y>=0;y--)
    6f6e:	de 01       	movw	r26, r28
    6f70:	af 57       	subi	r26, 0x7F	; 127
    6f72:	bf 4f       	sbci	r27, 0xFF	; 255
    6f74:	fe 01       	movw	r30, r28
    6f76:	ef 57       	subi	r30, 0x7F	; 127
    6f78:	ff 4f       	sbci	r31, 0xFF	; 255
    6f7a:	80 81       	ld	r24, Z
    6f7c:	91 81       	ldd	r25, Z+1	; 0x01
    6f7e:	01 97       	sbiw	r24, 0x01	; 1
    6f80:	11 96       	adiw	r26, 0x01	; 1
    6f82:	9c 93       	st	X, r25
    6f84:	8e 93       	st	-X, r24
    6f86:	fe 01       	movw	r30, r28
    6f88:	ef 57       	subi	r30, 0x7F	; 127
    6f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    6f8c:	80 81       	ld	r24, Z
    6f8e:	91 81       	ldd	r25, Z+1	; 0x01
    6f90:	99 23       	and	r25, r25
    6f92:	0c f0       	brlt	.+2      	; 0x6f96 <main+0x12b0>
    6f94:	5b cf       	rjmp	.-330    	; 0x6e4c <main+0x1166>
/*
lcd_cursor(1,1);
lcd_string("cas dir dan X Y");
lcd_cursor(1,1);
*/
for(x=0;x<=5;x++)
    6f96:	de 01       	movw	r26, r28
    6f98:	ad 57       	subi	r26, 0x7D	; 125
    6f9a:	bf 4f       	sbci	r27, 0xFF	; 255
    6f9c:	fe 01       	movw	r30, r28
    6f9e:	ed 57       	subi	r30, 0x7D	; 125
    6fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    6fa2:	80 81       	ld	r24, Z
    6fa4:	91 81       	ldd	r25, Z+1	; 0x01
    6fa6:	01 96       	adiw	r24, 0x01	; 1
    6fa8:	11 96       	adiw	r26, 0x01	; 1
    6faa:	9c 93       	st	X, r25
    6fac:	8e 93       	st	-X, r24
    6fae:	fe 01       	movw	r30, r28
    6fb0:	ed 57       	subi	r30, 0x7D	; 125
    6fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    6fb4:	80 81       	ld	r24, Z
    6fb6:	91 81       	ldd	r25, Z+1	; 0x01
    6fb8:	86 30       	cpi	r24, 0x06	; 6
    6fba:	91 05       	cpc	r25, r1
    6fbc:	0c f4       	brge	.+2      	; 0x6fc0 <main+0x12da>
    6fbe:	86 ce       	rjmp	.-756    	; 0x6ccc <main+0xfe6>




//writing in eeprom
for(x=0;x<=5;x++)
    6fc0:	fe 01       	movw	r30, r28
    6fc2:	ed 57       	subi	r30, 0x7D	; 125
    6fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    6fc6:	11 82       	std	Z+1, r1	; 0x01
    6fc8:	10 82       	st	Z, r1
    6fca:	5f c0       	rjmp	.+190    	; 0x708a <main+0x13a4>
 for(y=0;y<=5;y++)
    6fcc:	fe 01       	movw	r30, r28
    6fce:	ef 57       	subi	r30, 0x7F	; 127
    6fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    6fd2:	11 82       	std	Z+1, r1	; 0x01
    6fd4:	10 82       	st	Z, r1
    6fd6:	44 c0       	rjmp	.+136    	; 0x7060 <main+0x137a>
{eeprom_write_byte  (L_ADD+6*x+y,arr[x][y]+48);
    6fd8:	fe 01       	movw	r30, r28
    6fda:	ed 57       	subi	r30, 0x7D	; 125
    6fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    6fde:	20 81       	ld	r18, Z
    6fe0:	31 81       	ldd	r19, Z+1	; 0x01
    6fe2:	c9 01       	movw	r24, r18
    6fe4:	88 0f       	add	r24, r24
    6fe6:	99 1f       	adc	r25, r25
    6fe8:	82 0f       	add	r24, r18
    6fea:	93 1f       	adc	r25, r19
    6fec:	88 0f       	add	r24, r24
    6fee:	99 1f       	adc	r25, r25
    6ff0:	9c 01       	movw	r18, r24
    6ff2:	80 91 22 02 	lds	r24, 0x0222
    6ff6:	90 91 23 02 	lds	r25, 0x0223
    6ffa:	28 0f       	add	r18, r24
    6ffc:	39 1f       	adc	r19, r25
    6ffe:	fe 01       	movw	r30, r28
    7000:	ef 57       	subi	r30, 0x7F	; 127
    7002:	ff 4f       	sbci	r31, 0xFF	; 255
    7004:	80 81       	ld	r24, Z
    7006:	91 81       	ldd	r25, Z+1	; 0x01
    7008:	82 0f       	add	r24, r18
    700a:	93 1f       	adc	r25, r19
    700c:	bc 01       	movw	r22, r24
    700e:	fe 01       	movw	r30, r28
    7010:	ed 57       	subi	r30, 0x7D	; 125
    7012:	ff 4f       	sbci	r31, 0xFF	; 255
    7014:	20 81       	ld	r18, Z
    7016:	31 81       	ldd	r19, Z+1	; 0x01
    7018:	fe 01       	movw	r30, r28
    701a:	ef 57       	subi	r30, 0x7F	; 127
    701c:	ff 4f       	sbci	r31, 0xFF	; 255
    701e:	40 81       	ld	r20, Z
    7020:	51 81       	ldd	r21, Z+1	; 0x01
    7022:	c9 01       	movw	r24, r18
    7024:	88 0f       	add	r24, r24
    7026:	99 1f       	adc	r25, r25
    7028:	82 0f       	add	r24, r18
    702a:	93 1f       	adc	r25, r19
    702c:	88 0f       	add	r24, r24
    702e:	99 1f       	adc	r25, r25
    7030:	84 0f       	add	r24, r20
    7032:	95 1f       	adc	r25, r21
    7034:	fc 01       	movw	r30, r24
    7036:	e8 5a       	subi	r30, 0xA8	; 168
    7038:	fc 4f       	sbci	r31, 0xFC	; 252
    703a:	80 81       	ld	r24, Z
    703c:	28 2f       	mov	r18, r24
    703e:	20 5d       	subi	r18, 0xD0	; 208
    7040:	cb 01       	movw	r24, r22
    7042:	62 2f       	mov	r22, r18
    7044:	0e 94 e5 38 	call	0x71ca	; 0x71ca <eeprom_write_byte>



//writing in eeprom
for(x=0;x<=5;x++)
 for(y=0;y<=5;y++)
    7048:	de 01       	movw	r26, r28
    704a:	af 57       	subi	r26, 0x7F	; 127
    704c:	bf 4f       	sbci	r27, 0xFF	; 255
    704e:	fe 01       	movw	r30, r28
    7050:	ef 57       	subi	r30, 0x7F	; 127
    7052:	ff 4f       	sbci	r31, 0xFF	; 255
    7054:	80 81       	ld	r24, Z
    7056:	91 81       	ldd	r25, Z+1	; 0x01
    7058:	01 96       	adiw	r24, 0x01	; 1
    705a:	11 96       	adiw	r26, 0x01	; 1
    705c:	9c 93       	st	X, r25
    705e:	8e 93       	st	-X, r24
    7060:	fe 01       	movw	r30, r28
    7062:	ef 57       	subi	r30, 0x7F	; 127
    7064:	ff 4f       	sbci	r31, 0xFF	; 255
    7066:	80 81       	ld	r24, Z
    7068:	91 81       	ldd	r25, Z+1	; 0x01
    706a:	86 30       	cpi	r24, 0x06	; 6
    706c:	91 05       	cpc	r25, r1
    706e:	0c f4       	brge	.+2      	; 0x7072 <main+0x138c>
    7070:	b3 cf       	rjmp	.-154    	; 0x6fd8 <main+0x12f2>




//writing in eeprom
for(x=0;x<=5;x++)
    7072:	de 01       	movw	r26, r28
    7074:	ad 57       	subi	r26, 0x7D	; 125
    7076:	bf 4f       	sbci	r27, 0xFF	; 255
    7078:	fe 01       	movw	r30, r28
    707a:	ed 57       	subi	r30, 0x7D	; 125
    707c:	ff 4f       	sbci	r31, 0xFF	; 255
    707e:	80 81       	ld	r24, Z
    7080:	91 81       	ldd	r25, Z+1	; 0x01
    7082:	01 96       	adiw	r24, 0x01	; 1
    7084:	11 96       	adiw	r26, 0x01	; 1
    7086:	9c 93       	st	X, r25
    7088:	8e 93       	st	-X, r24
    708a:	fe 01       	movw	r30, r28
    708c:	ed 57       	subi	r30, 0x7D	; 125
    708e:	ff 4f       	sbci	r31, 0xFF	; 255
    7090:	80 81       	ld	r24, Z
    7092:	91 81       	ldd	r25, Z+1	; 0x01
    7094:	86 30       	cpi	r24, 0x06	; 6
    7096:	91 05       	cpc	r25, r1
    7098:	0c f4       	brge	.+2      	; 0x709c <main+0x13b6>
    709a:	98 cf       	rjmp	.-208    	; 0x6fcc <main+0x12e6>
 for(y=0;y<=5;y++)
{eeprom_write_byte  (L_ADD+6*x+y,arr[x][y]+48);

}
PORTC |= 0b00001000;
    709c:	a8 e2       	ldi	r26, 0x28	; 40
    709e:	b0 e0       	ldi	r27, 0x00	; 0
    70a0:	e8 e2       	ldi	r30, 0x28	; 40
    70a2:	f0 e0       	ldi	r31, 0x00	; 0
    70a4:	80 81       	ld	r24, Z
    70a6:	88 60       	ori	r24, 0x08	; 8
    70a8:	8c 93       	st	X, r24
    70aa:	80 e0       	ldi	r24, 0x00	; 0
    70ac:	90 e0       	ldi	r25, 0x00	; 0
    70ae:	aa ef       	ldi	r26, 0xFA	; 250
    70b0:	b3 e4       	ldi	r27, 0x43	; 67
    70b2:	8b 87       	std	Y+11, r24	; 0x0b
    70b4:	9c 87       	std	Y+12, r25	; 0x0c
    70b6:	ad 87       	std	Y+13, r26	; 0x0d
    70b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    70ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    70bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    70be:	8d 85       	ldd	r24, Y+13	; 0x0d
    70c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    70c2:	26 e6       	ldi	r18, 0x66	; 102
    70c4:	36 e6       	ldi	r19, 0x66	; 102
    70c6:	46 e6       	ldi	r20, 0x66	; 102
    70c8:	55 e4       	ldi	r21, 0x45	; 69
    70ca:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    70ce:	dc 01       	movw	r26, r24
    70d0:	cb 01       	movw	r24, r22
    70d2:	8f 83       	std	Y+7, r24	; 0x07
    70d4:	98 87       	std	Y+8, r25	; 0x08
    70d6:	a9 87       	std	Y+9, r26	; 0x09
    70d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    70da:	6f 81       	ldd	r22, Y+7	; 0x07
    70dc:	78 85       	ldd	r23, Y+8	; 0x08
    70de:	89 85       	ldd	r24, Y+9	; 0x09
    70e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    70e2:	20 e0       	ldi	r18, 0x00	; 0
    70e4:	30 e0       	ldi	r19, 0x00	; 0
    70e6:	40 e8       	ldi	r20, 0x80	; 128
    70e8:	5f e3       	ldi	r21, 0x3F	; 63
    70ea:	0e 94 3f 3c 	call	0x787e	; 0x787e <__ltsf2>
    70ee:	88 23       	and	r24, r24
    70f0:	2c f4       	brge	.+10     	; 0x70fc <main+0x1416>
		__ticks = 1;
    70f2:	81 e0       	ldi	r24, 0x01	; 1
    70f4:	90 e0       	ldi	r25, 0x00	; 0
    70f6:	9e 83       	std	Y+6, r25	; 0x06
    70f8:	8d 83       	std	Y+5, r24	; 0x05
    70fa:	3f c0       	rjmp	.+126    	; 0x717a <main+0x1494>
	else if (__tmp > 65535)
    70fc:	6f 81       	ldd	r22, Y+7	; 0x07
    70fe:	78 85       	ldd	r23, Y+8	; 0x08
    7100:	89 85       	ldd	r24, Y+9	; 0x09
    7102:	9a 85       	ldd	r25, Y+10	; 0x0a
    7104:	20 e0       	ldi	r18, 0x00	; 0
    7106:	3f ef       	ldi	r19, 0xFF	; 255
    7108:	4f e7       	ldi	r20, 0x7F	; 127
    710a:	57 e4       	ldi	r21, 0x47	; 71
    710c:	0e 94 df 3b 	call	0x77be	; 0x77be <__gtsf2>
    7110:	18 16       	cp	r1, r24
    7112:	4c f5       	brge	.+82     	; 0x7166 <main+0x1480>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7114:	6b 85       	ldd	r22, Y+11	; 0x0b
    7116:	7c 85       	ldd	r23, Y+12	; 0x0c
    7118:	8d 85       	ldd	r24, Y+13	; 0x0d
    711a:	9e 85       	ldd	r25, Y+14	; 0x0e
    711c:	20 e0       	ldi	r18, 0x00	; 0
    711e:	30 e0       	ldi	r19, 0x00	; 0
    7120:	40 e2       	ldi	r20, 0x20	; 32
    7122:	51 e4       	ldi	r21, 0x41	; 65
    7124:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__mulsf3>
    7128:	dc 01       	movw	r26, r24
    712a:	cb 01       	movw	r24, r22
    712c:	bc 01       	movw	r22, r24
    712e:	cd 01       	movw	r24, r26
    7130:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    7134:	dc 01       	movw	r26, r24
    7136:	cb 01       	movw	r24, r22
    7138:	9e 83       	std	Y+6, r25	; 0x06
    713a:	8d 83       	std	Y+5, r24	; 0x05
    713c:	0f c0       	rjmp	.+30     	; 0x715c <main+0x1476>
    713e:	80 e7       	ldi	r24, 0x70	; 112
    7140:	91 e0       	ldi	r25, 0x01	; 1
    7142:	9c 83       	std	Y+4, r25	; 0x04
    7144:	8b 83       	std	Y+3, r24	; 0x03
    7146:	8b 81       	ldd	r24, Y+3	; 0x03
    7148:	9c 81       	ldd	r25, Y+4	; 0x04
    714a:	01 97       	sbiw	r24, 0x01	; 1
    714c:	f1 f7       	brne	.-4      	; 0x714a <main+0x1464>
    714e:	9c 83       	std	Y+4, r25	; 0x04
    7150:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7152:	8d 81       	ldd	r24, Y+5	; 0x05
    7154:	9e 81       	ldd	r25, Y+6	; 0x06
    7156:	01 97       	sbiw	r24, 0x01	; 1
    7158:	9e 83       	std	Y+6, r25	; 0x06
    715a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    715c:	8d 81       	ldd	r24, Y+5	; 0x05
    715e:	9e 81       	ldd	r25, Y+6	; 0x06
    7160:	00 97       	sbiw	r24, 0x00	; 0
    7162:	69 f7       	brne	.-38     	; 0x713e <main+0x1458>
    7164:	14 c0       	rjmp	.+40     	; 0x718e <main+0x14a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7166:	6f 81       	ldd	r22, Y+7	; 0x07
    7168:	78 85       	ldd	r23, Y+8	; 0x08
    716a:	89 85       	ldd	r24, Y+9	; 0x09
    716c:	9a 85       	ldd	r25, Y+10	; 0x0a
    716e:	0e 94 0f 39 	call	0x721e	; 0x721e <__fixunssfsi>
    7172:	dc 01       	movw	r26, r24
    7174:	cb 01       	movw	r24, r22
    7176:	9e 83       	std	Y+6, r25	; 0x06
    7178:	8d 83       	std	Y+5, r24	; 0x05
    717a:	8d 81       	ldd	r24, Y+5	; 0x05
    717c:	9e 81       	ldd	r25, Y+6	; 0x06
    717e:	9a 83       	std	Y+2, r25	; 0x02
    7180:	89 83       	std	Y+1, r24	; 0x01
    7182:	89 81       	ldd	r24, Y+1	; 0x01
    7184:	9a 81       	ldd	r25, Y+2	; 0x02
    7186:	01 97       	sbiw	r24, 0x01	; 1
    7188:	f1 f7       	brne	.-4      	; 0x7186 <main+0x14a0>
    718a:	9a 83       	std	Y+2, r25	; 0x02
    718c:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(500);
PORTC &= 0b11110111;
    718e:	a8 e2       	ldi	r26, 0x28	; 40
    7190:	b0 e0       	ldi	r27, 0x00	; 0
    7192:	e8 e2       	ldi	r30, 0x28	; 40
    7194:	f0 e0       	ldi	r31, 0x00	; 0
    7196:	80 81       	ld	r24, Z
    7198:	87 7f       	andi	r24, 0xF7	; 247
    719a:	8c 93       	st	X, r24
clear();
    719c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <clear>


eeprom_write_byte(0,'A')  ;
    71a0:	80 e0       	ldi	r24, 0x00	; 0
    71a2:	90 e0       	ldi	r25, 0x00	; 0
    71a4:	61 e4       	ldi	r22, 0x41	; 65
    71a6:	0e 94 e5 38 	call	0x71ca	; 0x71ca <eeprom_write_byte>
lcd_string("DRY RUN COMPLETE");
    71aa:	8a ee       	ldi	r24, 0xEA	; 234
    71ac:	92 e0       	ldi	r25, 0x02	; 2
    71ae:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <lcd_string>
}

}
    71b2:	c7 57       	subi	r28, 0x77	; 119
    71b4:	df 4f       	sbci	r29, 0xFF	; 255
    71b6:	0f b6       	in	r0, 0x3f	; 63
    71b8:	f8 94       	cli
    71ba:	de bf       	out	0x3e, r29	; 62
    71bc:	0f be       	out	0x3f, r0	; 63
    71be:	cd bf       	out	0x3d, r28	; 61
    71c0:	cf 91       	pop	r28
    71c2:	df 91       	pop	r29
    71c4:	1f 91       	pop	r17
    71c6:	0f 91       	pop	r16
    71c8:	08 95       	ret

000071ca <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    71ca:	df 93       	push	r29
    71cc:	cf 93       	push	r28
    71ce:	00 d0       	rcall	.+0      	; 0x71d0 <eeprom_write_byte+0x6>
    71d0:	0f 92       	push	r0
    71d2:	cd b7       	in	r28, 0x3d	; 61
    71d4:	de b7       	in	r29, 0x3e	; 62
    71d6:	9a 83       	std	Y+2, r25	; 0x02
    71d8:	89 83       	std	Y+1, r24	; 0x01
    71da:	6b 83       	std	Y+3, r22	; 0x03
    do {} while (!eeprom_is_ready ());
    71dc:	ef e3       	ldi	r30, 0x3F	; 63
    71de:	f0 e0       	ldi	r31, 0x00	; 0
    71e0:	80 81       	ld	r24, Z
    71e2:	88 2f       	mov	r24, r24
    71e4:	90 e0       	ldi	r25, 0x00	; 0
    71e6:	82 70       	andi	r24, 0x02	; 2
    71e8:	90 70       	andi	r25, 0x00	; 0
    71ea:	00 97       	sbiw	r24, 0x00	; 0
    71ec:	b9 f7       	brne	.-18     	; 0x71dc <eeprom_write_byte+0x12>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    71ee:	ef e3       	ldi	r30, 0x3F	; 63
    71f0:	f0 e0       	ldi	r31, 0x00	; 0
    71f2:	10 82       	st	Z, r1
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    71f4:	e1 e4       	ldi	r30, 0x41	; 65
    71f6:	f0 e0       	ldi	r31, 0x00	; 0
    71f8:	89 81       	ldd	r24, Y+1	; 0x01
    71fa:	9a 81       	ldd	r25, Y+2	; 0x02
    71fc:	91 83       	std	Z+1, r25	; 0x01
    71fe:	80 83       	st	Z, r24
#endif
    EEDR = __value;
    7200:	e0 e4       	ldi	r30, 0x40	; 64
    7202:	f0 e0       	ldi	r31, 0x00	; 0
    7204:	8b 81       	ldd	r24, Y+3	; 0x03
    7206:	80 83       	st	Z, r24

    __asm__ __volatile__ (
    7208:	0f b6       	in	r0, 0x3f	; 63
    720a:	f8 94       	cli
    720c:	fa 9a       	sbi	0x1f, 2	; 31
    720e:	f9 9a       	sbi	0x1f, 1	; 31
    7210:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
    7212:	0f 90       	pop	r0
    7214:	0f 90       	pop	r0
    7216:	0f 90       	pop	r0
    7218:	cf 91       	pop	r28
    721a:	df 91       	pop	r29
    721c:	08 95       	ret

0000721e <__fixunssfsi>:
    721e:	ef 92       	push	r14
    7220:	ff 92       	push	r15
    7222:	0f 93       	push	r16
    7224:	1f 93       	push	r17
    7226:	7b 01       	movw	r14, r22
    7228:	8c 01       	movw	r16, r24
    722a:	20 e0       	ldi	r18, 0x00	; 0
    722c:	30 e0       	ldi	r19, 0x00	; 0
    722e:	40 e0       	ldi	r20, 0x00	; 0
    7230:	5f e4       	ldi	r21, 0x4F	; 79
    7232:	0e 94 0f 3c 	call	0x781e	; 0x781e <__gesf2>
    7236:	88 23       	and	r24, r24
    7238:	8c f0       	brlt	.+34     	; 0x725c <__fixunssfsi+0x3e>
    723a:	c8 01       	movw	r24, r16
    723c:	b7 01       	movw	r22, r14
    723e:	20 e0       	ldi	r18, 0x00	; 0
    7240:	30 e0       	ldi	r19, 0x00	; 0
    7242:	40 e0       	ldi	r20, 0x00	; 0
    7244:	5f e4       	ldi	r21, 0x4F	; 79
    7246:	0e 94 87 3a 	call	0x750e	; 0x750e <__subsf3>
    724a:	0e 94 6f 3c 	call	0x78de	; 0x78de <__fixsfsi>
    724e:	9b 01       	movw	r18, r22
    7250:	ac 01       	movw	r20, r24
    7252:	20 50       	subi	r18, 0x00	; 0
    7254:	30 40       	sbci	r19, 0x00	; 0
    7256:	40 40       	sbci	r20, 0x00	; 0
    7258:	50 48       	sbci	r21, 0x80	; 128
    725a:	06 c0       	rjmp	.+12     	; 0x7268 <__fixunssfsi+0x4a>
    725c:	c8 01       	movw	r24, r16
    725e:	b7 01       	movw	r22, r14
    7260:	0e 94 6f 3c 	call	0x78de	; 0x78de <__fixsfsi>
    7264:	9b 01       	movw	r18, r22
    7266:	ac 01       	movw	r20, r24
    7268:	b9 01       	movw	r22, r18
    726a:	ca 01       	movw	r24, r20
    726c:	1f 91       	pop	r17
    726e:	0f 91       	pop	r16
    7270:	ff 90       	pop	r15
    7272:	ef 90       	pop	r14
    7274:	08 95       	ret

00007276 <_fpadd_parts>:
    7276:	a0 e0       	ldi	r26, 0x00	; 0
    7278:	b0 e0       	ldi	r27, 0x00	; 0
    727a:	e1 e4       	ldi	r30, 0x41	; 65
    727c:	f9 e3       	ldi	r31, 0x39	; 57
    727e:	0c 94 90 3e 	jmp	0x7d20	; 0x7d20 <__prologue_saves__>
    7282:	dc 01       	movw	r26, r24
    7284:	2b 01       	movw	r4, r22
    7286:	fa 01       	movw	r30, r20
    7288:	9c 91       	ld	r25, X
    728a:	92 30       	cpi	r25, 0x02	; 2
    728c:	08 f4       	brcc	.+2      	; 0x7290 <_fpadd_parts+0x1a>
    728e:	39 c1       	rjmp	.+626    	; 0x7502 <_fpadd_parts+0x28c>
    7290:	eb 01       	movw	r28, r22
    7292:	88 81       	ld	r24, Y
    7294:	82 30       	cpi	r24, 0x02	; 2
    7296:	08 f4       	brcc	.+2      	; 0x729a <_fpadd_parts+0x24>
    7298:	33 c1       	rjmp	.+614    	; 0x7500 <_fpadd_parts+0x28a>
    729a:	94 30       	cpi	r25, 0x04	; 4
    729c:	69 f4       	brne	.+26     	; 0x72b8 <_fpadd_parts+0x42>
    729e:	84 30       	cpi	r24, 0x04	; 4
    72a0:	09 f0       	breq	.+2      	; 0x72a4 <_fpadd_parts+0x2e>
    72a2:	2f c1       	rjmp	.+606    	; 0x7502 <_fpadd_parts+0x28c>
    72a4:	11 96       	adiw	r26, 0x01	; 1
    72a6:	9c 91       	ld	r25, X
    72a8:	11 97       	sbiw	r26, 0x01	; 1
    72aa:	89 81       	ldd	r24, Y+1	; 0x01
    72ac:	98 17       	cp	r25, r24
    72ae:	09 f4       	brne	.+2      	; 0x72b2 <_fpadd_parts+0x3c>
    72b0:	28 c1       	rjmp	.+592    	; 0x7502 <_fpadd_parts+0x28c>
    72b2:	ab ef       	ldi	r26, 0xFB	; 251
    72b4:	b2 e0       	ldi	r27, 0x02	; 2
    72b6:	25 c1       	rjmp	.+586    	; 0x7502 <_fpadd_parts+0x28c>
    72b8:	84 30       	cpi	r24, 0x04	; 4
    72ba:	09 f4       	brne	.+2      	; 0x72be <_fpadd_parts+0x48>
    72bc:	21 c1       	rjmp	.+578    	; 0x7500 <_fpadd_parts+0x28a>
    72be:	82 30       	cpi	r24, 0x02	; 2
    72c0:	a9 f4       	brne	.+42     	; 0x72ec <_fpadd_parts+0x76>
    72c2:	92 30       	cpi	r25, 0x02	; 2
    72c4:	09 f0       	breq	.+2      	; 0x72c8 <_fpadd_parts+0x52>
    72c6:	1d c1       	rjmp	.+570    	; 0x7502 <_fpadd_parts+0x28c>
    72c8:	9a 01       	movw	r18, r20
    72ca:	ad 01       	movw	r20, r26
    72cc:	88 e0       	ldi	r24, 0x08	; 8
    72ce:	ea 01       	movw	r28, r20
    72d0:	09 90       	ld	r0, Y+
    72d2:	ae 01       	movw	r20, r28
    72d4:	e9 01       	movw	r28, r18
    72d6:	09 92       	st	Y+, r0
    72d8:	9e 01       	movw	r18, r28
    72da:	81 50       	subi	r24, 0x01	; 1
    72dc:	c1 f7       	brne	.-16     	; 0x72ce <_fpadd_parts+0x58>
    72de:	e2 01       	movw	r28, r4
    72e0:	89 81       	ldd	r24, Y+1	; 0x01
    72e2:	11 96       	adiw	r26, 0x01	; 1
    72e4:	9c 91       	ld	r25, X
    72e6:	89 23       	and	r24, r25
    72e8:	81 83       	std	Z+1, r24	; 0x01
    72ea:	08 c1       	rjmp	.+528    	; 0x74fc <_fpadd_parts+0x286>
    72ec:	92 30       	cpi	r25, 0x02	; 2
    72ee:	09 f4       	brne	.+2      	; 0x72f2 <_fpadd_parts+0x7c>
    72f0:	07 c1       	rjmp	.+526    	; 0x7500 <_fpadd_parts+0x28a>
    72f2:	12 96       	adiw	r26, 0x02	; 2
    72f4:	2d 90       	ld	r2, X+
    72f6:	3c 90       	ld	r3, X
    72f8:	13 97       	sbiw	r26, 0x03	; 3
    72fa:	eb 01       	movw	r28, r22
    72fc:	8a 81       	ldd	r24, Y+2	; 0x02
    72fe:	9b 81       	ldd	r25, Y+3	; 0x03
    7300:	14 96       	adiw	r26, 0x04	; 4
    7302:	ad 90       	ld	r10, X+
    7304:	bd 90       	ld	r11, X+
    7306:	cd 90       	ld	r12, X+
    7308:	dc 90       	ld	r13, X
    730a:	17 97       	sbiw	r26, 0x07	; 7
    730c:	ec 80       	ldd	r14, Y+4	; 0x04
    730e:	fd 80       	ldd	r15, Y+5	; 0x05
    7310:	0e 81       	ldd	r16, Y+6	; 0x06
    7312:	1f 81       	ldd	r17, Y+7	; 0x07
    7314:	91 01       	movw	r18, r2
    7316:	28 1b       	sub	r18, r24
    7318:	39 0b       	sbc	r19, r25
    731a:	b9 01       	movw	r22, r18
    731c:	37 ff       	sbrs	r19, 7
    731e:	04 c0       	rjmp	.+8      	; 0x7328 <_fpadd_parts+0xb2>
    7320:	66 27       	eor	r22, r22
    7322:	77 27       	eor	r23, r23
    7324:	62 1b       	sub	r22, r18
    7326:	73 0b       	sbc	r23, r19
    7328:	60 32       	cpi	r22, 0x20	; 32
    732a:	71 05       	cpc	r23, r1
    732c:	0c f0       	brlt	.+2      	; 0x7330 <_fpadd_parts+0xba>
    732e:	61 c0       	rjmp	.+194    	; 0x73f2 <_fpadd_parts+0x17c>
    7330:	12 16       	cp	r1, r18
    7332:	13 06       	cpc	r1, r19
    7334:	6c f5       	brge	.+90     	; 0x7390 <_fpadd_parts+0x11a>
    7336:	37 01       	movw	r6, r14
    7338:	48 01       	movw	r8, r16
    733a:	06 2e       	mov	r0, r22
    733c:	04 c0       	rjmp	.+8      	; 0x7346 <_fpadd_parts+0xd0>
    733e:	96 94       	lsr	r9
    7340:	87 94       	ror	r8
    7342:	77 94       	ror	r7
    7344:	67 94       	ror	r6
    7346:	0a 94       	dec	r0
    7348:	d2 f7       	brpl	.-12     	; 0x733e <_fpadd_parts+0xc8>
    734a:	21 e0       	ldi	r18, 0x01	; 1
    734c:	30 e0       	ldi	r19, 0x00	; 0
    734e:	40 e0       	ldi	r20, 0x00	; 0
    7350:	50 e0       	ldi	r21, 0x00	; 0
    7352:	04 c0       	rjmp	.+8      	; 0x735c <_fpadd_parts+0xe6>
    7354:	22 0f       	add	r18, r18
    7356:	33 1f       	adc	r19, r19
    7358:	44 1f       	adc	r20, r20
    735a:	55 1f       	adc	r21, r21
    735c:	6a 95       	dec	r22
    735e:	d2 f7       	brpl	.-12     	; 0x7354 <_fpadd_parts+0xde>
    7360:	21 50       	subi	r18, 0x01	; 1
    7362:	30 40       	sbci	r19, 0x00	; 0
    7364:	40 40       	sbci	r20, 0x00	; 0
    7366:	50 40       	sbci	r21, 0x00	; 0
    7368:	2e 21       	and	r18, r14
    736a:	3f 21       	and	r19, r15
    736c:	40 23       	and	r20, r16
    736e:	51 23       	and	r21, r17
    7370:	21 15       	cp	r18, r1
    7372:	31 05       	cpc	r19, r1
    7374:	41 05       	cpc	r20, r1
    7376:	51 05       	cpc	r21, r1
    7378:	21 f0       	breq	.+8      	; 0x7382 <_fpadd_parts+0x10c>
    737a:	21 e0       	ldi	r18, 0x01	; 1
    737c:	30 e0       	ldi	r19, 0x00	; 0
    737e:	40 e0       	ldi	r20, 0x00	; 0
    7380:	50 e0       	ldi	r21, 0x00	; 0
    7382:	79 01       	movw	r14, r18
    7384:	8a 01       	movw	r16, r20
    7386:	e6 28       	or	r14, r6
    7388:	f7 28       	or	r15, r7
    738a:	08 29       	or	r16, r8
    738c:	19 29       	or	r17, r9
    738e:	3c c0       	rjmp	.+120    	; 0x7408 <_fpadd_parts+0x192>
    7390:	23 2b       	or	r18, r19
    7392:	d1 f1       	breq	.+116    	; 0x7408 <_fpadd_parts+0x192>
    7394:	26 0e       	add	r2, r22
    7396:	37 1e       	adc	r3, r23
    7398:	35 01       	movw	r6, r10
    739a:	46 01       	movw	r8, r12
    739c:	06 2e       	mov	r0, r22
    739e:	04 c0       	rjmp	.+8      	; 0x73a8 <_fpadd_parts+0x132>
    73a0:	96 94       	lsr	r9
    73a2:	87 94       	ror	r8
    73a4:	77 94       	ror	r7
    73a6:	67 94       	ror	r6
    73a8:	0a 94       	dec	r0
    73aa:	d2 f7       	brpl	.-12     	; 0x73a0 <_fpadd_parts+0x12a>
    73ac:	21 e0       	ldi	r18, 0x01	; 1
    73ae:	30 e0       	ldi	r19, 0x00	; 0
    73b0:	40 e0       	ldi	r20, 0x00	; 0
    73b2:	50 e0       	ldi	r21, 0x00	; 0
    73b4:	04 c0       	rjmp	.+8      	; 0x73be <_fpadd_parts+0x148>
    73b6:	22 0f       	add	r18, r18
    73b8:	33 1f       	adc	r19, r19
    73ba:	44 1f       	adc	r20, r20
    73bc:	55 1f       	adc	r21, r21
    73be:	6a 95       	dec	r22
    73c0:	d2 f7       	brpl	.-12     	; 0x73b6 <_fpadd_parts+0x140>
    73c2:	21 50       	subi	r18, 0x01	; 1
    73c4:	30 40       	sbci	r19, 0x00	; 0
    73c6:	40 40       	sbci	r20, 0x00	; 0
    73c8:	50 40       	sbci	r21, 0x00	; 0
    73ca:	2a 21       	and	r18, r10
    73cc:	3b 21       	and	r19, r11
    73ce:	4c 21       	and	r20, r12
    73d0:	5d 21       	and	r21, r13
    73d2:	21 15       	cp	r18, r1
    73d4:	31 05       	cpc	r19, r1
    73d6:	41 05       	cpc	r20, r1
    73d8:	51 05       	cpc	r21, r1
    73da:	21 f0       	breq	.+8      	; 0x73e4 <_fpadd_parts+0x16e>
    73dc:	21 e0       	ldi	r18, 0x01	; 1
    73de:	30 e0       	ldi	r19, 0x00	; 0
    73e0:	40 e0       	ldi	r20, 0x00	; 0
    73e2:	50 e0       	ldi	r21, 0x00	; 0
    73e4:	59 01       	movw	r10, r18
    73e6:	6a 01       	movw	r12, r20
    73e8:	a6 28       	or	r10, r6
    73ea:	b7 28       	or	r11, r7
    73ec:	c8 28       	or	r12, r8
    73ee:	d9 28       	or	r13, r9
    73f0:	0b c0       	rjmp	.+22     	; 0x7408 <_fpadd_parts+0x192>
    73f2:	82 15       	cp	r24, r2
    73f4:	93 05       	cpc	r25, r3
    73f6:	2c f0       	brlt	.+10     	; 0x7402 <_fpadd_parts+0x18c>
    73f8:	1c 01       	movw	r2, r24
    73fa:	aa 24       	eor	r10, r10
    73fc:	bb 24       	eor	r11, r11
    73fe:	65 01       	movw	r12, r10
    7400:	03 c0       	rjmp	.+6      	; 0x7408 <_fpadd_parts+0x192>
    7402:	ee 24       	eor	r14, r14
    7404:	ff 24       	eor	r15, r15
    7406:	87 01       	movw	r16, r14
    7408:	11 96       	adiw	r26, 0x01	; 1
    740a:	9c 91       	ld	r25, X
    740c:	d2 01       	movw	r26, r4
    740e:	11 96       	adiw	r26, 0x01	; 1
    7410:	8c 91       	ld	r24, X
    7412:	98 17       	cp	r25, r24
    7414:	09 f4       	brne	.+2      	; 0x7418 <_fpadd_parts+0x1a2>
    7416:	45 c0       	rjmp	.+138    	; 0x74a2 <_fpadd_parts+0x22c>
    7418:	99 23       	and	r25, r25
    741a:	39 f0       	breq	.+14     	; 0x742a <_fpadd_parts+0x1b4>
    741c:	a8 01       	movw	r20, r16
    741e:	97 01       	movw	r18, r14
    7420:	2a 19       	sub	r18, r10
    7422:	3b 09       	sbc	r19, r11
    7424:	4c 09       	sbc	r20, r12
    7426:	5d 09       	sbc	r21, r13
    7428:	06 c0       	rjmp	.+12     	; 0x7436 <_fpadd_parts+0x1c0>
    742a:	a6 01       	movw	r20, r12
    742c:	95 01       	movw	r18, r10
    742e:	2e 19       	sub	r18, r14
    7430:	3f 09       	sbc	r19, r15
    7432:	40 0b       	sbc	r20, r16
    7434:	51 0b       	sbc	r21, r17
    7436:	57 fd       	sbrc	r21, 7
    7438:	08 c0       	rjmp	.+16     	; 0x744a <_fpadd_parts+0x1d4>
    743a:	11 82       	std	Z+1, r1	; 0x01
    743c:	33 82       	std	Z+3, r3	; 0x03
    743e:	22 82       	std	Z+2, r2	; 0x02
    7440:	24 83       	std	Z+4, r18	; 0x04
    7442:	35 83       	std	Z+5, r19	; 0x05
    7444:	46 83       	std	Z+6, r20	; 0x06
    7446:	57 83       	std	Z+7, r21	; 0x07
    7448:	1d c0       	rjmp	.+58     	; 0x7484 <_fpadd_parts+0x20e>
    744a:	81 e0       	ldi	r24, 0x01	; 1
    744c:	81 83       	std	Z+1, r24	; 0x01
    744e:	33 82       	std	Z+3, r3	; 0x03
    7450:	22 82       	std	Z+2, r2	; 0x02
    7452:	88 27       	eor	r24, r24
    7454:	99 27       	eor	r25, r25
    7456:	dc 01       	movw	r26, r24
    7458:	82 1b       	sub	r24, r18
    745a:	93 0b       	sbc	r25, r19
    745c:	a4 0b       	sbc	r26, r20
    745e:	b5 0b       	sbc	r27, r21
    7460:	84 83       	std	Z+4, r24	; 0x04
    7462:	95 83       	std	Z+5, r25	; 0x05
    7464:	a6 83       	std	Z+6, r26	; 0x06
    7466:	b7 83       	std	Z+7, r27	; 0x07
    7468:	0d c0       	rjmp	.+26     	; 0x7484 <_fpadd_parts+0x20e>
    746a:	22 0f       	add	r18, r18
    746c:	33 1f       	adc	r19, r19
    746e:	44 1f       	adc	r20, r20
    7470:	55 1f       	adc	r21, r21
    7472:	24 83       	std	Z+4, r18	; 0x04
    7474:	35 83       	std	Z+5, r19	; 0x05
    7476:	46 83       	std	Z+6, r20	; 0x06
    7478:	57 83       	std	Z+7, r21	; 0x07
    747a:	82 81       	ldd	r24, Z+2	; 0x02
    747c:	93 81       	ldd	r25, Z+3	; 0x03
    747e:	01 97       	sbiw	r24, 0x01	; 1
    7480:	93 83       	std	Z+3, r25	; 0x03
    7482:	82 83       	std	Z+2, r24	; 0x02
    7484:	24 81       	ldd	r18, Z+4	; 0x04
    7486:	35 81       	ldd	r19, Z+5	; 0x05
    7488:	46 81       	ldd	r20, Z+6	; 0x06
    748a:	57 81       	ldd	r21, Z+7	; 0x07
    748c:	da 01       	movw	r26, r20
    748e:	c9 01       	movw	r24, r18
    7490:	01 97       	sbiw	r24, 0x01	; 1
    7492:	a1 09       	sbc	r26, r1
    7494:	b1 09       	sbc	r27, r1
    7496:	8f 5f       	subi	r24, 0xFF	; 255
    7498:	9f 4f       	sbci	r25, 0xFF	; 255
    749a:	af 4f       	sbci	r26, 0xFF	; 255
    749c:	bf 43       	sbci	r27, 0x3F	; 63
    749e:	28 f3       	brcs	.-54     	; 0x746a <_fpadd_parts+0x1f4>
    74a0:	0b c0       	rjmp	.+22     	; 0x74b8 <_fpadd_parts+0x242>
    74a2:	91 83       	std	Z+1, r25	; 0x01
    74a4:	33 82       	std	Z+3, r3	; 0x03
    74a6:	22 82       	std	Z+2, r2	; 0x02
    74a8:	ea 0c       	add	r14, r10
    74aa:	fb 1c       	adc	r15, r11
    74ac:	0c 1d       	adc	r16, r12
    74ae:	1d 1d       	adc	r17, r13
    74b0:	e4 82       	std	Z+4, r14	; 0x04
    74b2:	f5 82       	std	Z+5, r15	; 0x05
    74b4:	06 83       	std	Z+6, r16	; 0x06
    74b6:	17 83       	std	Z+7, r17	; 0x07
    74b8:	83 e0       	ldi	r24, 0x03	; 3
    74ba:	80 83       	st	Z, r24
    74bc:	24 81       	ldd	r18, Z+4	; 0x04
    74be:	35 81       	ldd	r19, Z+5	; 0x05
    74c0:	46 81       	ldd	r20, Z+6	; 0x06
    74c2:	57 81       	ldd	r21, Z+7	; 0x07
    74c4:	57 ff       	sbrs	r21, 7
    74c6:	1a c0       	rjmp	.+52     	; 0x74fc <_fpadd_parts+0x286>
    74c8:	c9 01       	movw	r24, r18
    74ca:	aa 27       	eor	r26, r26
    74cc:	97 fd       	sbrc	r25, 7
    74ce:	a0 95       	com	r26
    74d0:	ba 2f       	mov	r27, r26
    74d2:	81 70       	andi	r24, 0x01	; 1
    74d4:	90 70       	andi	r25, 0x00	; 0
    74d6:	a0 70       	andi	r26, 0x00	; 0
    74d8:	b0 70       	andi	r27, 0x00	; 0
    74da:	56 95       	lsr	r21
    74dc:	47 95       	ror	r20
    74de:	37 95       	ror	r19
    74e0:	27 95       	ror	r18
    74e2:	82 2b       	or	r24, r18
    74e4:	93 2b       	or	r25, r19
    74e6:	a4 2b       	or	r26, r20
    74e8:	b5 2b       	or	r27, r21
    74ea:	84 83       	std	Z+4, r24	; 0x04
    74ec:	95 83       	std	Z+5, r25	; 0x05
    74ee:	a6 83       	std	Z+6, r26	; 0x06
    74f0:	b7 83       	std	Z+7, r27	; 0x07
    74f2:	82 81       	ldd	r24, Z+2	; 0x02
    74f4:	93 81       	ldd	r25, Z+3	; 0x03
    74f6:	01 96       	adiw	r24, 0x01	; 1
    74f8:	93 83       	std	Z+3, r25	; 0x03
    74fa:	82 83       	std	Z+2, r24	; 0x02
    74fc:	df 01       	movw	r26, r30
    74fe:	01 c0       	rjmp	.+2      	; 0x7502 <_fpadd_parts+0x28c>
    7500:	d2 01       	movw	r26, r4
    7502:	cd 01       	movw	r24, r26
    7504:	cd b7       	in	r28, 0x3d	; 61
    7506:	de b7       	in	r29, 0x3e	; 62
    7508:	e2 e1       	ldi	r30, 0x12	; 18
    750a:	0c 94 ac 3e 	jmp	0x7d58	; 0x7d58 <__epilogue_restores__>

0000750e <__subsf3>:
    750e:	a0 e2       	ldi	r26, 0x20	; 32
    7510:	b0 e0       	ldi	r27, 0x00	; 0
    7512:	ed e8       	ldi	r30, 0x8D	; 141
    7514:	fa e3       	ldi	r31, 0x3A	; 58
    7516:	0c 94 9c 3e 	jmp	0x7d38	; 0x7d38 <__prologue_saves__+0x18>
    751a:	69 83       	std	Y+1, r22	; 0x01
    751c:	7a 83       	std	Y+2, r23	; 0x02
    751e:	8b 83       	std	Y+3, r24	; 0x03
    7520:	9c 83       	std	Y+4, r25	; 0x04
    7522:	2d 83       	std	Y+5, r18	; 0x05
    7524:	3e 83       	std	Y+6, r19	; 0x06
    7526:	4f 83       	std	Y+7, r20	; 0x07
    7528:	58 87       	std	Y+8, r21	; 0x08
    752a:	e9 e0       	ldi	r30, 0x09	; 9
    752c:	ee 2e       	mov	r14, r30
    752e:	f1 2c       	mov	r15, r1
    7530:	ec 0e       	add	r14, r28
    7532:	fd 1e       	adc	r15, r29
    7534:	ce 01       	movw	r24, r28
    7536:	01 96       	adiw	r24, 0x01	; 1
    7538:	b7 01       	movw	r22, r14
    753a:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__unpack_f>
    753e:	8e 01       	movw	r16, r28
    7540:	0f 5e       	subi	r16, 0xEF	; 239
    7542:	1f 4f       	sbci	r17, 0xFF	; 255
    7544:	ce 01       	movw	r24, r28
    7546:	05 96       	adiw	r24, 0x05	; 5
    7548:	b8 01       	movw	r22, r16
    754a:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__unpack_f>
    754e:	8a 89       	ldd	r24, Y+18	; 0x12
    7550:	91 e0       	ldi	r25, 0x01	; 1
    7552:	89 27       	eor	r24, r25
    7554:	8a 8b       	std	Y+18, r24	; 0x12
    7556:	c7 01       	movw	r24, r14
    7558:	b8 01       	movw	r22, r16
    755a:	ae 01       	movw	r20, r28
    755c:	47 5e       	subi	r20, 0xE7	; 231
    755e:	5f 4f       	sbci	r21, 0xFF	; 255
    7560:	0e 94 3b 39 	call	0x7276	; 0x7276 <_fpadd_parts>
    7564:	0e 94 c3 3c 	call	0x7986	; 0x7986 <__pack_f>
    7568:	a0 96       	adiw	r28, 0x20	; 32
    756a:	e6 e0       	ldi	r30, 0x06	; 6
    756c:	0c 94 b8 3e 	jmp	0x7d70	; 0x7d70 <__epilogue_restores__+0x18>

00007570 <__addsf3>:
    7570:	a0 e2       	ldi	r26, 0x20	; 32
    7572:	b0 e0       	ldi	r27, 0x00	; 0
    7574:	ee eb       	ldi	r30, 0xBE	; 190
    7576:	fa e3       	ldi	r31, 0x3A	; 58
    7578:	0c 94 9c 3e 	jmp	0x7d38	; 0x7d38 <__prologue_saves__+0x18>
    757c:	69 83       	std	Y+1, r22	; 0x01
    757e:	7a 83       	std	Y+2, r23	; 0x02
    7580:	8b 83       	std	Y+3, r24	; 0x03
    7582:	9c 83       	std	Y+4, r25	; 0x04
    7584:	2d 83       	std	Y+5, r18	; 0x05
    7586:	3e 83       	std	Y+6, r19	; 0x06
    7588:	4f 83       	std	Y+7, r20	; 0x07
    758a:	58 87       	std	Y+8, r21	; 0x08
    758c:	f9 e0       	ldi	r31, 0x09	; 9
    758e:	ef 2e       	mov	r14, r31
    7590:	f1 2c       	mov	r15, r1
    7592:	ec 0e       	add	r14, r28
    7594:	fd 1e       	adc	r15, r29
    7596:	ce 01       	movw	r24, r28
    7598:	01 96       	adiw	r24, 0x01	; 1
    759a:	b7 01       	movw	r22, r14
    759c:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__unpack_f>
    75a0:	8e 01       	movw	r16, r28
    75a2:	0f 5e       	subi	r16, 0xEF	; 239
    75a4:	1f 4f       	sbci	r17, 0xFF	; 255
    75a6:	ce 01       	movw	r24, r28
    75a8:	05 96       	adiw	r24, 0x05	; 5
    75aa:	b8 01       	movw	r22, r16
    75ac:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__unpack_f>
    75b0:	c7 01       	movw	r24, r14
    75b2:	b8 01       	movw	r22, r16
    75b4:	ae 01       	movw	r20, r28
    75b6:	47 5e       	subi	r20, 0xE7	; 231
    75b8:	5f 4f       	sbci	r21, 0xFF	; 255
    75ba:	0e 94 3b 39 	call	0x7276	; 0x7276 <_fpadd_parts>
    75be:	0e 94 c3 3c 	call	0x7986	; 0x7986 <__pack_f>
    75c2:	a0 96       	adiw	r28, 0x20	; 32
    75c4:	e6 e0       	ldi	r30, 0x06	; 6
    75c6:	0c 94 b8 3e 	jmp	0x7d70	; 0x7d70 <__epilogue_restores__+0x18>

000075ca <__mulsf3>:
    75ca:	a0 e2       	ldi	r26, 0x20	; 32
    75cc:	b0 e0       	ldi	r27, 0x00	; 0
    75ce:	eb ee       	ldi	r30, 0xEB	; 235
    75d0:	fa e3       	ldi	r31, 0x3A	; 58
    75d2:	0c 94 90 3e 	jmp	0x7d20	; 0x7d20 <__prologue_saves__>
    75d6:	69 83       	std	Y+1, r22	; 0x01
    75d8:	7a 83       	std	Y+2, r23	; 0x02
    75da:	8b 83       	std	Y+3, r24	; 0x03
    75dc:	9c 83       	std	Y+4, r25	; 0x04
    75de:	2d 83       	std	Y+5, r18	; 0x05
    75e0:	3e 83       	std	Y+6, r19	; 0x06
    75e2:	4f 83       	std	Y+7, r20	; 0x07
    75e4:	58 87       	std	Y+8, r21	; 0x08
    75e6:	ce 01       	movw	r24, r28
    75e8:	01 96       	adiw	r24, 0x01	; 1
    75ea:	be 01       	movw	r22, r28
    75ec:	67 5f       	subi	r22, 0xF7	; 247
    75ee:	7f 4f       	sbci	r23, 0xFF	; 255
    75f0:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__unpack_f>
    75f4:	ce 01       	movw	r24, r28
    75f6:	05 96       	adiw	r24, 0x05	; 5
    75f8:	be 01       	movw	r22, r28
    75fa:	6f 5e       	subi	r22, 0xEF	; 239
    75fc:	7f 4f       	sbci	r23, 0xFF	; 255
    75fe:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__unpack_f>
    7602:	99 85       	ldd	r25, Y+9	; 0x09
    7604:	92 30       	cpi	r25, 0x02	; 2
    7606:	88 f0       	brcs	.+34     	; 0x762a <__mulsf3+0x60>
    7608:	89 89       	ldd	r24, Y+17	; 0x11
    760a:	82 30       	cpi	r24, 0x02	; 2
    760c:	c8 f0       	brcs	.+50     	; 0x7640 <__mulsf3+0x76>
    760e:	94 30       	cpi	r25, 0x04	; 4
    7610:	19 f4       	brne	.+6      	; 0x7618 <__mulsf3+0x4e>
    7612:	82 30       	cpi	r24, 0x02	; 2
    7614:	51 f4       	brne	.+20     	; 0x762a <__mulsf3+0x60>
    7616:	04 c0       	rjmp	.+8      	; 0x7620 <__mulsf3+0x56>
    7618:	84 30       	cpi	r24, 0x04	; 4
    761a:	29 f4       	brne	.+10     	; 0x7626 <__mulsf3+0x5c>
    761c:	92 30       	cpi	r25, 0x02	; 2
    761e:	81 f4       	brne	.+32     	; 0x7640 <__mulsf3+0x76>
    7620:	8b ef       	ldi	r24, 0xFB	; 251
    7622:	92 e0       	ldi	r25, 0x02	; 2
    7624:	c6 c0       	rjmp	.+396    	; 0x77b2 <__mulsf3+0x1e8>
    7626:	92 30       	cpi	r25, 0x02	; 2
    7628:	49 f4       	brne	.+18     	; 0x763c <__mulsf3+0x72>
    762a:	20 e0       	ldi	r18, 0x00	; 0
    762c:	9a 85       	ldd	r25, Y+10	; 0x0a
    762e:	8a 89       	ldd	r24, Y+18	; 0x12
    7630:	98 13       	cpse	r25, r24
    7632:	21 e0       	ldi	r18, 0x01	; 1
    7634:	2a 87       	std	Y+10, r18	; 0x0a
    7636:	ce 01       	movw	r24, r28
    7638:	09 96       	adiw	r24, 0x09	; 9
    763a:	bb c0       	rjmp	.+374    	; 0x77b2 <__mulsf3+0x1e8>
    763c:	82 30       	cpi	r24, 0x02	; 2
    763e:	49 f4       	brne	.+18     	; 0x7652 <__mulsf3+0x88>
    7640:	20 e0       	ldi	r18, 0x00	; 0
    7642:	9a 85       	ldd	r25, Y+10	; 0x0a
    7644:	8a 89       	ldd	r24, Y+18	; 0x12
    7646:	98 13       	cpse	r25, r24
    7648:	21 e0       	ldi	r18, 0x01	; 1
    764a:	2a 8b       	std	Y+18, r18	; 0x12
    764c:	ce 01       	movw	r24, r28
    764e:	41 96       	adiw	r24, 0x11	; 17
    7650:	b0 c0       	rjmp	.+352    	; 0x77b2 <__mulsf3+0x1e8>
    7652:	2d 84       	ldd	r2, Y+13	; 0x0d
    7654:	3e 84       	ldd	r3, Y+14	; 0x0e
    7656:	4f 84       	ldd	r4, Y+15	; 0x0f
    7658:	58 88       	ldd	r5, Y+16	; 0x10
    765a:	6d 88       	ldd	r6, Y+21	; 0x15
    765c:	7e 88       	ldd	r7, Y+22	; 0x16
    765e:	8f 88       	ldd	r8, Y+23	; 0x17
    7660:	98 8c       	ldd	r9, Y+24	; 0x18
    7662:	ee 24       	eor	r14, r14
    7664:	ff 24       	eor	r15, r15
    7666:	87 01       	movw	r16, r14
    7668:	aa 24       	eor	r10, r10
    766a:	bb 24       	eor	r11, r11
    766c:	65 01       	movw	r12, r10
    766e:	40 e0       	ldi	r20, 0x00	; 0
    7670:	50 e0       	ldi	r21, 0x00	; 0
    7672:	60 e0       	ldi	r22, 0x00	; 0
    7674:	70 e0       	ldi	r23, 0x00	; 0
    7676:	e0 e0       	ldi	r30, 0x00	; 0
    7678:	f0 e0       	ldi	r31, 0x00	; 0
    767a:	c1 01       	movw	r24, r2
    767c:	81 70       	andi	r24, 0x01	; 1
    767e:	90 70       	andi	r25, 0x00	; 0
    7680:	89 2b       	or	r24, r25
    7682:	e9 f0       	breq	.+58     	; 0x76be <__mulsf3+0xf4>
    7684:	e6 0c       	add	r14, r6
    7686:	f7 1c       	adc	r15, r7
    7688:	08 1d       	adc	r16, r8
    768a:	19 1d       	adc	r17, r9
    768c:	9a 01       	movw	r18, r20
    768e:	ab 01       	movw	r20, r22
    7690:	2a 0d       	add	r18, r10
    7692:	3b 1d       	adc	r19, r11
    7694:	4c 1d       	adc	r20, r12
    7696:	5d 1d       	adc	r21, r13
    7698:	80 e0       	ldi	r24, 0x00	; 0
    769a:	90 e0       	ldi	r25, 0x00	; 0
    769c:	a0 e0       	ldi	r26, 0x00	; 0
    769e:	b0 e0       	ldi	r27, 0x00	; 0
    76a0:	e6 14       	cp	r14, r6
    76a2:	f7 04       	cpc	r15, r7
    76a4:	08 05       	cpc	r16, r8
    76a6:	19 05       	cpc	r17, r9
    76a8:	20 f4       	brcc	.+8      	; 0x76b2 <__mulsf3+0xe8>
    76aa:	81 e0       	ldi	r24, 0x01	; 1
    76ac:	90 e0       	ldi	r25, 0x00	; 0
    76ae:	a0 e0       	ldi	r26, 0x00	; 0
    76b0:	b0 e0       	ldi	r27, 0x00	; 0
    76b2:	ba 01       	movw	r22, r20
    76b4:	a9 01       	movw	r20, r18
    76b6:	48 0f       	add	r20, r24
    76b8:	59 1f       	adc	r21, r25
    76ba:	6a 1f       	adc	r22, r26
    76bc:	7b 1f       	adc	r23, r27
    76be:	aa 0c       	add	r10, r10
    76c0:	bb 1c       	adc	r11, r11
    76c2:	cc 1c       	adc	r12, r12
    76c4:	dd 1c       	adc	r13, r13
    76c6:	97 fe       	sbrs	r9, 7
    76c8:	08 c0       	rjmp	.+16     	; 0x76da <__mulsf3+0x110>
    76ca:	81 e0       	ldi	r24, 0x01	; 1
    76cc:	90 e0       	ldi	r25, 0x00	; 0
    76ce:	a0 e0       	ldi	r26, 0x00	; 0
    76d0:	b0 e0       	ldi	r27, 0x00	; 0
    76d2:	a8 2a       	or	r10, r24
    76d4:	b9 2a       	or	r11, r25
    76d6:	ca 2a       	or	r12, r26
    76d8:	db 2a       	or	r13, r27
    76da:	31 96       	adiw	r30, 0x01	; 1
    76dc:	e0 32       	cpi	r30, 0x20	; 32
    76de:	f1 05       	cpc	r31, r1
    76e0:	49 f0       	breq	.+18     	; 0x76f4 <__mulsf3+0x12a>
    76e2:	66 0c       	add	r6, r6
    76e4:	77 1c       	adc	r7, r7
    76e6:	88 1c       	adc	r8, r8
    76e8:	99 1c       	adc	r9, r9
    76ea:	56 94       	lsr	r5
    76ec:	47 94       	ror	r4
    76ee:	37 94       	ror	r3
    76f0:	27 94       	ror	r2
    76f2:	c3 cf       	rjmp	.-122    	; 0x767a <__mulsf3+0xb0>
    76f4:	fa 85       	ldd	r31, Y+10	; 0x0a
    76f6:	ea 89       	ldd	r30, Y+18	; 0x12
    76f8:	2b 89       	ldd	r18, Y+19	; 0x13
    76fa:	3c 89       	ldd	r19, Y+20	; 0x14
    76fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    76fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    7700:	28 0f       	add	r18, r24
    7702:	39 1f       	adc	r19, r25
    7704:	2e 5f       	subi	r18, 0xFE	; 254
    7706:	3f 4f       	sbci	r19, 0xFF	; 255
    7708:	17 c0       	rjmp	.+46     	; 0x7738 <__mulsf3+0x16e>
    770a:	ca 01       	movw	r24, r20
    770c:	81 70       	andi	r24, 0x01	; 1
    770e:	90 70       	andi	r25, 0x00	; 0
    7710:	89 2b       	or	r24, r25
    7712:	61 f0       	breq	.+24     	; 0x772c <__mulsf3+0x162>
    7714:	16 95       	lsr	r17
    7716:	07 95       	ror	r16
    7718:	f7 94       	ror	r15
    771a:	e7 94       	ror	r14
    771c:	80 e0       	ldi	r24, 0x00	; 0
    771e:	90 e0       	ldi	r25, 0x00	; 0
    7720:	a0 e0       	ldi	r26, 0x00	; 0
    7722:	b0 e8       	ldi	r27, 0x80	; 128
    7724:	e8 2a       	or	r14, r24
    7726:	f9 2a       	or	r15, r25
    7728:	0a 2b       	or	r16, r26
    772a:	1b 2b       	or	r17, r27
    772c:	76 95       	lsr	r23
    772e:	67 95       	ror	r22
    7730:	57 95       	ror	r21
    7732:	47 95       	ror	r20
    7734:	2f 5f       	subi	r18, 0xFF	; 255
    7736:	3f 4f       	sbci	r19, 0xFF	; 255
    7738:	77 fd       	sbrc	r23, 7
    773a:	e7 cf       	rjmp	.-50     	; 0x770a <__mulsf3+0x140>
    773c:	0c c0       	rjmp	.+24     	; 0x7756 <__mulsf3+0x18c>
    773e:	44 0f       	add	r20, r20
    7740:	55 1f       	adc	r21, r21
    7742:	66 1f       	adc	r22, r22
    7744:	77 1f       	adc	r23, r23
    7746:	17 fd       	sbrc	r17, 7
    7748:	41 60       	ori	r20, 0x01	; 1
    774a:	ee 0c       	add	r14, r14
    774c:	ff 1c       	adc	r15, r15
    774e:	00 1f       	adc	r16, r16
    7750:	11 1f       	adc	r17, r17
    7752:	21 50       	subi	r18, 0x01	; 1
    7754:	30 40       	sbci	r19, 0x00	; 0
    7756:	40 30       	cpi	r20, 0x00	; 0
    7758:	90 e0       	ldi	r25, 0x00	; 0
    775a:	59 07       	cpc	r21, r25
    775c:	90 e0       	ldi	r25, 0x00	; 0
    775e:	69 07       	cpc	r22, r25
    7760:	90 e4       	ldi	r25, 0x40	; 64
    7762:	79 07       	cpc	r23, r25
    7764:	60 f3       	brcs	.-40     	; 0x773e <__mulsf3+0x174>
    7766:	2b 8f       	std	Y+27, r18	; 0x1b
    7768:	3c 8f       	std	Y+28, r19	; 0x1c
    776a:	db 01       	movw	r26, r22
    776c:	ca 01       	movw	r24, r20
    776e:	8f 77       	andi	r24, 0x7F	; 127
    7770:	90 70       	andi	r25, 0x00	; 0
    7772:	a0 70       	andi	r26, 0x00	; 0
    7774:	b0 70       	andi	r27, 0x00	; 0
    7776:	80 34       	cpi	r24, 0x40	; 64
    7778:	91 05       	cpc	r25, r1
    777a:	a1 05       	cpc	r26, r1
    777c:	b1 05       	cpc	r27, r1
    777e:	61 f4       	brne	.+24     	; 0x7798 <__mulsf3+0x1ce>
    7780:	47 fd       	sbrc	r20, 7
    7782:	0a c0       	rjmp	.+20     	; 0x7798 <__mulsf3+0x1ce>
    7784:	e1 14       	cp	r14, r1
    7786:	f1 04       	cpc	r15, r1
    7788:	01 05       	cpc	r16, r1
    778a:	11 05       	cpc	r17, r1
    778c:	29 f0       	breq	.+10     	; 0x7798 <__mulsf3+0x1ce>
    778e:	40 5c       	subi	r20, 0xC0	; 192
    7790:	5f 4f       	sbci	r21, 0xFF	; 255
    7792:	6f 4f       	sbci	r22, 0xFF	; 255
    7794:	7f 4f       	sbci	r23, 0xFF	; 255
    7796:	40 78       	andi	r20, 0x80	; 128
    7798:	1a 8e       	std	Y+26, r1	; 0x1a
    779a:	fe 17       	cp	r31, r30
    779c:	11 f0       	breq	.+4      	; 0x77a2 <__mulsf3+0x1d8>
    779e:	81 e0       	ldi	r24, 0x01	; 1
    77a0:	8a 8f       	std	Y+26, r24	; 0x1a
    77a2:	4d 8f       	std	Y+29, r20	; 0x1d
    77a4:	5e 8f       	std	Y+30, r21	; 0x1e
    77a6:	6f 8f       	std	Y+31, r22	; 0x1f
    77a8:	78 a3       	std	Y+32, r23	; 0x20
    77aa:	83 e0       	ldi	r24, 0x03	; 3
    77ac:	89 8f       	std	Y+25, r24	; 0x19
    77ae:	ce 01       	movw	r24, r28
    77b0:	49 96       	adiw	r24, 0x19	; 25
    77b2:	0e 94 c3 3c 	call	0x7986	; 0x7986 <__pack_f>
    77b6:	a0 96       	adiw	r28, 0x20	; 32
    77b8:	e2 e1       	ldi	r30, 0x12	; 18
    77ba:	0c 94 ac 3e 	jmp	0x7d58	; 0x7d58 <__epilogue_restores__>

000077be <__gtsf2>:
    77be:	a8 e1       	ldi	r26, 0x18	; 24
    77c0:	b0 e0       	ldi	r27, 0x00	; 0
    77c2:	e5 ee       	ldi	r30, 0xE5	; 229
    77c4:	fb e3       	ldi	r31, 0x3B	; 59
    77c6:	0c 94 9c 3e 	jmp	0x7d38	; 0x7d38 <__prologue_saves__+0x18>
    77ca:	69 83       	std	Y+1, r22	; 0x01
    77cc:	7a 83       	std	Y+2, r23	; 0x02
    77ce:	8b 83       	std	Y+3, r24	; 0x03
    77d0:	9c 83       	std	Y+4, r25	; 0x04
    77d2:	2d 83       	std	Y+5, r18	; 0x05
    77d4:	3e 83       	std	Y+6, r19	; 0x06
    77d6:	4f 83       	std	Y+7, r20	; 0x07
    77d8:	58 87       	std	Y+8, r21	; 0x08
    77da:	89 e0       	ldi	r24, 0x09	; 9
    77dc:	e8 2e       	mov	r14, r24
    77de:	f1 2c       	mov	r15, r1
    77e0:	ec 0e       	add	r14, r28
    77e2:	fd 1e       	adc	r15, r29
    77e4:	ce 01       	movw	r24, r28
    77e6:	01 96       	adiw	r24, 0x01	; 1
    77e8:	b7 01       	movw	r22, r14
    77ea:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__unpack_f>
    77ee:	8e 01       	movw	r16, r28
    77f0:	0f 5e       	subi	r16, 0xEF	; 239
    77f2:	1f 4f       	sbci	r17, 0xFF	; 255
    77f4:	ce 01       	movw	r24, r28
    77f6:	05 96       	adiw	r24, 0x05	; 5
    77f8:	b8 01       	movw	r22, r16
    77fa:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__unpack_f>
    77fe:	89 85       	ldd	r24, Y+9	; 0x09
    7800:	82 30       	cpi	r24, 0x02	; 2
    7802:	40 f0       	brcs	.+16     	; 0x7814 <__gtsf2+0x56>
    7804:	89 89       	ldd	r24, Y+17	; 0x11
    7806:	82 30       	cpi	r24, 0x02	; 2
    7808:	28 f0       	brcs	.+10     	; 0x7814 <__gtsf2+0x56>
    780a:	c7 01       	movw	r24, r14
    780c:	b8 01       	movw	r22, r16
    780e:	0e 94 10 3e 	call	0x7c20	; 0x7c20 <__fpcmp_parts_f>
    7812:	01 c0       	rjmp	.+2      	; 0x7816 <__gtsf2+0x58>
    7814:	8f ef       	ldi	r24, 0xFF	; 255
    7816:	68 96       	adiw	r28, 0x18	; 24
    7818:	e6 e0       	ldi	r30, 0x06	; 6
    781a:	0c 94 b8 3e 	jmp	0x7d70	; 0x7d70 <__epilogue_restores__+0x18>

0000781e <__gesf2>:
    781e:	a8 e1       	ldi	r26, 0x18	; 24
    7820:	b0 e0       	ldi	r27, 0x00	; 0
    7822:	e5 e1       	ldi	r30, 0x15	; 21
    7824:	fc e3       	ldi	r31, 0x3C	; 60
    7826:	0c 94 9c 3e 	jmp	0x7d38	; 0x7d38 <__prologue_saves__+0x18>
    782a:	69 83       	std	Y+1, r22	; 0x01
    782c:	7a 83       	std	Y+2, r23	; 0x02
    782e:	8b 83       	std	Y+3, r24	; 0x03
    7830:	9c 83       	std	Y+4, r25	; 0x04
    7832:	2d 83       	std	Y+5, r18	; 0x05
    7834:	3e 83       	std	Y+6, r19	; 0x06
    7836:	4f 83       	std	Y+7, r20	; 0x07
    7838:	58 87       	std	Y+8, r21	; 0x08
    783a:	89 e0       	ldi	r24, 0x09	; 9
    783c:	e8 2e       	mov	r14, r24
    783e:	f1 2c       	mov	r15, r1
    7840:	ec 0e       	add	r14, r28
    7842:	fd 1e       	adc	r15, r29
    7844:	ce 01       	movw	r24, r28
    7846:	01 96       	adiw	r24, 0x01	; 1
    7848:	b7 01       	movw	r22, r14
    784a:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__unpack_f>
    784e:	8e 01       	movw	r16, r28
    7850:	0f 5e       	subi	r16, 0xEF	; 239
    7852:	1f 4f       	sbci	r17, 0xFF	; 255
    7854:	ce 01       	movw	r24, r28
    7856:	05 96       	adiw	r24, 0x05	; 5
    7858:	b8 01       	movw	r22, r16
    785a:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__unpack_f>
    785e:	89 85       	ldd	r24, Y+9	; 0x09
    7860:	82 30       	cpi	r24, 0x02	; 2
    7862:	40 f0       	brcs	.+16     	; 0x7874 <__gesf2+0x56>
    7864:	89 89       	ldd	r24, Y+17	; 0x11
    7866:	82 30       	cpi	r24, 0x02	; 2
    7868:	28 f0       	brcs	.+10     	; 0x7874 <__gesf2+0x56>
    786a:	c7 01       	movw	r24, r14
    786c:	b8 01       	movw	r22, r16
    786e:	0e 94 10 3e 	call	0x7c20	; 0x7c20 <__fpcmp_parts_f>
    7872:	01 c0       	rjmp	.+2      	; 0x7876 <__gesf2+0x58>
    7874:	8f ef       	ldi	r24, 0xFF	; 255
    7876:	68 96       	adiw	r28, 0x18	; 24
    7878:	e6 e0       	ldi	r30, 0x06	; 6
    787a:	0c 94 b8 3e 	jmp	0x7d70	; 0x7d70 <__epilogue_restores__+0x18>

0000787e <__ltsf2>:
    787e:	a8 e1       	ldi	r26, 0x18	; 24
    7880:	b0 e0       	ldi	r27, 0x00	; 0
    7882:	e5 e4       	ldi	r30, 0x45	; 69
    7884:	fc e3       	ldi	r31, 0x3C	; 60
    7886:	0c 94 9c 3e 	jmp	0x7d38	; 0x7d38 <__prologue_saves__+0x18>
    788a:	69 83       	std	Y+1, r22	; 0x01
    788c:	7a 83       	std	Y+2, r23	; 0x02
    788e:	8b 83       	std	Y+3, r24	; 0x03
    7890:	9c 83       	std	Y+4, r25	; 0x04
    7892:	2d 83       	std	Y+5, r18	; 0x05
    7894:	3e 83       	std	Y+6, r19	; 0x06
    7896:	4f 83       	std	Y+7, r20	; 0x07
    7898:	58 87       	std	Y+8, r21	; 0x08
    789a:	89 e0       	ldi	r24, 0x09	; 9
    789c:	e8 2e       	mov	r14, r24
    789e:	f1 2c       	mov	r15, r1
    78a0:	ec 0e       	add	r14, r28
    78a2:	fd 1e       	adc	r15, r29
    78a4:	ce 01       	movw	r24, r28
    78a6:	01 96       	adiw	r24, 0x01	; 1
    78a8:	b7 01       	movw	r22, r14
    78aa:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__unpack_f>
    78ae:	8e 01       	movw	r16, r28
    78b0:	0f 5e       	subi	r16, 0xEF	; 239
    78b2:	1f 4f       	sbci	r17, 0xFF	; 255
    78b4:	ce 01       	movw	r24, r28
    78b6:	05 96       	adiw	r24, 0x05	; 5
    78b8:	b8 01       	movw	r22, r16
    78ba:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__unpack_f>
    78be:	89 85       	ldd	r24, Y+9	; 0x09
    78c0:	82 30       	cpi	r24, 0x02	; 2
    78c2:	40 f0       	brcs	.+16     	; 0x78d4 <__ltsf2+0x56>
    78c4:	89 89       	ldd	r24, Y+17	; 0x11
    78c6:	82 30       	cpi	r24, 0x02	; 2
    78c8:	28 f0       	brcs	.+10     	; 0x78d4 <__ltsf2+0x56>
    78ca:	c7 01       	movw	r24, r14
    78cc:	b8 01       	movw	r22, r16
    78ce:	0e 94 10 3e 	call	0x7c20	; 0x7c20 <__fpcmp_parts_f>
    78d2:	01 c0       	rjmp	.+2      	; 0x78d6 <__ltsf2+0x58>
    78d4:	81 e0       	ldi	r24, 0x01	; 1
    78d6:	68 96       	adiw	r28, 0x18	; 24
    78d8:	e6 e0       	ldi	r30, 0x06	; 6
    78da:	0c 94 b8 3e 	jmp	0x7d70	; 0x7d70 <__epilogue_restores__+0x18>

000078de <__fixsfsi>:
    78de:	ac e0       	ldi	r26, 0x0C	; 12
    78e0:	b0 e0       	ldi	r27, 0x00	; 0
    78e2:	e5 e7       	ldi	r30, 0x75	; 117
    78e4:	fc e3       	ldi	r31, 0x3C	; 60
    78e6:	0c 94 a0 3e 	jmp	0x7d40	; 0x7d40 <__prologue_saves__+0x20>
    78ea:	69 83       	std	Y+1, r22	; 0x01
    78ec:	7a 83       	std	Y+2, r23	; 0x02
    78ee:	8b 83       	std	Y+3, r24	; 0x03
    78f0:	9c 83       	std	Y+4, r25	; 0x04
    78f2:	ce 01       	movw	r24, r28
    78f4:	01 96       	adiw	r24, 0x01	; 1
    78f6:	be 01       	movw	r22, r28
    78f8:	6b 5f       	subi	r22, 0xFB	; 251
    78fa:	7f 4f       	sbci	r23, 0xFF	; 255
    78fc:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__unpack_f>
    7900:	8d 81       	ldd	r24, Y+5	; 0x05
    7902:	82 30       	cpi	r24, 0x02	; 2
    7904:	61 f1       	breq	.+88     	; 0x795e <__fixsfsi+0x80>
    7906:	82 30       	cpi	r24, 0x02	; 2
    7908:	50 f1       	brcs	.+84     	; 0x795e <__fixsfsi+0x80>
    790a:	84 30       	cpi	r24, 0x04	; 4
    790c:	21 f4       	brne	.+8      	; 0x7916 <__fixsfsi+0x38>
    790e:	8e 81       	ldd	r24, Y+6	; 0x06
    7910:	88 23       	and	r24, r24
    7912:	51 f1       	breq	.+84     	; 0x7968 <__fixsfsi+0x8a>
    7914:	2e c0       	rjmp	.+92     	; 0x7972 <__fixsfsi+0x94>
    7916:	2f 81       	ldd	r18, Y+7	; 0x07
    7918:	38 85       	ldd	r19, Y+8	; 0x08
    791a:	37 fd       	sbrc	r19, 7
    791c:	20 c0       	rjmp	.+64     	; 0x795e <__fixsfsi+0x80>
    791e:	6e 81       	ldd	r22, Y+6	; 0x06
    7920:	2f 31       	cpi	r18, 0x1F	; 31
    7922:	31 05       	cpc	r19, r1
    7924:	1c f0       	brlt	.+6      	; 0x792c <__fixsfsi+0x4e>
    7926:	66 23       	and	r22, r22
    7928:	f9 f0       	breq	.+62     	; 0x7968 <__fixsfsi+0x8a>
    792a:	23 c0       	rjmp	.+70     	; 0x7972 <__fixsfsi+0x94>
    792c:	8e e1       	ldi	r24, 0x1E	; 30
    792e:	90 e0       	ldi	r25, 0x00	; 0
    7930:	82 1b       	sub	r24, r18
    7932:	93 0b       	sbc	r25, r19
    7934:	29 85       	ldd	r18, Y+9	; 0x09
    7936:	3a 85       	ldd	r19, Y+10	; 0x0a
    7938:	4b 85       	ldd	r20, Y+11	; 0x0b
    793a:	5c 85       	ldd	r21, Y+12	; 0x0c
    793c:	04 c0       	rjmp	.+8      	; 0x7946 <__fixsfsi+0x68>
    793e:	56 95       	lsr	r21
    7940:	47 95       	ror	r20
    7942:	37 95       	ror	r19
    7944:	27 95       	ror	r18
    7946:	8a 95       	dec	r24
    7948:	d2 f7       	brpl	.-12     	; 0x793e <__fixsfsi+0x60>
    794a:	66 23       	and	r22, r22
    794c:	b1 f0       	breq	.+44     	; 0x797a <__fixsfsi+0x9c>
    794e:	50 95       	com	r21
    7950:	40 95       	com	r20
    7952:	30 95       	com	r19
    7954:	21 95       	neg	r18
    7956:	3f 4f       	sbci	r19, 0xFF	; 255
    7958:	4f 4f       	sbci	r20, 0xFF	; 255
    795a:	5f 4f       	sbci	r21, 0xFF	; 255
    795c:	0e c0       	rjmp	.+28     	; 0x797a <__fixsfsi+0x9c>
    795e:	20 e0       	ldi	r18, 0x00	; 0
    7960:	30 e0       	ldi	r19, 0x00	; 0
    7962:	40 e0       	ldi	r20, 0x00	; 0
    7964:	50 e0       	ldi	r21, 0x00	; 0
    7966:	09 c0       	rjmp	.+18     	; 0x797a <__fixsfsi+0x9c>
    7968:	2f ef       	ldi	r18, 0xFF	; 255
    796a:	3f ef       	ldi	r19, 0xFF	; 255
    796c:	4f ef       	ldi	r20, 0xFF	; 255
    796e:	5f e7       	ldi	r21, 0x7F	; 127
    7970:	04 c0       	rjmp	.+8      	; 0x797a <__fixsfsi+0x9c>
    7972:	20 e0       	ldi	r18, 0x00	; 0
    7974:	30 e0       	ldi	r19, 0x00	; 0
    7976:	40 e0       	ldi	r20, 0x00	; 0
    7978:	50 e8       	ldi	r21, 0x80	; 128
    797a:	b9 01       	movw	r22, r18
    797c:	ca 01       	movw	r24, r20
    797e:	2c 96       	adiw	r28, 0x0c	; 12
    7980:	e2 e0       	ldi	r30, 0x02	; 2
    7982:	0c 94 bc 3e 	jmp	0x7d78	; 0x7d78 <__epilogue_restores__+0x20>

00007986 <__pack_f>:
    7986:	df 92       	push	r13
    7988:	ef 92       	push	r14
    798a:	ff 92       	push	r15
    798c:	0f 93       	push	r16
    798e:	1f 93       	push	r17
    7990:	fc 01       	movw	r30, r24
    7992:	e4 80       	ldd	r14, Z+4	; 0x04
    7994:	f5 80       	ldd	r15, Z+5	; 0x05
    7996:	06 81       	ldd	r16, Z+6	; 0x06
    7998:	17 81       	ldd	r17, Z+7	; 0x07
    799a:	d1 80       	ldd	r13, Z+1	; 0x01
    799c:	80 81       	ld	r24, Z
    799e:	82 30       	cpi	r24, 0x02	; 2
    79a0:	48 f4       	brcc	.+18     	; 0x79b4 <__pack_f+0x2e>
    79a2:	80 e0       	ldi	r24, 0x00	; 0
    79a4:	90 e0       	ldi	r25, 0x00	; 0
    79a6:	a0 e1       	ldi	r26, 0x10	; 16
    79a8:	b0 e0       	ldi	r27, 0x00	; 0
    79aa:	e8 2a       	or	r14, r24
    79ac:	f9 2a       	or	r15, r25
    79ae:	0a 2b       	or	r16, r26
    79b0:	1b 2b       	or	r17, r27
    79b2:	a5 c0       	rjmp	.+330    	; 0x7afe <__pack_f+0x178>
    79b4:	84 30       	cpi	r24, 0x04	; 4
    79b6:	09 f4       	brne	.+2      	; 0x79ba <__pack_f+0x34>
    79b8:	9f c0       	rjmp	.+318    	; 0x7af8 <__pack_f+0x172>
    79ba:	82 30       	cpi	r24, 0x02	; 2
    79bc:	21 f4       	brne	.+8      	; 0x79c6 <__pack_f+0x40>
    79be:	ee 24       	eor	r14, r14
    79c0:	ff 24       	eor	r15, r15
    79c2:	87 01       	movw	r16, r14
    79c4:	05 c0       	rjmp	.+10     	; 0x79d0 <__pack_f+0x4a>
    79c6:	e1 14       	cp	r14, r1
    79c8:	f1 04       	cpc	r15, r1
    79ca:	01 05       	cpc	r16, r1
    79cc:	11 05       	cpc	r17, r1
    79ce:	19 f4       	brne	.+6      	; 0x79d6 <__pack_f+0x50>
    79d0:	e0 e0       	ldi	r30, 0x00	; 0
    79d2:	f0 e0       	ldi	r31, 0x00	; 0
    79d4:	96 c0       	rjmp	.+300    	; 0x7b02 <__pack_f+0x17c>
    79d6:	62 81       	ldd	r22, Z+2	; 0x02
    79d8:	73 81       	ldd	r23, Z+3	; 0x03
    79da:	9f ef       	ldi	r25, 0xFF	; 255
    79dc:	62 38       	cpi	r22, 0x82	; 130
    79de:	79 07       	cpc	r23, r25
    79e0:	0c f0       	brlt	.+2      	; 0x79e4 <__pack_f+0x5e>
    79e2:	5b c0       	rjmp	.+182    	; 0x7a9a <__pack_f+0x114>
    79e4:	22 e8       	ldi	r18, 0x82	; 130
    79e6:	3f ef       	ldi	r19, 0xFF	; 255
    79e8:	26 1b       	sub	r18, r22
    79ea:	37 0b       	sbc	r19, r23
    79ec:	2a 31       	cpi	r18, 0x1A	; 26
    79ee:	31 05       	cpc	r19, r1
    79f0:	2c f0       	brlt	.+10     	; 0x79fc <__pack_f+0x76>
    79f2:	20 e0       	ldi	r18, 0x00	; 0
    79f4:	30 e0       	ldi	r19, 0x00	; 0
    79f6:	40 e0       	ldi	r20, 0x00	; 0
    79f8:	50 e0       	ldi	r21, 0x00	; 0
    79fa:	2a c0       	rjmp	.+84     	; 0x7a50 <__pack_f+0xca>
    79fc:	b8 01       	movw	r22, r16
    79fe:	a7 01       	movw	r20, r14
    7a00:	02 2e       	mov	r0, r18
    7a02:	04 c0       	rjmp	.+8      	; 0x7a0c <__pack_f+0x86>
    7a04:	76 95       	lsr	r23
    7a06:	67 95       	ror	r22
    7a08:	57 95       	ror	r21
    7a0a:	47 95       	ror	r20
    7a0c:	0a 94       	dec	r0
    7a0e:	d2 f7       	brpl	.-12     	; 0x7a04 <__pack_f+0x7e>
    7a10:	81 e0       	ldi	r24, 0x01	; 1
    7a12:	90 e0       	ldi	r25, 0x00	; 0
    7a14:	a0 e0       	ldi	r26, 0x00	; 0
    7a16:	b0 e0       	ldi	r27, 0x00	; 0
    7a18:	04 c0       	rjmp	.+8      	; 0x7a22 <__pack_f+0x9c>
    7a1a:	88 0f       	add	r24, r24
    7a1c:	99 1f       	adc	r25, r25
    7a1e:	aa 1f       	adc	r26, r26
    7a20:	bb 1f       	adc	r27, r27
    7a22:	2a 95       	dec	r18
    7a24:	d2 f7       	brpl	.-12     	; 0x7a1a <__pack_f+0x94>
    7a26:	01 97       	sbiw	r24, 0x01	; 1
    7a28:	a1 09       	sbc	r26, r1
    7a2a:	b1 09       	sbc	r27, r1
    7a2c:	8e 21       	and	r24, r14
    7a2e:	9f 21       	and	r25, r15
    7a30:	a0 23       	and	r26, r16
    7a32:	b1 23       	and	r27, r17
    7a34:	00 97       	sbiw	r24, 0x00	; 0
    7a36:	a1 05       	cpc	r26, r1
    7a38:	b1 05       	cpc	r27, r1
    7a3a:	21 f0       	breq	.+8      	; 0x7a44 <__pack_f+0xbe>
    7a3c:	81 e0       	ldi	r24, 0x01	; 1
    7a3e:	90 e0       	ldi	r25, 0x00	; 0
    7a40:	a0 e0       	ldi	r26, 0x00	; 0
    7a42:	b0 e0       	ldi	r27, 0x00	; 0
    7a44:	9a 01       	movw	r18, r20
    7a46:	ab 01       	movw	r20, r22
    7a48:	28 2b       	or	r18, r24
    7a4a:	39 2b       	or	r19, r25
    7a4c:	4a 2b       	or	r20, r26
    7a4e:	5b 2b       	or	r21, r27
    7a50:	da 01       	movw	r26, r20
    7a52:	c9 01       	movw	r24, r18
    7a54:	8f 77       	andi	r24, 0x7F	; 127
    7a56:	90 70       	andi	r25, 0x00	; 0
    7a58:	a0 70       	andi	r26, 0x00	; 0
    7a5a:	b0 70       	andi	r27, 0x00	; 0
    7a5c:	80 34       	cpi	r24, 0x40	; 64
    7a5e:	91 05       	cpc	r25, r1
    7a60:	a1 05       	cpc	r26, r1
    7a62:	b1 05       	cpc	r27, r1
    7a64:	39 f4       	brne	.+14     	; 0x7a74 <__pack_f+0xee>
    7a66:	27 ff       	sbrs	r18, 7
    7a68:	09 c0       	rjmp	.+18     	; 0x7a7c <__pack_f+0xf6>
    7a6a:	20 5c       	subi	r18, 0xC0	; 192
    7a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a6e:	4f 4f       	sbci	r20, 0xFF	; 255
    7a70:	5f 4f       	sbci	r21, 0xFF	; 255
    7a72:	04 c0       	rjmp	.+8      	; 0x7a7c <__pack_f+0xf6>
    7a74:	21 5c       	subi	r18, 0xC1	; 193
    7a76:	3f 4f       	sbci	r19, 0xFF	; 255
    7a78:	4f 4f       	sbci	r20, 0xFF	; 255
    7a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    7a7c:	e0 e0       	ldi	r30, 0x00	; 0
    7a7e:	f0 e0       	ldi	r31, 0x00	; 0
    7a80:	20 30       	cpi	r18, 0x00	; 0
    7a82:	a0 e0       	ldi	r26, 0x00	; 0
    7a84:	3a 07       	cpc	r19, r26
    7a86:	a0 e0       	ldi	r26, 0x00	; 0
    7a88:	4a 07       	cpc	r20, r26
    7a8a:	a0 e4       	ldi	r26, 0x40	; 64
    7a8c:	5a 07       	cpc	r21, r26
    7a8e:	10 f0       	brcs	.+4      	; 0x7a94 <__pack_f+0x10e>
    7a90:	e1 e0       	ldi	r30, 0x01	; 1
    7a92:	f0 e0       	ldi	r31, 0x00	; 0
    7a94:	79 01       	movw	r14, r18
    7a96:	8a 01       	movw	r16, r20
    7a98:	27 c0       	rjmp	.+78     	; 0x7ae8 <__pack_f+0x162>
    7a9a:	60 38       	cpi	r22, 0x80	; 128
    7a9c:	71 05       	cpc	r23, r1
    7a9e:	64 f5       	brge	.+88     	; 0x7af8 <__pack_f+0x172>
    7aa0:	fb 01       	movw	r30, r22
    7aa2:	e1 58       	subi	r30, 0x81	; 129
    7aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    7aa6:	d8 01       	movw	r26, r16
    7aa8:	c7 01       	movw	r24, r14
    7aaa:	8f 77       	andi	r24, 0x7F	; 127
    7aac:	90 70       	andi	r25, 0x00	; 0
    7aae:	a0 70       	andi	r26, 0x00	; 0
    7ab0:	b0 70       	andi	r27, 0x00	; 0
    7ab2:	80 34       	cpi	r24, 0x40	; 64
    7ab4:	91 05       	cpc	r25, r1
    7ab6:	a1 05       	cpc	r26, r1
    7ab8:	b1 05       	cpc	r27, r1
    7aba:	39 f4       	brne	.+14     	; 0x7aca <__pack_f+0x144>
    7abc:	e7 fe       	sbrs	r14, 7
    7abe:	0d c0       	rjmp	.+26     	; 0x7ada <__pack_f+0x154>
    7ac0:	80 e4       	ldi	r24, 0x40	; 64
    7ac2:	90 e0       	ldi	r25, 0x00	; 0
    7ac4:	a0 e0       	ldi	r26, 0x00	; 0
    7ac6:	b0 e0       	ldi	r27, 0x00	; 0
    7ac8:	04 c0       	rjmp	.+8      	; 0x7ad2 <__pack_f+0x14c>
    7aca:	8f e3       	ldi	r24, 0x3F	; 63
    7acc:	90 e0       	ldi	r25, 0x00	; 0
    7ace:	a0 e0       	ldi	r26, 0x00	; 0
    7ad0:	b0 e0       	ldi	r27, 0x00	; 0
    7ad2:	e8 0e       	add	r14, r24
    7ad4:	f9 1e       	adc	r15, r25
    7ad6:	0a 1f       	adc	r16, r26
    7ad8:	1b 1f       	adc	r17, r27
    7ada:	17 ff       	sbrs	r17, 7
    7adc:	05 c0       	rjmp	.+10     	; 0x7ae8 <__pack_f+0x162>
    7ade:	16 95       	lsr	r17
    7ae0:	07 95       	ror	r16
    7ae2:	f7 94       	ror	r15
    7ae4:	e7 94       	ror	r14
    7ae6:	31 96       	adiw	r30, 0x01	; 1
    7ae8:	87 e0       	ldi	r24, 0x07	; 7
    7aea:	16 95       	lsr	r17
    7aec:	07 95       	ror	r16
    7aee:	f7 94       	ror	r15
    7af0:	e7 94       	ror	r14
    7af2:	8a 95       	dec	r24
    7af4:	d1 f7       	brne	.-12     	; 0x7aea <__pack_f+0x164>
    7af6:	05 c0       	rjmp	.+10     	; 0x7b02 <__pack_f+0x17c>
    7af8:	ee 24       	eor	r14, r14
    7afa:	ff 24       	eor	r15, r15
    7afc:	87 01       	movw	r16, r14
    7afe:	ef ef       	ldi	r30, 0xFF	; 255
    7b00:	f0 e0       	ldi	r31, 0x00	; 0
    7b02:	6e 2f       	mov	r22, r30
    7b04:	67 95       	ror	r22
    7b06:	66 27       	eor	r22, r22
    7b08:	67 95       	ror	r22
    7b0a:	90 2f       	mov	r25, r16
    7b0c:	9f 77       	andi	r25, 0x7F	; 127
    7b0e:	d7 94       	ror	r13
    7b10:	dd 24       	eor	r13, r13
    7b12:	d7 94       	ror	r13
    7b14:	8e 2f       	mov	r24, r30
    7b16:	86 95       	lsr	r24
    7b18:	49 2f       	mov	r20, r25
    7b1a:	46 2b       	or	r20, r22
    7b1c:	58 2f       	mov	r21, r24
    7b1e:	5d 29       	or	r21, r13
    7b20:	b7 01       	movw	r22, r14
    7b22:	ca 01       	movw	r24, r20
    7b24:	1f 91       	pop	r17
    7b26:	0f 91       	pop	r16
    7b28:	ff 90       	pop	r15
    7b2a:	ef 90       	pop	r14
    7b2c:	df 90       	pop	r13
    7b2e:	08 95       	ret

00007b30 <__unpack_f>:
    7b30:	fc 01       	movw	r30, r24
    7b32:	db 01       	movw	r26, r22
    7b34:	40 81       	ld	r20, Z
    7b36:	51 81       	ldd	r21, Z+1	; 0x01
    7b38:	22 81       	ldd	r18, Z+2	; 0x02
    7b3a:	62 2f       	mov	r22, r18
    7b3c:	6f 77       	andi	r22, 0x7F	; 127
    7b3e:	70 e0       	ldi	r23, 0x00	; 0
    7b40:	22 1f       	adc	r18, r18
    7b42:	22 27       	eor	r18, r18
    7b44:	22 1f       	adc	r18, r18
    7b46:	93 81       	ldd	r25, Z+3	; 0x03
    7b48:	89 2f       	mov	r24, r25
    7b4a:	88 0f       	add	r24, r24
    7b4c:	82 2b       	or	r24, r18
    7b4e:	28 2f       	mov	r18, r24
    7b50:	30 e0       	ldi	r19, 0x00	; 0
    7b52:	99 1f       	adc	r25, r25
    7b54:	99 27       	eor	r25, r25
    7b56:	99 1f       	adc	r25, r25
    7b58:	11 96       	adiw	r26, 0x01	; 1
    7b5a:	9c 93       	st	X, r25
    7b5c:	11 97       	sbiw	r26, 0x01	; 1
    7b5e:	21 15       	cp	r18, r1
    7b60:	31 05       	cpc	r19, r1
    7b62:	a9 f5       	brne	.+106    	; 0x7bce <__unpack_f+0x9e>
    7b64:	41 15       	cp	r20, r1
    7b66:	51 05       	cpc	r21, r1
    7b68:	61 05       	cpc	r22, r1
    7b6a:	71 05       	cpc	r23, r1
    7b6c:	11 f4       	brne	.+4      	; 0x7b72 <__unpack_f+0x42>
    7b6e:	82 e0       	ldi	r24, 0x02	; 2
    7b70:	37 c0       	rjmp	.+110    	; 0x7be0 <__unpack_f+0xb0>
    7b72:	82 e8       	ldi	r24, 0x82	; 130
    7b74:	9f ef       	ldi	r25, 0xFF	; 255
    7b76:	13 96       	adiw	r26, 0x03	; 3
    7b78:	9c 93       	st	X, r25
    7b7a:	8e 93       	st	-X, r24
    7b7c:	12 97       	sbiw	r26, 0x02	; 2
    7b7e:	9a 01       	movw	r18, r20
    7b80:	ab 01       	movw	r20, r22
    7b82:	67 e0       	ldi	r22, 0x07	; 7
    7b84:	22 0f       	add	r18, r18
    7b86:	33 1f       	adc	r19, r19
    7b88:	44 1f       	adc	r20, r20
    7b8a:	55 1f       	adc	r21, r21
    7b8c:	6a 95       	dec	r22
    7b8e:	d1 f7       	brne	.-12     	; 0x7b84 <__unpack_f+0x54>
    7b90:	83 e0       	ldi	r24, 0x03	; 3
    7b92:	8c 93       	st	X, r24
    7b94:	0d c0       	rjmp	.+26     	; 0x7bb0 <__unpack_f+0x80>
    7b96:	22 0f       	add	r18, r18
    7b98:	33 1f       	adc	r19, r19
    7b9a:	44 1f       	adc	r20, r20
    7b9c:	55 1f       	adc	r21, r21
    7b9e:	12 96       	adiw	r26, 0x02	; 2
    7ba0:	8d 91       	ld	r24, X+
    7ba2:	9c 91       	ld	r25, X
    7ba4:	13 97       	sbiw	r26, 0x03	; 3
    7ba6:	01 97       	sbiw	r24, 0x01	; 1
    7ba8:	13 96       	adiw	r26, 0x03	; 3
    7baa:	9c 93       	st	X, r25
    7bac:	8e 93       	st	-X, r24
    7bae:	12 97       	sbiw	r26, 0x02	; 2
    7bb0:	20 30       	cpi	r18, 0x00	; 0
    7bb2:	80 e0       	ldi	r24, 0x00	; 0
    7bb4:	38 07       	cpc	r19, r24
    7bb6:	80 e0       	ldi	r24, 0x00	; 0
    7bb8:	48 07       	cpc	r20, r24
    7bba:	80 e4       	ldi	r24, 0x40	; 64
    7bbc:	58 07       	cpc	r21, r24
    7bbe:	58 f3       	brcs	.-42     	; 0x7b96 <__unpack_f+0x66>
    7bc0:	14 96       	adiw	r26, 0x04	; 4
    7bc2:	2d 93       	st	X+, r18
    7bc4:	3d 93       	st	X+, r19
    7bc6:	4d 93       	st	X+, r20
    7bc8:	5c 93       	st	X, r21
    7bca:	17 97       	sbiw	r26, 0x07	; 7
    7bcc:	08 95       	ret
    7bce:	2f 3f       	cpi	r18, 0xFF	; 255
    7bd0:	31 05       	cpc	r19, r1
    7bd2:	79 f4       	brne	.+30     	; 0x7bf2 <__unpack_f+0xc2>
    7bd4:	41 15       	cp	r20, r1
    7bd6:	51 05       	cpc	r21, r1
    7bd8:	61 05       	cpc	r22, r1
    7bda:	71 05       	cpc	r23, r1
    7bdc:	19 f4       	brne	.+6      	; 0x7be4 <__unpack_f+0xb4>
    7bde:	84 e0       	ldi	r24, 0x04	; 4
    7be0:	8c 93       	st	X, r24
    7be2:	08 95       	ret
    7be4:	64 ff       	sbrs	r22, 4
    7be6:	03 c0       	rjmp	.+6      	; 0x7bee <__unpack_f+0xbe>
    7be8:	81 e0       	ldi	r24, 0x01	; 1
    7bea:	8c 93       	st	X, r24
    7bec:	12 c0       	rjmp	.+36     	; 0x7c12 <__unpack_f+0xe2>
    7bee:	1c 92       	st	X, r1
    7bf0:	10 c0       	rjmp	.+32     	; 0x7c12 <__unpack_f+0xe2>
    7bf2:	2f 57       	subi	r18, 0x7F	; 127
    7bf4:	30 40       	sbci	r19, 0x00	; 0
    7bf6:	13 96       	adiw	r26, 0x03	; 3
    7bf8:	3c 93       	st	X, r19
    7bfa:	2e 93       	st	-X, r18
    7bfc:	12 97       	sbiw	r26, 0x02	; 2
    7bfe:	83 e0       	ldi	r24, 0x03	; 3
    7c00:	8c 93       	st	X, r24
    7c02:	87 e0       	ldi	r24, 0x07	; 7
    7c04:	44 0f       	add	r20, r20
    7c06:	55 1f       	adc	r21, r21
    7c08:	66 1f       	adc	r22, r22
    7c0a:	77 1f       	adc	r23, r23
    7c0c:	8a 95       	dec	r24
    7c0e:	d1 f7       	brne	.-12     	; 0x7c04 <__unpack_f+0xd4>
    7c10:	70 64       	ori	r23, 0x40	; 64
    7c12:	14 96       	adiw	r26, 0x04	; 4
    7c14:	4d 93       	st	X+, r20
    7c16:	5d 93       	st	X+, r21
    7c18:	6d 93       	st	X+, r22
    7c1a:	7c 93       	st	X, r23
    7c1c:	17 97       	sbiw	r26, 0x07	; 7
    7c1e:	08 95       	ret

00007c20 <__fpcmp_parts_f>:
    7c20:	1f 93       	push	r17
    7c22:	dc 01       	movw	r26, r24
    7c24:	fb 01       	movw	r30, r22
    7c26:	9c 91       	ld	r25, X
    7c28:	92 30       	cpi	r25, 0x02	; 2
    7c2a:	08 f4       	brcc	.+2      	; 0x7c2e <__fpcmp_parts_f+0xe>
    7c2c:	47 c0       	rjmp	.+142    	; 0x7cbc <__fpcmp_parts_f+0x9c>
    7c2e:	80 81       	ld	r24, Z
    7c30:	82 30       	cpi	r24, 0x02	; 2
    7c32:	08 f4       	brcc	.+2      	; 0x7c36 <__fpcmp_parts_f+0x16>
    7c34:	43 c0       	rjmp	.+134    	; 0x7cbc <__fpcmp_parts_f+0x9c>
    7c36:	94 30       	cpi	r25, 0x04	; 4
    7c38:	51 f4       	brne	.+20     	; 0x7c4e <__fpcmp_parts_f+0x2e>
    7c3a:	11 96       	adiw	r26, 0x01	; 1
    7c3c:	1c 91       	ld	r17, X
    7c3e:	84 30       	cpi	r24, 0x04	; 4
    7c40:	99 f5       	brne	.+102    	; 0x7ca8 <__fpcmp_parts_f+0x88>
    7c42:	81 81       	ldd	r24, Z+1	; 0x01
    7c44:	68 2f       	mov	r22, r24
    7c46:	70 e0       	ldi	r23, 0x00	; 0
    7c48:	61 1b       	sub	r22, r17
    7c4a:	71 09       	sbc	r23, r1
    7c4c:	3f c0       	rjmp	.+126    	; 0x7ccc <__fpcmp_parts_f+0xac>
    7c4e:	84 30       	cpi	r24, 0x04	; 4
    7c50:	21 f0       	breq	.+8      	; 0x7c5a <__fpcmp_parts_f+0x3a>
    7c52:	92 30       	cpi	r25, 0x02	; 2
    7c54:	31 f4       	brne	.+12     	; 0x7c62 <__fpcmp_parts_f+0x42>
    7c56:	82 30       	cpi	r24, 0x02	; 2
    7c58:	b9 f1       	breq	.+110    	; 0x7cc8 <__fpcmp_parts_f+0xa8>
    7c5a:	81 81       	ldd	r24, Z+1	; 0x01
    7c5c:	88 23       	and	r24, r24
    7c5e:	89 f1       	breq	.+98     	; 0x7cc2 <__fpcmp_parts_f+0xa2>
    7c60:	2d c0       	rjmp	.+90     	; 0x7cbc <__fpcmp_parts_f+0x9c>
    7c62:	11 96       	adiw	r26, 0x01	; 1
    7c64:	1c 91       	ld	r17, X
    7c66:	11 97       	sbiw	r26, 0x01	; 1
    7c68:	82 30       	cpi	r24, 0x02	; 2
    7c6a:	f1 f0       	breq	.+60     	; 0x7ca8 <__fpcmp_parts_f+0x88>
    7c6c:	81 81       	ldd	r24, Z+1	; 0x01
    7c6e:	18 17       	cp	r17, r24
    7c70:	d9 f4       	brne	.+54     	; 0x7ca8 <__fpcmp_parts_f+0x88>
    7c72:	12 96       	adiw	r26, 0x02	; 2
    7c74:	2d 91       	ld	r18, X+
    7c76:	3c 91       	ld	r19, X
    7c78:	13 97       	sbiw	r26, 0x03	; 3
    7c7a:	82 81       	ldd	r24, Z+2	; 0x02
    7c7c:	93 81       	ldd	r25, Z+3	; 0x03
    7c7e:	82 17       	cp	r24, r18
    7c80:	93 07       	cpc	r25, r19
    7c82:	94 f0       	brlt	.+36     	; 0x7ca8 <__fpcmp_parts_f+0x88>
    7c84:	28 17       	cp	r18, r24
    7c86:	39 07       	cpc	r19, r25
    7c88:	bc f0       	brlt	.+46     	; 0x7cb8 <__fpcmp_parts_f+0x98>
    7c8a:	14 96       	adiw	r26, 0x04	; 4
    7c8c:	8d 91       	ld	r24, X+
    7c8e:	9d 91       	ld	r25, X+
    7c90:	0d 90       	ld	r0, X+
    7c92:	bc 91       	ld	r27, X
    7c94:	a0 2d       	mov	r26, r0
    7c96:	24 81       	ldd	r18, Z+4	; 0x04
    7c98:	35 81       	ldd	r19, Z+5	; 0x05
    7c9a:	46 81       	ldd	r20, Z+6	; 0x06
    7c9c:	57 81       	ldd	r21, Z+7	; 0x07
    7c9e:	28 17       	cp	r18, r24
    7ca0:	39 07       	cpc	r19, r25
    7ca2:	4a 07       	cpc	r20, r26
    7ca4:	5b 07       	cpc	r21, r27
    7ca6:	18 f4       	brcc	.+6      	; 0x7cae <__fpcmp_parts_f+0x8e>
    7ca8:	11 23       	and	r17, r17
    7caa:	41 f0       	breq	.+16     	; 0x7cbc <__fpcmp_parts_f+0x9c>
    7cac:	0a c0       	rjmp	.+20     	; 0x7cc2 <__fpcmp_parts_f+0xa2>
    7cae:	82 17       	cp	r24, r18
    7cb0:	93 07       	cpc	r25, r19
    7cb2:	a4 07       	cpc	r26, r20
    7cb4:	b5 07       	cpc	r27, r21
    7cb6:	40 f4       	brcc	.+16     	; 0x7cc8 <__fpcmp_parts_f+0xa8>
    7cb8:	11 23       	and	r17, r17
    7cba:	19 f0       	breq	.+6      	; 0x7cc2 <__fpcmp_parts_f+0xa2>
    7cbc:	61 e0       	ldi	r22, 0x01	; 1
    7cbe:	70 e0       	ldi	r23, 0x00	; 0
    7cc0:	05 c0       	rjmp	.+10     	; 0x7ccc <__fpcmp_parts_f+0xac>
    7cc2:	6f ef       	ldi	r22, 0xFF	; 255
    7cc4:	7f ef       	ldi	r23, 0xFF	; 255
    7cc6:	02 c0       	rjmp	.+4      	; 0x7ccc <__fpcmp_parts_f+0xac>
    7cc8:	60 e0       	ldi	r22, 0x00	; 0
    7cca:	70 e0       	ldi	r23, 0x00	; 0
    7ccc:	cb 01       	movw	r24, r22
    7cce:	1f 91       	pop	r17
    7cd0:	08 95       	ret

00007cd2 <__udivmodhi4>:
    7cd2:	aa 1b       	sub	r26, r26
    7cd4:	bb 1b       	sub	r27, r27
    7cd6:	51 e1       	ldi	r21, 0x11	; 17
    7cd8:	07 c0       	rjmp	.+14     	; 0x7ce8 <__udivmodhi4_ep>

00007cda <__udivmodhi4_loop>:
    7cda:	aa 1f       	adc	r26, r26
    7cdc:	bb 1f       	adc	r27, r27
    7cde:	a6 17       	cp	r26, r22
    7ce0:	b7 07       	cpc	r27, r23
    7ce2:	10 f0       	brcs	.+4      	; 0x7ce8 <__udivmodhi4_ep>
    7ce4:	a6 1b       	sub	r26, r22
    7ce6:	b7 0b       	sbc	r27, r23

00007ce8 <__udivmodhi4_ep>:
    7ce8:	88 1f       	adc	r24, r24
    7cea:	99 1f       	adc	r25, r25
    7cec:	5a 95       	dec	r21
    7cee:	a9 f7       	brne	.-22     	; 0x7cda <__udivmodhi4_loop>
    7cf0:	80 95       	com	r24
    7cf2:	90 95       	com	r25
    7cf4:	bc 01       	movw	r22, r24
    7cf6:	cd 01       	movw	r24, r26
    7cf8:	08 95       	ret

00007cfa <__divmodhi4>:
    7cfa:	97 fb       	bst	r25, 7
    7cfc:	09 2e       	mov	r0, r25
    7cfe:	07 26       	eor	r0, r23
    7d00:	0a d0       	rcall	.+20     	; 0x7d16 <__divmodhi4_neg1>
    7d02:	77 fd       	sbrc	r23, 7
    7d04:	04 d0       	rcall	.+8      	; 0x7d0e <__divmodhi4_neg2>
    7d06:	e5 df       	rcall	.-54     	; 0x7cd2 <__udivmodhi4>
    7d08:	06 d0       	rcall	.+12     	; 0x7d16 <__divmodhi4_neg1>
    7d0a:	00 20       	and	r0, r0
    7d0c:	1a f4       	brpl	.+6      	; 0x7d14 <__divmodhi4_exit>

00007d0e <__divmodhi4_neg2>:
    7d0e:	70 95       	com	r23
    7d10:	61 95       	neg	r22
    7d12:	7f 4f       	sbci	r23, 0xFF	; 255

00007d14 <__divmodhi4_exit>:
    7d14:	08 95       	ret

00007d16 <__divmodhi4_neg1>:
    7d16:	f6 f7       	brtc	.-4      	; 0x7d14 <__divmodhi4_exit>
    7d18:	90 95       	com	r25
    7d1a:	81 95       	neg	r24
    7d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d1e:	08 95       	ret

00007d20 <__prologue_saves__>:
    7d20:	2f 92       	push	r2
    7d22:	3f 92       	push	r3
    7d24:	4f 92       	push	r4
    7d26:	5f 92       	push	r5
    7d28:	6f 92       	push	r6
    7d2a:	7f 92       	push	r7
    7d2c:	8f 92       	push	r8
    7d2e:	9f 92       	push	r9
    7d30:	af 92       	push	r10
    7d32:	bf 92       	push	r11
    7d34:	cf 92       	push	r12
    7d36:	df 92       	push	r13
    7d38:	ef 92       	push	r14
    7d3a:	ff 92       	push	r15
    7d3c:	0f 93       	push	r16
    7d3e:	1f 93       	push	r17
    7d40:	cf 93       	push	r28
    7d42:	df 93       	push	r29
    7d44:	cd b7       	in	r28, 0x3d	; 61
    7d46:	de b7       	in	r29, 0x3e	; 62
    7d48:	ca 1b       	sub	r28, r26
    7d4a:	db 0b       	sbc	r29, r27
    7d4c:	0f b6       	in	r0, 0x3f	; 63
    7d4e:	f8 94       	cli
    7d50:	de bf       	out	0x3e, r29	; 62
    7d52:	0f be       	out	0x3f, r0	; 63
    7d54:	cd bf       	out	0x3d, r28	; 61
    7d56:	09 94       	ijmp

00007d58 <__epilogue_restores__>:
    7d58:	2a 88       	ldd	r2, Y+18	; 0x12
    7d5a:	39 88       	ldd	r3, Y+17	; 0x11
    7d5c:	48 88       	ldd	r4, Y+16	; 0x10
    7d5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    7d60:	6e 84       	ldd	r6, Y+14	; 0x0e
    7d62:	7d 84       	ldd	r7, Y+13	; 0x0d
    7d64:	8c 84       	ldd	r8, Y+12	; 0x0c
    7d66:	9b 84       	ldd	r9, Y+11	; 0x0b
    7d68:	aa 84       	ldd	r10, Y+10	; 0x0a
    7d6a:	b9 84       	ldd	r11, Y+9	; 0x09
    7d6c:	c8 84       	ldd	r12, Y+8	; 0x08
    7d6e:	df 80       	ldd	r13, Y+7	; 0x07
    7d70:	ee 80       	ldd	r14, Y+6	; 0x06
    7d72:	fd 80       	ldd	r15, Y+5	; 0x05
    7d74:	0c 81       	ldd	r16, Y+4	; 0x04
    7d76:	1b 81       	ldd	r17, Y+3	; 0x03
    7d78:	aa 81       	ldd	r26, Y+2	; 0x02
    7d7a:	b9 81       	ldd	r27, Y+1	; 0x01
    7d7c:	ce 0f       	add	r28, r30
    7d7e:	d1 1d       	adc	r29, r1
    7d80:	0f b6       	in	r0, 0x3f	; 63
    7d82:	f8 94       	cli
    7d84:	de bf       	out	0x3e, r29	; 62
    7d86:	0f be       	out	0x3f, r0	; 63
    7d88:	cd bf       	out	0x3d, r28	; 61
    7d8a:	ed 01       	movw	r28, r26
    7d8c:	08 95       	ret

00007d8e <_exit>:
    7d8e:	f8 94       	cli

00007d90 <__stop_program>:
    7d90:	ff cf       	rjmp	.-2      	; 0x7d90 <__stop_program>
